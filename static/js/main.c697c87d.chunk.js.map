{"version":3,"sources":["AddExpenseForm.js","EditExpenseForm.js","AddTransactionForm.js","Register.js","Login.js","Transactions.js","Home.js","App.js","reportWebVitals.js","index.js"],"names":["AddExpenseForm","handleClose","show","submitHandler","class_placerholder","className","onSubmit","required","type","name","placeholder","step","pattern","min","onClick","EditExpenseForm","myList","handleChange","oldExpenseName","onChange","map","element","value","expense","AddTransactionForm","api","Register","props","submitUser","e","preventDefault","isUsernameTaken","state","users","user","target","username","axios","post","password","then","response","console","log","newUser","id","data","setState","catch","error","window","alert","showLogin","showRegister","bind","renderLogin","changeLoginState","renderRegister","get","res","this","location","pathname","split","localStorage","setItem","createBrowserHistory","push","React","Component","Login","usernameFound","targetPassword","showHome","renderHome","changeRegisterState","Transactions","selectedTransactions","allTransactions","allTransactionsForSelectedDate","expenses","listOfMonths","month","monthNum","selectedMonth","selectedYear","today","Date","showTransactions","handleSelectedMonthDropDownChange","handleSelectedYearDropDownChange","handleSortByChange","renderTableData","renderTransactions","changeLoginSetState","selectedElement","parseInt","userTransactions","filter","transaction","userName","updatedMap","Map","spentValsForAllExpenses","set","changingSpentMap","expenseSpentVal","expenseID","spent","selectionVal","updatedTransactions","delete","idOfDeletedTransaction","updatedAllTransactions","updatedallTransactionsForSelectedDate","updatedSelectedTransactions","allTransaction","sumOfSpent","reverse","expenseName","transactionDate","payee","toFixed","color","size","submitHandlerDeleteTransaction","getItem","disabled","getFullYear","selected","transactions","userExpenses","getMonth","Home","submitHandlerAddExpense","budget","newId","newExpense","newBudget","parseFloat","newExpenseObject","remaining","submitHandlerAddTransaction","expenseSpent","nameOfExpense","Moment","format","transactionDropDownSelection","expenseValue","updateData","patch","targetID","updatedExpenses","editDropDownSelection","addExpenseToggle","addTransactionToggle","deleteExpenseToggle","deleteConfirmVal","editExpenseToggle","userOnCurrentDate","toggleAddExpenseModal","toggleAddTransactionModal","toggleDeleteExpenseModal","toggleEditExpenseModal","handleConfirmDelete","handleEditDropDownChange","handleTransactionDropDownChange","initEditDropDown","secondaryInitEdit","initTransactionDropDown","submitHandlerEditExpense","signOut","signOutsetState","idOfDeletedExpense","idOfExpense","idOfEditedExpense","firstElementInExpenses","length","lowestIndexExpense","elementWithSmallestIndex","sumOfBudget","amountSpent","submitHandlerDeleteExpense","updatedSpentValsForAllExpenses","tempMap","App","basename","process","exact","path","auth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c697c87d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css'\r\n\r\n\r\nconst AddExpenseForm = ({handleClose, show, submitHandler}) => {\r\n    \r\n    const class_placerholder = show ? 'modal display-block' : 'modal display-none';\r\n\r\n    return (<>\r\n        <div className={class_placerholder}>\r\n            <div className='modal-main'>\r\n                <h2 className=\"black\">Add Expense: </h2>\r\n                <form onSubmit={submitHandler}>\r\n                    <label className=\"black\">Expense Name: \r\n                        <input required type=\"text\" name=\"expense\"  placeholder=\"Eg. Food\" />\r\n                    </label>\r\n                    <label className=\"black\">Monthly Budget: $ \r\n                        <input required type=\"number\" step=\"0.01\" pattern=\"^\\d*(\\.\\d{0,2})?$\" min=\"0\" name=\"budget\" placeholder=\"0.00\" />\r\n                    </label>\r\n                    <div className=\"buttons-flex\">\r\n                        <button type=\"submit\" onClick={handleClose} className=\"buttons-invariant\">Submit</button>\r\n                        <button type=\"button\" onClick={handleClose} className=\"buttons-invariant\">Close</button>\r\n                    </div>\r\n                    \r\n                </form>\r\n                \r\n            </div>\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default AddExpenseForm","import React from 'react';\r\nimport './App.css'\r\n\r\n\r\nconst EditExpenseForm = ({myList, handleClose, handleChange, show, submitHandler, oldExpenseName}) => {\r\n\r\n    const class_placerholder = show ? 'modal display-block' : 'modal display-none';\r\n    \r\n    return (\r\n          \r\n        <div className={class_placerholder}>\r\n                <div className='modal-main'>\r\n                    <h2 className=\"black\">Edit Expense: </h2>\r\n                    <div>\r\n                        <form onSubmit={submitHandler}>\r\n                            \r\n                            <label className=\"black\">Expense to be Changed:\r\n                                <select onChange={handleChange}>\r\n                                    {myList.map((element) => (\r\n                                        <option value={element.expense}>{element.expense}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </label>\r\n                            \r\n                            <label className=\"black\">New Expense Name: \r\n                                <input required type=\"text\" name=\" newExpense\"  placeholder={oldExpenseName} />\r\n                            </label>\r\n                            <label className=\"black\">New Monthly Budget: $ \r\n                                <input required type=\"number\" step=\"0.01\" pattern=\"^\\d*(\\.\\d{0,2})?$\" min=\"0\" name=\"newBudget\" placeholder=\"0.00\" />\r\n                            </label>\r\n                            <div className=\"buttons-flex\">\r\n                                <button type=\"submit\" onClick={handleClose} className=\"buttons-invariant\">Submit</button>\r\n                                <button type=\"button\" onClick={ () => {handleClose();}} className=\"buttons-invariant\">Close</button>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n             \r\n        </div>\r\n        \r\n    )\r\n    \r\n}\r\n\r\nexport default EditExpenseForm","import React from 'react';\r\nimport './App.css'\r\n\r\n\r\nconst AddTransactionForm = ({myList, handleClose, show, submitHandler, handleChange,}) => {\r\n    \r\n    const class_placerholder = show ? 'modal display-block' : 'modal display-none';\r\n\r\n    return (<>\r\n        <div className={class_placerholder}>\r\n            <div className='modal-main'>\r\n                <h2 className=\"black\">Add Transaction: </h2>\r\n                <form onSubmit={submitHandler}>\r\n                    \r\n                    <label className=\"black\">Expense Category:\r\n                        <select onChange={handleChange}>\r\n                            {myList.map((element) => (\r\n                                <option value={element.expense}>{element.expense}</option>\r\n                            ))}\r\n                        </select>\r\n                    </label>\r\n\r\n                    <label className=\"black\">Payee Info: \r\n                        <input required type=\"text\" name=\"payee\"  placeholder=\"Eg. Superstore\" />\r\n                    </label>\r\n                    <label className=\"black\">Spent: $ \r\n                        <input required type=\"number\" step=\"0.01\" pattern=\"^\\d*(\\.\\d{0,2})?$\" min=\"0\" name=\"spent\" placeholder=\"0.00\" />\r\n                    </label>\r\n                    <div className=\"buttons-flex\">\r\n                        <button type=\"submit\" onClick={handleClose} className=\"buttons-invariant\">Submit</button>\r\n                        <button type=\"button\" onClick={handleClose} className=\"buttons-invariant\">Close</button>\r\n                    </div>\r\n                    \r\n                </form>\r\n                \r\n            </div>\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default AddTransactionForm","import React, { useState } from 'react';\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { faWindowRestore } from '@fortawesome/free-solid-svg-icons';\r\nimport {createBrowserHistory} from \"history\";\r\nimport Login from './Login';\r\n//import 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst api = 'http://Budgettracker-env.eba-vithmiis.us-east-2.elasticbeanstalk.com';\r\n\r\nexport default class Register extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            showLogin: false,\r\n            showRegister: true\r\n        }\r\n\r\n        this.submitUser = this.submitUser.bind(this);\r\n        this.renderLogin = this.renderLogin.bind(this);\r\n        this.changeLoginState = this.changeLoginState.bind(this);\r\n        this.renderRegister = this.renderRegister.bind(this);\r\n    }\r\n\r\n    submitUser = e => {\r\n        e.preventDefault();\r\n\r\n        let isUsernameTaken = false;\r\n        this.state.users.map(user => {\r\n            if (e.target[0].value === user.username) {\r\n                isUsernameTaken = true;\r\n            }\r\n        })\r\n        \r\n        if (isUsernameTaken === false) {\r\n            if (e.target[1].value === e.target[2].value) {\r\n                axios.post(api + \"/user/addRow\",{\r\n                    username: e.target[0].value,\r\n                    password: e.target[1].value\r\n                }).then(response => {\r\n                    console.log(\"status: \", \"user created\")\r\n                    console.log(\"Response:\", response)\r\n                    const  newUser = {\r\n                        id: response.data,\r\n                        username: e.target[0].value,\r\n                        password: e.target[1].value\r\n                    }\r\n\r\n                    this.setState({ users: [...this.state.users, newUser] }, function() {\r\n                        // console.log(\"username\", newUser.username);\r\n                        // console.log(\"pass\", newUser.password);\r\n                        // console.log(\"usersList\",this.state.users);\r\n                        e.target[0].value = '';\r\n                        e.target[1].value = '';\r\n                        e.target[2].value = '';\r\n                    })\r\n                    \r\n                }).catch(error => {\r\n                    console.log(error)\r\n                }) \r\n                \r\n                window.alert(\"User has been created!\") \r\n            }\r\n            else {\r\n                \r\n                e.target[1].value = '';\r\n                e.target[2].value = '';\r\n                \r\n                window.alert(\"Passwords do not match.Try again.\")\r\n            }\r\n        }\r\n        else {\r\n            window.alert(\"Username is taken. Try another.\")\r\n            e.target[0].value = '';\r\n            e.target[1].value = '';\r\n            e.target[2].value = '';\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(api + \"/user/allUsers\")\r\n        .then(res => {\r\n            this.setState({users: res.data}, function() {\r\n                console.log(this.state.users);\r\n            })\r\n            \r\n        })\r\n    }\r\n\r\n    changeLoginState() {\r\n        this.setState({showLogin: true, showRegister: false})\r\n    }\r\n    renderLogin() {\r\n        console.log(\"signed OUt\")\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        localStorage.setItem(\"auth\", false);\r\n\r\n\r\n        const history = createBrowserHistory();\r\n        history.push('/');   //changes address and bottom code changes the rendering\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Login />\r\n        </>)\r\n    }\r\n\r\n    renderRegister() {\r\n        return (<>\r\n            <div className='modal-main'>\r\n                    <h1 className=\"mainTitle\" id='formText'>Register</h1>\r\n                    <form onSubmit={this.submitUser}>\r\n                        <label className=\"black\">Username: \r\n                        <div>\r\n                            <input id=\"registerInput\" required type=\"text\" name=\"expense\"  placeholder=\"Username_99\" />\r\n                        </div>\r\n                        </label>\r\n                        <label className=\"black\">Password:  \r\n                            <input name=\"password\" placeholder=\"Password123\" required type=\"password\"/>\r\n                        </label>\r\n                        <label className=\"black\">Confirm Password:  \r\n                            <input name=\"confirmPassword\" placeholder=\"Password123\" required type=\"password\" />\r\n                        </label>\r\n                        <div className=\"buttons-flex\">\r\n                            <button type=\"submit\" className=\"buttons-invariant\">Submit</button>\r\n                            <button type=\"button\" onClick={() => {this.changeLoginState()}}className=\"buttons-invariant\">to Login</button>\r\n                        </div>\r\n                        \r\n                    </form>\r\n                    \r\n                </div>\r\n        </>)\r\n    }\r\n\r\n    render() {\r\n        return(<>\r\n            <div>\r\n                {this.state.showRegister && this.renderRegister()}\r\n                {this.state.showLogin && this.renderLogin()}\r\n            </div>\r\n        </>)\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Home from './Home';\r\nimport {Link, Route, Routes} from \"react-router-dom\";\r\nimport {createBrowserHistory} from \"history\";\r\nimport Register from './Register';\r\n//import 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst api = 'http://Budgettracker-env.eba-vithmiis.us-east-2.elasticbeanstalk.com';\r\n\r\nexport default class Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            username: '',\r\n            showHome: false,\r\n            showLogin: true,\r\n            showRegister: false\r\n        }\r\n\r\n        this.submitUser = this.submitUser.bind(this);\r\n        this.renderLogin = this.renderLogin.bind(this);\r\n        this.renderHome = this.renderHome.bind(this);\r\n        this.changeRegisterState = this.changeRegisterState.bind(this);\r\n        this.renderRegister = this.renderRegister.bind(this);\r\n    }\r\n\r\n    submitUser = e => {\r\n        e.preventDefault();\r\n        \r\n        let usernameFound = false;\r\n        let targetPassword = '';\r\n        \r\n        //check if username exists\r\n        this.state.users.map((user) => {\r\n            if (e.target[0].value === user.username) {\r\n                targetPassword = user.password;\r\n                usernameFound = true;\r\n            }\r\n        })\r\n\r\n        if (usernameFound) {\r\n            //check if password matches\r\n            const myUsername = e.target[0].value;\r\n            const homePage = { \r\n                pathname: \"/home/\" + myUsername, \r\n            };\r\n\r\n            if (e.target[1].value === targetPassword) {\r\n                localStorage.setItem(\"auth\", \"authenticated\");\r\n                this.setState({username: e.target[0].value, showHome: true, showLogin: false}, function() {\r\n                    console.log(\"Login Successful for: \", e.target[0].value);\r\n                });\r\n                \r\n            }\r\n            else {\r\n                e.target[0].value = '';\r\n                e.target[1].value = '';\r\n\r\n                console.log(\"login failed\");\r\n                window.alert(\"Username/Password is wrong. Try Again.\");\r\n            }\r\n        }\r\n        else {\r\n            e.target[0].value = '';\r\n            e.target[1].value = '';\r\n            console.log(\"login failed\");\r\n            window.alert(\"Username/Password is wrong. Try Again.\");\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(api + \"/user/allUsers\")\r\n        .then(res => {\r\n            this.setState({users: res.data}) \r\n        })\r\n        \r\n        localStorage.setItem(\"auth\", \"notAuthenticated\");\r\n        this.setState({showHome: false, showLogin: true, showRegister: false})\r\n    }\r\n\r\n    renderLogin() {\r\n        return (\r\n            <div className='App-header'>\r\n                <div className=\"registerBox\">\r\n                    <h1 className=\"mainTitle\" id='formText'>{\"Budget Tracker\\n\\nLogin\"}</h1>\r\n                    <form onSubmit={this.submitUser}>\r\n                        <label className=\"black\">Username: \r\n                        <div>\r\n                            <input id=\"registerInput\" required type=\"text\" name=\"expense\"  placeholder=\"Username_99\" />\r\n                        </div>\r\n                        </label>\r\n                        <label className=\"black\">Password:  \r\n                            <input name=\"password\" placeholder=\"Password123\" required type=\"password\"/>\r\n                        </label>\r\n                        <div className=\"buttons-flex\">\r\n                            <button type=\"submit\" className=\"buttons-invariant\">Submit</button>\r\n                            <button type=\"button\" onClick={() => {this.changeRegisterState()}} className=\"buttons-invariant\">Register</button>\r\n                        </div>\r\n                        \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    changeRegisterState() {\r\n        this.setState({showLogin: false, showRegister: true, showHome: false})\r\n    }\r\n    renderRegister() {\r\n        const history = createBrowserHistory();\r\n        history.push('/registerPage');   //changes address and bottom code changes the rendering\r\n\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Register />\r\n        </>)\r\n    }\r\n\r\n    renderHome() {\r\n        // const homePage = { \r\n        //     pathname: \"/home\" + this.state.username, \r\n        // };\r\n        \r\n        const history = createBrowserHistory();\r\n        history.push('/home/' + this.state.username);   //changes address and bottom code changes the rendering\r\n\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Home />\r\n        </>)\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n        \r\n        return (<>\r\n            <div>\r\n                {this.state.showLogin && this.renderLogin()}\r\n                {this.state.showHome && this.renderHome()}\r\n                {this.state.showRegister && this.renderRegister()}\r\n                \r\n                {/* {this.renderLinkIf(\r\n                    <Home username={this.state.username} />,\r\n                    this.state.showHome,\r\n                    '/home',\r\n                )} */}\r\n                \r\n            </div>\r\n            \r\n        </>)\r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport Home from './Home';\r\nimport {createBrowserHistory} from \"history\";\r\nimport Login from './Login'\r\n\r\nimport { Trash } from 'react-bootstrap-icons';\r\n\r\n\r\nconst api = 'http://Budgettracker-env.eba-vithmiis.us-east-2.elasticbeanstalk.com';\r\n\r\nexport default class Transactions extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedTransactions: [],   //selected trans\r\n            allTransactions: [], //all transactions\r\n            allTransactionsForSelectedDate: [],\r\n            expenses: [],\r\n            listOfMonths: [{month:\"January\", monthNum: 1}, {month:\"February\", monthNum: 2}, {month:\"March\", monthNum: 3}, {month:\"April\", monthNum: 4}, {month:\"May\", monthNum: 5}, {month:\"June\", monthNum: 6}, {month:\"July\", monthNum: 7}, {month:\"August\", monthNum: 8}, {month:\"September\", monthNum: 9}, {month:\"October\", monthNum: 10}, {month:\"November\", monthNum: 11}, {month:\"December\", monthNum: 12}],\r\n            selectedMonth: -1,\r\n            selectedYear: -1,\r\n            \r\n            today: new Date(),\r\n\r\n            showTransactions: true,\r\n            showHome: false,\r\n            showLogin: false\r\n        };\r\n\r\n        this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\r\n        this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\r\n        this.handleSortByChange = this.handleSortByChange.bind(this);\r\n\r\n        this.renderTableData = this.renderTableData.bind(this);\r\n        this.renderTransactions = this.renderTransactions.bind(this);\r\n        this.renderHome = this.renderHome.bind(this);\r\n        this.renderLogin = this.renderLogin.bind(this);\r\n        this.changeLoginSetState = this.changeLoginSetState.bind(this);\r\n    }\r\n\r\n    handleSelectedMonthDropDownChange(e) {\r\n        \r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No month selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            {this.state.listOfMonths.map((element) => {\r\n                if (element.monthNum === parseInt(e.target.value)) {\r\n                    selectedElement = element.monthNum;\r\n                }\r\n            })}\r\n            this.setState({selectedMonth: selectedElement}, function () {\r\n                axios.get(api + \"/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(res.data);\r\n\r\n                    let userTransactions = (res.data).filter((transaction) => {\r\n                        if (transaction.userName === username) {\r\n                            return transaction;\r\n                        }\r\n                    })\r\n                    \r\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedMap.set(expense.id, 0.0);\r\n                    })\r\n                    \r\n                    this.setState({selectedTransactions: userTransactions, spentValsForAllExpenses: userTransactions}, function(){\r\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\r\n                        \r\n                        this.state.selectedTransactions.map((transaction) => {\r\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID)\r\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                \r\n                        })\r\n                        this.setState({spentValsForAllExpenses: changingSpentMap})\r\n                    })\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSelectedYearDropDownChange(e) {\r\n        \r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No Year selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            selectedElement = e.target.value;\r\n            \r\n            this.setState({selectedYear: selectedElement}, function () {\r\n                axios.get(api + \"/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    // console.log(\"newTransactionDate(YearChange): \" ,res.data);\r\n                    \r\n        \r\n                    // this.setState({selectedTransactions: res.data, allTransactionsForSelectedDate: res.data}, function() {\r\n                        \r\n                        \r\n                    // });\r\n                    console.log(res.data);\r\n\r\n                    let userTransactions = (res.data).filter((transaction) => {\r\n                        if (transaction.userName === username) {\r\n                            return transaction;\r\n                        }\r\n                    })\r\n                    console.log(\"users transactions\", userTransactions)\r\n                    this.setState({selectedTransactions: userTransactions, allTransactionsForSelectedDate: userTransactions}, function() {\r\n                        console.log(this.state.selectedTransactions)\r\n                    });\r\n                    \r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSortByChange(e) {\r\n        \r\n        console.log(\"e.target.val\",e.target.value)\r\n        let selectionVal = -1; //temp var\r\n\r\n        this.state.expenses.map((element) => {\r\n                    if (element.id === parseInt(e.target.value)) {\r\n                        selectionVal = parseInt(element.id);\r\n                        console.log(\"myselectionVal: \",selectionVal)\r\n                    }\r\n        });\r\n\r\n        if (selectionVal === -1) {\r\n            this.setState({selectedTransactions: this.state.allTransactionsForSelectedDate})\r\n        }\r\n        else {\r\n            \r\n            \r\n            const updatedTransactions = this.state.allTransactionsForSelectedDate.filter((transaction) => {\r\n                \r\n                \r\n                if (transaction.expenseID === selectionVal) {\r\n                    return transaction;\r\n                }\r\n            })\r\n\r\n            this.setState({selectedTransactions: updatedTransactions})\r\n        }\r\n    }\r\n\r\n    submitHandlerDeleteTransaction(e) {\r\n        \r\n        console.log(e)\r\n        \r\n        //if (this.state.deleteConfirmVal) {\r\n            axios.delete(api + '/transaction/deleteRow/' + e)\r\n            .then(response => {\r\n                const idOfDeletedTransaction = response.data;\r\n                \r\n                const updatedAllTransactions = this.state.allTransactions.filter((transaction) => {\r\n                    if (transaction.id !== idOfDeletedTransaction) {\r\n                        return transaction; // fix syntax\r\n                    }\r\n                });\r\n                \r\n                const updatedallTransactionsForSelectedDate = this.state.allTransactionsForSelectedDate.filter((transaction) => {\r\n                    if (transaction.id !== idOfDeletedTransaction) {\r\n                        return transaction; // fix syntax\r\n                    }\r\n                });\r\n\r\n                const updatedSelectedTransactions = this.state.selectedTransactions.filter((transaction) => {\r\n                    if (transaction.id !== idOfDeletedTransaction) {\r\n                        return transaction; // fix syntax\r\n                    }\r\n                });\r\n\r\n                this.setState({allTransaction: updatedAllTransactions, allTransactionsForSelectedDate: updatedallTransactionsForSelectedDate, selectedTransactions: updatedSelectedTransactions});\r\n                console.log(response)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            }) \r\n            //window.location.reload();  \r\n        //}\r\n    }\r\n\r\n    renderTableData() {\r\n\r\n        let sumOfSpent = 0;\r\n\r\n        return(<>\r\n            {this.state.selectedTransactions.reverse().map((transaction) => {\r\n                let expenseName;\r\n                this.state.expenses.map((expense) => {\r\n                    if (expense.id === transaction.expenseID) {\r\n                        expenseName = expense.expense;\r\n                    }\r\n                })\r\n                sumOfSpent += transaction.spent;\r\n                return (\r\n                    <tr>\r\n                        <td>{transaction.transactionDate}</td>\r\n                        <td>{expenseName}</td>\r\n                        <td>{transaction.payee}</td>\r\n                        <td>${(transaction.spent).toFixed(2)}</td>\r\n                        {/* <td><button name=\"deleteButton\" id='trashCan' value={transaction.id} onClick={(e) => {this.submitHandlerDeleteTransaction(e);}}><IconContext.Provider value={{ style: {   fontSize: '25px', color: \"crimson\"}}}><FaTrash/></IconContext.Provider></button></td> */}\r\n                        <td><button id='trashCan'><Trash color=\"crimson\" size={35} onClick={(e) => {this.submitHandlerDeleteTransaction(transaction.id);}}/></button></td>\r\n                    </tr>\r\n                )\r\n            })}\r\n            <tr>\r\n                <td className='bold'>Total Spent : </td>\r\n                <td className='bold'></td>\r\n                <td className='bold'></td>\r\n                <td className='bold'>${sumOfSpent.toFixed(2)}</td>\r\n                <td></td>\r\n            </tr>\r\n        </>)\r\n        \r\n    }\r\n\r\n    renderLogin() {\r\n        \r\n        const history = createBrowserHistory();\r\n        history.push('/');   //changes address and bottom code changes the rendering\r\n            return (<>\r\n                {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n                \r\n                <Login />\r\n            </>)\r\n    }\r\n    changeLoginSetState() {\r\n        this.setState({showLogin: true, showHome: false, showTransactions: false});\r\n    }\r\n\r\n    renderTransactions() {\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        if (localStorage.getItem(\"auth\") === \"authenticated\"){\r\n            return (\r\n                <div className='App-header'>\r\n                    <h1 className=\"mainTitle\" id='trans-title'>My Transactions</h1>\r\n                    <div>\r\n                        {/* <Link to=\"/\"> */}\r\n                            <button onClick={() => {this.setState({showHome: true, showTransactions: false})}} id='goBack-button' className=\"button-25\">Go Back</button>\r\n                        {/* </Link> */}\r\n                    </div>\r\n                    \r\n                    <div className=\"dropdown-flex\" id=\"transDropDown\">\r\n                        <select value={this.state.selectedMonth} onChange={this.handleSelectedMonthDropDownChange}>\r\n                            <option disabled value=\"-1\">--Month--</option>\r\n                            {\r\n                            this.state.listOfMonths.map((element) => (\r\n                                <option value={element.monthNum}>{element.month}</option>\r\n                            ))}\r\n                        </select>\r\n                        <select onChange={this.handleSelectedYearDropDownChange}>\r\n                            <option disabled value=\"-1\">--Year--</option>\r\n                            <option value={this.state.today.getFullYear()-4}>{this.state.today.getFullYear()-4}</option>\r\n                            <option value={this.state.today.getFullYear()-3}>{this.state.today.getFullYear()-3}</option>\r\n                            <option value={this.state.today.getFullYear()-2}>{this.state.today.getFullYear()-2}</option>\r\n                            <option value={this.state.today.getFullYear()-1}>{this.state.today.getFullYear()-1}</option>\r\n                            <option selected value={this.state.today.getFullYear()}>{this.state.today.getFullYear()}</option>\r\n                        </select>\r\n                        <select onChange={this.handleSortByChange}>\r\n                                <option value=\"All\">--Filter/All--</option>\r\n                                {this.state.expenses.map((element) => (\r\n                                    <option value={element.id}>{element.expense}</option>\r\n                                ))}\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    \r\n                    <table className=\"expense-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>Category</th>\r\n                                <th>Payee</th>\r\n                                <th>Spent</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            \r\n            return (<>\r\n                {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n                <div><h2>You need to sign in to access this page.</h2></div>\r\n                <div className=\"buttons-flex\"><button id=\"signIn-button\" onClick={() => this.changeLoginSetState()}>Sign in</button></div>\r\n                \r\n            </>)\r\n        }\r\n    }\r\n\r\n    renderHome() {\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        const history = createBrowserHistory();\r\n        history.push('/home/' + username);   //changes address and bottom code changes the rendering\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Home />\r\n        </>)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        axios.get(api + \"/transaction/allTransactions\") //getting all transactions in db\r\n        .then(res => { \r\n            const transactions = res.data;\r\n            this.setState({allTransactions: transactions});\r\n        })\r\n\r\n        axios.get(api + \"/expense/allExpenses\")  //getting all expenses in db\r\n        .then(res => {\r\n\r\n            let userExpenses = (res.data).filter((expense) => {\r\n                if (expense.userName === username) {\r\n                    return expense;\r\n                }\r\n            })\r\n            this.setState({expenses: userExpenses}, function() {\r\n                console.log(\"User Expense\",this.state.expenses)\r\n            });\r\n            \r\n            \r\n        })\r\n        \r\n        const today = new Date();\r\n        this.setState({selectedMonth: today.getMonth()+1, selectedYear: today.getFullYear()}, function () {\r\n            axios.get(api + \"/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    \r\n                    \r\n                    \r\n\r\n                    let userTransactions = (res.data).filter((transaction) => {\r\n                        if (transaction.userName === username) {\r\n                            return transaction;\r\n                        }\r\n                    })\r\n                    console.log(\"users transactions\", userTransactions)\r\n                    this.setState({selectedTransactions: userTransactions, allTransactionsForSelectedDate: userTransactions}, function() {\r\n                        console.log(this.state.selectedTransactions)\r\n                    });\r\n                    \r\n                    //this.setState({selectedTransactions: res.data, allTransactionsForSelectedDate: res.data});\r\n                    console.log(\"selectedMOnth\", this.state.selectedMonth)\r\n                    console.log(\"selectedYear\", this.state.selectedYear)\r\n                })\r\n            \r\n        });\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        return(<>\r\n            <div>\r\n                {this.state.showTransactions && this.renderTransactions()}\r\n                {this.state.showHome && this.renderHome()}\r\n                {this.state.showLogin && this.renderLogin()}\r\n            </div>\r\n        </>)\r\n        \r\n    }\r\n}","import React from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport AddExpenseForm from './AddExpenseForm';\r\nimport EditExpenseForm from './EditExpenseForm';\r\nimport AddTransactionForm from './AddTransactionForm';\r\nimport Transactions from './Transactions';\r\nimport Moment from 'moment';\r\nimport {createBrowserHistory} from \"history\";\r\nimport Login from './Login';\r\n\r\nimport { Trash } from 'react-bootstrap-icons';\r\n\r\n\r\nconst api = 'http://Budgettracker-env.eba-vithmiis.us-east-2.elasticbeanstalk.com';\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            expenses: [],\r\n            editDropDownSelection:0,\r\n            transactionDropDownSelection:0,\r\n\r\n            addExpenseToggle: false,\r\n            addTransactionToggle: false,\r\n            deleteExpenseToggle: false,\r\n            deleteConfirmVal: false,\r\n            editExpenseToggle: false,\r\n\r\n            selectedTransactions: [],\r\n            listOfMonths: [{month:\"January\", monthNum: 1}, {month:\"February\", monthNum: 2}, {month:\"March\", monthNum: 3}, {month:\"April\", monthNum: 4}, {month:\"May\", monthNum: 5}, {month:\"June\", monthNum: 6}, {month:\"July\", monthNum: 7}, {month:\"August\", monthNum: 8}, {month:\"September\", monthNum: 9}, {month:\"October\", monthNum: 10}, {month:\"November\", monthNum: 11}, {month:\"December\", monthNum: 12}],\r\n            selectedMonth: -1,\r\n            selectedYear: -1,\r\n            \r\n            today: new Date(),\r\n            spentValsForAllExpenses: new Map(),\r\n\r\n            showHome: true,\r\n            showTransactions: false,\r\n            showLogin: false,\r\n            userOnCurrentDate: true,\r\n            oldExpenseName: ''\r\n        };\r\n\r\n        this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\r\n        this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this)\r\n        this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\r\n        this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\r\n        \r\n        this.handleConfirmDelete = this.handleConfirmDelete.bind(this);\r\n        this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\r\n        this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\r\n        this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\r\n        this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\r\n\r\n        this.initEditDropDown = this.initEditDropDown.bind(this);\r\n        this.secondaryInitEdit = this.secondaryInitEdit.bind(this);\r\n\r\n        this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\r\n        this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this);\r\n        this.signOut = this.signOut.bind(this);\r\n        this.signOutsetState = this.signOutsetState.bind(this);\r\n        //this.showTransactions = this.showTransactions.bind(this);\r\n        //this.listOfMonths = this.listOfMonths.bind(this);\r\n        \r\n    }\r\n\r\n    submitHandlerAddExpense = e => {\r\n        e.preventDefault();\r\n\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n\r\n        axios.post(api + \"/expense/addRow\",{\r\n            expense: e.target[0].value,\r\n            budget: e.target[1].value,\r\n            userName: username\r\n        }).then(response => {\r\n            \r\n            const newId = response.data;\r\n            const newExpense = e.target[0].value;\r\n            const newBudget = parseFloat(e.target[1].value);\r\n            \r\n            console.log(\"Expense: \" + e.target[0].value + \"\\n\" + \"Budget: \" + e.target[1].value + \"\\n\" + \"Assigned ID: \" + response.data)\r\n            const newExpenseObject = {\r\n                id: newId,\r\n                expense: newExpense,\r\n                budget: newBudget,\r\n                spent: 0.0,\r\n                remaining: newBudget,\r\n                userName: username\r\n            }\r\n            \r\n            this.setState({\r\n                expenses: [...this.state.expenses, newExpenseObject]\r\n            }, function() {\r\n                let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n                updatedMap.set(newExpenseObject.id, 0.0);\r\n                this.setState({spentValsForAllExpenses: updatedMap});\r\n                e.target[0].value = null;\r\n                e.target[1].value = null;\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })  \r\n        //window.location.reload(); \r\n    }\r\n\r\n    submitHandlerAddTransaction = e => {\r\n        e.preventDefault();\r\n\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        const today = Moment(new Date()).format('YYYY-MM-DD');\r\n        console.log('test', Moment(today).format('YYYY-MM-DD'));\r\n        // const todayYear = today.getFullYear()\r\n        // const todayMonth = today.getMonth()+1\r\n        // const todayDay = today.getDate()\r\n        \r\n        let expenseSpent;\r\n        let nameOfExpense; \r\n        this.state.expenses.filter((element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                nameOfExpense = element.expense;\r\n                expenseSpent = element.spent;\r\n            }\r\n        })\r\n\r\n        axios.post(api + \"/transaction/addRow\",{\r\n            expenseID: this.state.transactionDropDownSelection,\r\n            payee: e.target[1].value,\r\n            spent: parseFloat(e.target[2].value),\r\n            expenseValue: nameOfExpense, \r\n            transactionDate: today,\r\n            userName: username\r\n        }).then(response => {\r\n            console.log(response)\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        const updateData = {\r\n            spent: expenseSpent + parseFloat(e.target[2].value)\r\n        }\r\n\r\n        axios.patch(api + '/expense/editSpent/' + this.state.transactionDropDownSelection, updateData)\r\n        \r\n        let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n        let targetID;\r\n        this.state.expenses.map((expense) => {\r\n            console.log(\"dropdownselection\",this.state.transactionDropDownSelection)\r\n            if (expense.id === this.state.transactionDropDownSelection) {\r\n                targetID = expense.id;\r\n                console.log(\"targetID\",targetID)\r\n            }\r\n        })\r\n\r\n        this.state.expenses.map((expense) => {\r\n            if (expense.id === targetID) {\r\n                console.log(\"in here\");\r\n                updatedMap.set(expense.id, updatedMap.get(expense.id) + parseFloat(e.target[2].value))\r\n                console.log(updatedMap.get(expense.id));\r\n            }\r\n        })\r\n\r\n        const updatedExpenses = this.state.expenses.filter( (element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                element.spent = expenseSpent + parseFloat(e.target[2].value)\r\n                return element;\r\n            }\r\n            else {\r\n                return element;\r\n            }\r\n        })\r\n\r\n        this.setState({expenses: updatedExpenses, spentValsForAllExpenses: updatedMap})\r\n        e.target[1].value = null;\r\n        e.target[2].value = null;\r\n    }\r\n\r\n    handleConfirmDelete(element){\r\n        // Update the document title using the browser API\r\n        element = true;\r\n    }\r\n    submitHandlerDeleteExpense (expenseID) {\r\n        //this.setState({id: e.target.value}) // value = expense id\r\n        console.log(expenseID)\r\n        \r\n        //if (this.state.deleteConfirmVal) {\r\n            axios.delete(api + '/expense/deleteRow/' + expenseID)\r\n            .then(response => {\r\n                const idOfDeletedExpense = response.data;\r\n                const updatedExpenses = this.state.expenses.filter((expense) => {\r\n                    if (expense.id !== idOfDeletedExpense) {\r\n                        return expense; // fix syntax\r\n                    }\r\n                });\r\n                this.setState({expenses: updatedExpenses});\r\n                console.log(response)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            }) \r\n\r\n            axios.delete(api + '/transaction/deleteExpenseTransactions/' + expenseID)\r\n            .then(response => {\r\n                const idOfExpense = response.data;\r\n                const updatedTransactions = this.state.selectedTransactions.filter((transaction) => {\r\n                    if (transaction.expenseID !== idOfExpense) {\r\n                        return transaction; // fix syntax\r\n                    }\r\n                });\r\n                this.setState({selectedTransactions: updatedTransactions});\r\n                console.log(response)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            }) \r\n            //window.location.reload();  \r\n        //}\r\n    }\r\n\r\n    submitHandlerEditExpense (e) {\r\n        e.preventDefault();\r\n        //console.log(e);\r\n\r\n        const data = {\r\n            expense: e.target[1].value,\r\n            budget: parseFloat(e.target[2].value)\r\n        }\r\n        axios.patch(api + '/expense/editRow/' + this.state.editDropDownSelection, data)\r\n        .then(response => {\r\n            console.log(response)\r\n            const idOfEditedExpense = response.data;\r\n            const updatedExpenses = this.state.expenses.filter((element) => {\r\n                if (element.id !== idOfEditedExpense) {\r\n                    return element;\r\n                }\r\n                else{\r\n                    element.expense = e.target[1].value;\r\n                    element.budget = parseFloat(e.target[2].value);\r\n                    return element;\r\n                }\r\n                \r\n            })\r\n            this.setState({expenses: updatedExpenses, oldExpenseName: data.expense});\r\n            \r\n            e.target[1].value = null;\r\n            e.target[2].value = null;\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    initEditDropDown() {\r\n        let firstElementInExpenses;\r\n        if (this.state.expenses.length !== 0) {\r\n            firstElementInExpenses= this.state.expenses[0].expense;\r\n\r\n            let lowestIndexExpense = -1;\r\n            {this.state.expenses.map((element) => {\r\n                if (lowestIndexExpense === -1) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n                else {\r\n                    if (element.id < lowestIndexExpense) {\r\n                        lowestIndexExpense = element.id;\r\n                    }\r\n                }\r\n            })}\r\n            \r\n            let elementWithSmallestIndex = \"\";\r\n            {this.state.expenses.map((element) => {\r\n                if (element.id === lowestIndexExpense) {\r\n                    elementWithSmallestIndex = element.id;\r\n                }\r\n            })}\r\n    \r\n            this.setState({editDropDownSelection: elementWithSmallestIndex}, function() {\r\n                {this.state.expenses.map((expense) => {\r\n                    if (expense.id === elementWithSmallestIndex) {\r\n                        \r\n                        this.setState({oldExpenseName: firstElementInExpenses})\r\n                        console.log(elementWithSmallestIndex, this.state.oldExpenseName)\r\n                    }\r\n                })}\r\n            });\r\n        }\r\n        else {\r\n            this.setState({oldExpenseName: \"No Expenses to Change\"});\r\n        }  \r\n    }\r\n\r\n    secondaryInitEdit() {\r\n        if (this.state.oldExpenseName === \"No Expenses to Change\") {\r\n            if (this.state.expenses.length !== 0) {\r\n                this.setState({oldExpenseName: this.state.expenses[0].expense});\r\n            }\r\n        }\r\n        else if (this.state.expenses.length === 0) {\r\n            this.setState({oldExpenseName: \"No Expenses to Change\"});\r\n        }\r\n    }\r\n\r\n    handleEditDropDownChange(e) {\r\n        //console.log(e);\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ editDropDownSelection: selectedElement }, function() {\r\n            {this.state.expenses.map((expense) => {\r\n                if (expense.id === selectedElement) {\r\n                    this.setState({oldExpenseName: expense.expense})\r\n                    console.log(selectedElement, this.state.oldExpenseName )\r\n                }\r\n            })}\r\n        });\r\n    }\r\n\r\n    initTransactionDropDown() {\r\n        let lowestIndexExpense = -1;\r\n        {this.state.expenses.map((element) => {\r\n            if (lowestIndexExpense === -1) {\r\n                lowestIndexExpense = element.id;\r\n            }\r\n            else {\r\n                if (element.id < lowestIndexExpense) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n            }\r\n        })}\r\n        \r\n        let elementWithSmallestIndex = \"\";\r\n        {this.state.expenses.map((element) => {\r\n            if (element.id === lowestIndexExpense) {\r\n                elementWithSmallestIndex = element.id;\r\n            }\r\n        })}\r\n\r\n        this.setState({transactionDropDownSelection: elementWithSmallestIndex});\r\n    }\r\n\r\n    handleTransactionDropDownChange(e) {\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ transactionDropDownSelection: selectedElement });\r\n    }\r\n    handleSelectedMonthDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No month selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            {this.state.listOfMonths.map((element) => {\r\n                if (element.monthNum === parseInt(e.target.value)) {\r\n                    selectedElement = element.monthNum;\r\n                }\r\n            })}\r\n            this.setState({selectedMonth: selectedElement}, function () {\r\n\r\n                //check to see if user on current date\r\n                if (parseInt(this.state.selectedYear) === this.state.today.getFullYear() && this.state.selectedMonth === this.state.today.getMonth()+1) {\r\n                    this.setState({userOnCurrentDate: true});\r\n                }\r\n                else {\r\n                    this.setState({userOnCurrentDate: false});\r\n                }\r\n\r\n                axios.get(api + \"/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(\"newTransactionDate(MonthChange): \", res.data);\r\n                    \r\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedMap.set(expense.id, 0.0);\r\n                    })\r\n                    \r\n                    this.setState({selectedTransactions: res.data, spentValsForAllExpenses: updatedMap}, function(){\r\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\r\n                        \r\n                        this.state.selectedTransactions.map((transaction) => {\r\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID)\r\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                \r\n                        })\r\n                        this.setState({spentValsForAllExpenses: changingSpentMap})\r\n                    })\r\n                })\r\n            });\r\n        }\r\n    }\r\n    handleSelectedYearDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No Year selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            selectedElement = e.target.value;\r\n            \r\n            this.setState({selectedYear: selectedElement}, function () {\r\n                \r\n                //check to see if user on current date\r\n                if (parseInt(this.state.selectedYear) === this.state.today.getFullYear() && this.state.selectedMonth === this.state.today.getMonth()+1) {\r\n                    this.setState({userOnCurrentDate: true});\r\n                }\r\n                else {\r\n                    this.setState({userOnCurrentDate: false});\r\n                }\r\n\r\n                axios.get(api + \"/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(\"newTransactionDate(YearChange): \" ,res.data);\r\n\r\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n                                       \r\n                    this.state.expenses.map((expense) => {\r\n                        updatedMap.set(expense.id, 0.0);\r\n                    })\r\n                    \r\n        \r\n                    this.setState({selectedTransactions: res.data, spentValsForAllExpenses: updatedMap}, function() {\r\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\r\n                        \r\n                        this.state.selectedTransactions.map((transaction) => {\r\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID)\r\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                \r\n                        })\r\n                        this.setState({spentValsForAllExpenses: changingSpentMap})\r\n                    });\r\n                    \r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleAddExpenseModal() {\r\n        this.setState({addExpenseToggle : !this.state.addExpenseToggle});\r\n    }\r\n    toggleAddTransactionModal() {\r\n        this.setState({addTransactionToggle: !this.state.addTransactionToggle});\r\n    }\r\n    toggleDeleteExpenseModal() {\r\n        this.setState({deleteExpenseToggle : !this.state.deleteExpenseToggle});\r\n    }\r\n    toggleEditExpenseModal() {\r\n        this.setState({editExpenseToggle: !this.state.editExpenseToggle});\r\n    }\r\n\r\n    renderTableData() {\r\n\r\n        let sumOfBudget = 0;\r\n        let sumOfSpent = 0;\r\n\r\n        return (<>\r\n            {this.state.expenses.map((element) => {\r\n            \r\n                const amountSpent = parseFloat(this.state.spentValsForAllExpenses.get(element.id));\r\n                sumOfBudget += element.budget;\r\n                sumOfSpent += amountSpent;\r\n                //console.log(amountSpent);\r\n                return (\r\n                    <tr>\r\n                        <td>{element.expense}</td>\r\n                        <td>${(element.budget).toFixed(2)}</td>\r\n                        <td>${(amountSpent).toFixed(2)}</td>\r\n                        <td id={(sumOfBudget-sumOfSpent) > 0 ? \"remainingPos2\":\"remainingNeg2\"}>${(element.budget-amountSpent).toFixed(2)}</td>\r\n                        {/* <td><button name=\"deleteButton\" id='trashCan' value={element.id} onClick={(e) => {this.submitHandlerDeleteExpense(e);this.toggleDeleteExpenseModal()}}><IconContext.Provider value={{ style: {   fontSize: '25px', color: \"crimson\"}}}><FaTrashAlt onClick={(e) => {this.submitHandlerDeleteExpense(e);this.toggleDeleteExpenseModal()}}/></IconContext.Provider></button></td> */}\r\n                        <td><button id='trashCan'><Trash color=\"crimson\" size={35} onClick={(e) => {this.submitHandlerDeleteExpense(element.id);this.toggleDeleteExpenseModal()}}/></button></td>\r\n                    </tr>\r\n                )\r\n\r\n            })}\r\n            <tr>\r\n                <td className='bold'>TOTAL : </td>\r\n                <td className='bold'>${sumOfBudget.toFixed(2)}</td>\r\n                <td className='bold'>${sumOfSpent.toFixed(2)}</td>\r\n                <td className='bold' id={(sumOfBudget-sumOfSpent) > 0 ? \"remainingPos\":\"remainingNeg\"}>${(sumOfBudget-sumOfSpent).toFixed(2)}</td>\r\n                <td></td>\r\n            </tr>\r\n\r\n        </>)\r\n        \r\n    }\r\n\r\n    signOut() {\r\n        console.log(\"signed OUt\")\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        localStorage.setItem(\"auth\", false);\r\n\r\n\r\n        const history = createBrowserHistory();\r\n        history.push('/');   //changes address and bottom code changes the rendering\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Login />\r\n        </>)\r\n    }\r\n    signOutsetState() {\r\n        this.setState({showLogin: true, showHome: false, showTransactions: false});\r\n    }\r\n\r\n    renderHome() {\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n\r\n        if (localStorage.getItem(\"auth\") === \"authenticated\") {\r\n        \r\n            return (\r\n                \r\n                <div className='App-header'>\r\n                    \r\n                    <h1 id='myLogo'>TrackerX</h1>\r\n                    <div id='credentials'>\r\n                        <p id=\"signedInUser\">{\"Signed In User: \" + username}</p>\r\n                        <div id=\"signOut-button\" ><button  onClick={() => {this.signOutsetState()}}>Sign Out</button></div>\r\n                        \r\n                    </div>\r\n                    {/* <div id='home-title'>\r\n                                <img id='myLogo'src={myLogo}/>\r\n                    </div> */}\r\n                \r\n                    <div id=\"navContainer\">\r\n                        <div className='navButtons'>\r\n                            <button disabled={this.state.userOnCurrentDate ? false : true} className='button-25' onClick={this.toggleAddExpenseModal}>Add Expense</button>\r\n                            <button disabled={this.state.userOnCurrentDate ? false : true} className='button-25' onClick={ () => {this.toggleAddTransactionModal();this.initTransactionDropDown();}}>Add Transaction</button>\r\n                            <button disabled={this.state.userOnCurrentDate ? false : true} className='button-25' onClick={ () => {this.toggleEditExpenseModal();this.secondaryInitEdit(); console.log(\"list length\",this.state.expenses.length)}}>Edit Expense</button>\r\n                            <button className='button-25' id='trans-button' onClick={() => {this.setState({showHome: false, showTransactions:true})}}>Show Transactions</button>\r\n                        </div>\r\n                    </div>\r\n                    <div id='homeContent'>\r\n                        \r\n                        {/* <div>\r\n                            <h1 className=\"mainTitle\">My Budget</h1>\r\n                        </div> */}\r\n                        {/* <div id=\"signedInUser\">{\"Signed In User: \" + username}</div> */}\r\n\r\n                        <AddExpenseForm  handleClose={this.toggleAddExpenseModal} show={this.state.addExpenseToggle} submitHandler={this.submitHandlerAddExpense}/>\r\n                        <EditExpenseForm myList={this.state.expenses} handleClose={this.toggleEditExpenseModal} handleChange={this.handleEditDropDownChange} show={this.state.editExpenseToggle} submitHandler={this.submitHandlerEditExpense} oldExpenseName={this.state.oldExpenseName}/>\r\n                        <AddTransactionForm  myList={this.state.expenses} handleClose={this.toggleAddTransactionModal} show={this.state.addTransactionToggle} submitHandler={this.submitHandlerAddTransaction} handleChange={this.handleTransactionDropDownChange}/>\r\n                        \r\n                        <div className=\"dropdown-flex\" id=\"dateDropDown\">\r\n                            <select id='selectColor' value={this.state.selectedMonth} onChange={this.handleSelectedMonthDropDownChange}>\r\n                                <option disabled value=\"-1\">--Month--</option>\r\n                                {\r\n                                this.state.listOfMonths.map((element) => (\r\n                                    <option value={element.monthNum}>{element.month}</option>\r\n                                ))}\r\n                            </select>\r\n                            <select id='selectColor' onChange={this.handleSelectedYearDropDownChange}>\r\n                                <option disabled value=\"-1\">--Year--</option>\r\n                                <option value={this.state.today.getFullYear()-4}>{this.state.today.getFullYear()-4}</option>\r\n                                <option value={this.state.today.getFullYear()-3}>{this.state.today.getFullYear()-3}</option>\r\n                                <option value={this.state.today.getFullYear()-2}>{this.state.today.getFullYear()-2}</option>\r\n                                <option value={this.state.today.getFullYear()-1}>{this.state.today.getFullYear()-1}</option>\r\n                                <option selected value={this.state.today.getFullYear()}>{this.state.today.getFullYear()}</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <table className=\"expense-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Expense</th>\r\n                                    <th>Budget</th>\r\n                                    <th>Spent</th>\r\n                                    <th>Remaining</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.renderTableData()}\r\n                            </tbody>\r\n                        </table>\r\n                    \r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            \r\n            return (<>\r\n                {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n                <div><h2>You need to sign in to access this page.</h2></div>\r\n                <div className=\"buttons-flex\"><button id=\"signIn-button\" onClick={() => this.signOutsetState()}>Sign in</button></div>\r\n                \r\n            </>)\r\n        }\r\n    }\r\n\r\n    renderTransactions() {\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        const history = createBrowserHistory();\r\n        history.push('/transactionsTable/' + username);   //changes address and bottom code changes the rendering\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Transactions />\r\n        </>)\r\n    }\r\n\r\n    componentDidMount() {\r\n        \r\n        axios.get(api + \"/expense/allExpenses\")  // gets all expenses from mysql\r\n        .then(res => {\r\n\r\n            console.log(\"auth\",localStorage.getItem(\"auth\"))\r\n\r\n            const pathName = window.location.pathname;\r\n            const username = pathName.split('/')[2];\r\n\r\n            let userExpenses = (res.data).filter((expense) => {\r\n                if (expense.userName === username) {\r\n                    return expense;\r\n                }\r\n            })\r\n\r\n            // const expenses = res.data;\r\n            // console.log('axios expenses: ', expenses);\r\n            this.setState({expenses: userExpenses});\r\n\r\n            const today = new Date();\r\n            this.setState({selectedMonth: today.getMonth()+1, selectedYear: today.getFullYear()}, function () { //gets transactions for current month and year\r\n                axios.get(api + \"/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n\r\n                    let userTransactions = (res.data).filter((transaction) => {\r\n                        if (transaction.userName === username) {\r\n                            return transaction;\r\n                        }\r\n                    })\r\n                    this.setState({selectedTransactions: userTransactions}, function() {\r\n                        console.log(this.state.selectedTransactions)\r\n                    });\r\n\r\n                    \r\n                    let updatedSpentValsForAllExpenses = new Map(); // rename to better name\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedSpentValsForAllExpenses.set(expense.id, 0.0);\r\n            \r\n                    });\r\n            \r\n                    this.setState({spentValsForAllExpenses: updatedSpentValsForAllExpenses});\r\n\r\n                    this.state.selectedTransactions.map((transaction) => {\r\n                        let tempMap = new Map(this.state.spentValsForAllExpenses);\r\n                        const expenseSpentVal = tempMap.get(transaction.expenseID)\r\n                        tempMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                        this.setState({spentValsForAllExpenses: tempMap})\r\n                    })\r\n\r\n                \r\n                    // let newMap = new Map(myHashMap);\r\n                    // console.log('newMap', newMap);\r\n\r\n                    // newMap.filter((expenseId){\r\n                    //     if (expenseId === transactions.expenseId)\r\n                    //     {\r\n                    //        newMap.set(expenseId, newMap.get(expenseId) + transaction.spentVal) \r\n                    //     }\r\n                    // });\r\n                    console.log(\"edit Selection\", this.state.editDropDownSelection);\r\n                    this.initEditDropDown();\r\n                    console.log(\"changed edit selection\", this.state.editDropDownSelection);\r\n                })\r\n            });\r\n    \r\n            \r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        return (<>\r\n            <div>\r\n                {this.state.showHome && this.renderHome()}\r\n                {this.state.showTransactions && this.renderTransactions()}\r\n                {this.state.showLogin && this.signOut()}\r\n                \r\n                \r\n            </div>\r\n            \r\n        </>)\r\n    }\r\n}","import './App.css';\r\nimport Home from './Home';\r\nimport React from 'react';\r\nimport {BrowserRouter, Routes, Route} from \"react-router-dom\";\r\nimport Transactions from './Transactions';\r\nimport Register from './Register';\r\nimport Login from './Login'\r\n\r\nexport default class App extends React.Component {\r\n  state = {\r\n    \r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <Routes>\r\n              <Route exact path=\"/home/:username\" element={<Home auth={false} />}/>\r\n              <Route exact path=\"/transactionsTable/:username\" element={<Transactions/>}/>\r\n              <Route exact path=\"/registerPage\" element={<Register/>}/>\r\n              <Route exact path=\"/\" element={<Login/>}/>\r\n            </Routes>\r\n          </BrowserRouter>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}