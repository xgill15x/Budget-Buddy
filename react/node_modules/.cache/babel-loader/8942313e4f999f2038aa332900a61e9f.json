{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toComputedKey = toComputedKey;\nexports.ensureBlock = ensureBlock;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\n\nvar _t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nconst {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super: _super,\n  thisExpression,\n  unaryExpression\n} = _t;\n\nfunction toComputedKey() {\n  let key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements = [];\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression({\n  allowInsertArrow = true,\n  specCompliant = false,\n  noNewArrows = !specCompliant\n} = {}) {\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  const thisBinding = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  this.ensureBlock();\n  this.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : this.parentPath.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      this.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([])\n      });\n    }\n\n    this.get(\"body\").unshiftContainer(\"body\", expressionStatement(callExpression(this.hub.addHelper(\"newArrowCheck\"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));\n    this.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || this.node, identifier(\"bind\")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {\n  const thisEnvFn = fnPath.findParent(p => {\n    return p.isFunction() && !p.isArrowFunctionExpression() || p.isProgram() || p.isClassProperty({\n      static: false\n    });\n  });\n  const inConstructor = (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) === \"constructor\";\n\n  if (thisEnvFn.isClassProperty()) {\n    throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n  }\n\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    const allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => identifier(\"arguments\");\n\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(binaryExpression(\"===\", unaryExpression(\"typeof\", args()), stringLiteral(\"undefined\")), thisEnvFn.scope.buildUndefinedNode(), args());\n      } else {\n        return args();\n      }\n    });\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () => metaProperty(identifier(\"new\"), identifier(\"target\")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      const isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        const value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      const call = callExpression(identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  let thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return thisBinding;\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    const parts = [assignmentExpression(\"=\", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression(\"=\", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(\"+\", identifier(tmp.name), numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(sequenceExpression(parts));\n    const left = updateExpr.get(\"expressions.0.right\");\n    const right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n    const supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, assignmentExpression(\"=\", identifier(thisBinding), identifier(\"this\"))]);\n      }\n\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n    let fnBody;\n\n    if (propName) {\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = memberExpression(_super(), identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = assignmentExpression(\"=\", fnBody, identifier(valueIdent.name));\n    }\n\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = \"binding:\" + key;\n  let data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse({\n    ClassProperty(child) {\n      child.skip();\n    },\n\n    Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n\n    ThisExpression(child) {\n      thisPaths.push(child);\n    },\n\n    JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n\n    CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n\n    MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n\n    ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      let curr = child.scope;\n\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while (curr = curr.parent);\n\n      argumentsPaths.push(child);\n    },\n\n    MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}","map":{"version":3,"sources":["C:/Users/jason/OneDrive/desktop/BudgetTracker/react/node_modules/@babel/traverse/lib/path/conversion.js"],"names":["Object","defineProperty","exports","value","toComputedKey","ensureBlock","arrowFunctionToShadowed","unwrapFunctionEnvironment","arrowFunctionToExpression","_t","require","_helperFunctionName","arrowFunctionExpression","assignmentExpression","binaryExpression","blockStatement","callExpression","conditionalExpression","expressionStatement","identifier","isIdentifier","jsxIdentifier","memberExpression","metaProperty","numericLiteral","objectExpression","restElement","returnStatement","sequenceExpression","spreadElement","stringLiteral","super","_super","thisExpression","unaryExpression","key","isMemberExpression","node","property","isProperty","isMethod","ReferenceError","computed","name","body","get","bodyNode","Array","isArray","Error","isBlockStatement","statements","stringPath","listKey","isStatement","push","isFunction","parentPath","setup","isArrowFunctionExpression","isFunctionExpression","isFunctionDeclaration","buildCodeFrameError","hoistFunctionEnvironment","allowInsertArrow","specCompliant","noNewArrows","thisBinding","type","checkBinding","scope","generateUidIdentifier","id","init","unshiftContainer","hub","addHelper","replaceWith","default","fnPath","thisEnvFn","findParent","p","isProgram","isClassProperty","static","inConstructor","kind","thisPaths","argumentsPaths","newTargetPaths","superProps","superCalls","getScopeInformation","length","allSuperCalls","traverse","Function","child","skip","ClassProperty","CallExpression","isSuper","superBinding","getSuperBinding","forEach","superCall","callee","loc","argumentsBinding","getBinding","args","path","buildUndefinedNode","argumentsChild","argsRef","newTargetBinding","targetChild","targetRef","flatSuperProps","reduce","acc","superProp","concat","standardizeSuperProperty","isAssignment","isAssignmentExpression","left","isCall","isCallExpression","getSuperPropBinding","right","call","getThisBinding","hasSuperClass","thisChild","thisRef","isJSX","operator","assignmentPath","op","slice","tmp","generateDeclaredUidIdentifier","object","isUpdateExpression","updateExpr","computedKey","parts","prefix","isClassMethod","superClass","supers","WeakSet","has","add","replaceWithMultiple","argsBinding","propName","argsList","fnBody","method","unshift","valueIdent","cacheKey","data","getData","setData","ThisExpression","JSXIdentifier","isJSXMemberExpression","isJSXOpeningElement","MemberExpression","ReferencedIdentifier","curr","hasOwnBinding","rename","parent","MetaProperty"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toComputedKey = toComputedKey;\nexports.ensureBlock = ensureBlock;\nexports.arrowFunctionToShadowed = arrowFunctionToShadowed;\nexports.unwrapFunctionEnvironment = unwrapFunctionEnvironment;\nexports.arrowFunctionToExpression = arrowFunctionToExpression;\n\nvar _t = require(\"@babel/types\");\n\nvar _helperFunctionName = require(\"@babel/helper-function-name\");\n\nconst {\n  arrowFunctionExpression,\n  assignmentExpression,\n  binaryExpression,\n  blockStatement,\n  callExpression,\n  conditionalExpression,\n  expressionStatement,\n  identifier,\n  isIdentifier,\n  jsxIdentifier,\n  memberExpression,\n  metaProperty,\n  numericLiteral,\n  objectExpression,\n  restElement,\n  returnStatement,\n  sequenceExpression,\n  spreadElement,\n  stringLiteral,\n  super: _super,\n  thisExpression,\n  unaryExpression\n} = _t;\n\nfunction toComputedKey() {\n  let key;\n\n  if (this.isMemberExpression()) {\n    key = this.node.property;\n  } else if (this.isProperty() || this.isMethod()) {\n    key = this.node.key;\n  } else {\n    throw new ReferenceError(\"todo\");\n  }\n\n  if (!this.node.computed) {\n    if (isIdentifier(key)) key = stringLiteral(key.name);\n  }\n\n  return key;\n}\n\nfunction ensureBlock() {\n  const body = this.get(\"body\");\n  const bodyNode = body.node;\n\n  if (Array.isArray(body)) {\n    throw new Error(\"Can't convert array path to a block statement\");\n  }\n\n  if (!bodyNode) {\n    throw new Error(\"Can't convert node without a body\");\n  }\n\n  if (body.isBlockStatement()) {\n    return bodyNode;\n  }\n\n  const statements = [];\n  let stringPath = \"body\";\n  let key;\n  let listKey;\n\n  if (body.isStatement()) {\n    listKey = \"body\";\n    key = 0;\n    statements.push(body.node);\n  } else {\n    stringPath += \".body.0\";\n\n    if (this.isFunction()) {\n      key = \"argument\";\n      statements.push(returnStatement(body.node));\n    } else {\n      key = \"expression\";\n      statements.push(expressionStatement(body.node));\n    }\n  }\n\n  this.node.body = blockStatement(statements);\n  const parentPath = this.get(stringPath);\n  body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key);\n  return this.node;\n}\n\nfunction arrowFunctionToShadowed() {\n  if (!this.isArrowFunctionExpression()) return;\n  this.arrowFunctionToExpression();\n}\n\nfunction unwrapFunctionEnvironment() {\n  if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration()) {\n    throw this.buildCodeFrameError(\"Can only unwrap the environment of a function.\");\n  }\n\n  hoistFunctionEnvironment(this);\n}\n\nfunction arrowFunctionToExpression({\n  allowInsertArrow = true,\n  specCompliant = false,\n  noNewArrows = !specCompliant\n} = {}) {\n  if (!this.isArrowFunctionExpression()) {\n    throw this.buildCodeFrameError(\"Cannot convert non-arrow function to a function expression.\");\n  }\n\n  const thisBinding = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);\n  this.ensureBlock();\n  this.node.type = \"FunctionExpression\";\n\n  if (!noNewArrows) {\n    const checkBinding = thisBinding ? null : this.parentPath.scope.generateUidIdentifier(\"arrowCheckId\");\n\n    if (checkBinding) {\n      this.parentPath.scope.push({\n        id: checkBinding,\n        init: objectExpression([])\n      });\n    }\n\n    this.get(\"body\").unshiftContainer(\"body\", expressionStatement(callExpression(this.hub.addHelper(\"newArrowCheck\"), [thisExpression(), checkBinding ? identifier(checkBinding.name) : identifier(thisBinding)])));\n    this.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || this.node, identifier(\"bind\")), [checkBinding ? identifier(checkBinding.name) : thisExpression()]));\n  }\n}\n\nfunction hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {\n  const thisEnvFn = fnPath.findParent(p => {\n    return p.isFunction() && !p.isArrowFunctionExpression() || p.isProgram() || p.isClassProperty({\n      static: false\n    });\n  });\n  const inConstructor = (thisEnvFn == null ? void 0 : thisEnvFn.node.kind) === \"constructor\";\n\n  if (thisEnvFn.isClassProperty()) {\n    throw fnPath.buildCodeFrameError(\"Unable to transform arrow inside class property\");\n  }\n\n  const {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  } = getScopeInformation(fnPath);\n\n  if (inConstructor && superCalls.length > 0) {\n    if (!allowInsertArrow) {\n      throw superCalls[0].buildCodeFrameError(\"Unable to handle nested super() usage in arrow\");\n    }\n\n    const allSuperCalls = [];\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        allSuperCalls.push(child);\n      }\n\n    });\n    const superBinding = getSuperBinding(thisEnvFn);\n    allSuperCalls.forEach(superCall => {\n      const callee = identifier(superBinding);\n      callee.loc = superCall.node.callee.loc;\n      superCall.get(\"callee\").replaceWith(callee);\n    });\n  }\n\n  if (argumentsPaths.length > 0) {\n    const argumentsBinding = getBinding(thisEnvFn, \"arguments\", () => {\n      const args = () => identifier(\"arguments\");\n\n      if (thisEnvFn.scope.path.isProgram()) {\n        return conditionalExpression(binaryExpression(\"===\", unaryExpression(\"typeof\", args()), stringLiteral(\"undefined\")), thisEnvFn.scope.buildUndefinedNode(), args());\n      } else {\n        return args();\n      }\n    });\n    argumentsPaths.forEach(argumentsChild => {\n      const argsRef = identifier(argumentsBinding);\n      argsRef.loc = argumentsChild.node.loc;\n      argumentsChild.replaceWith(argsRef);\n    });\n  }\n\n  if (newTargetPaths.length > 0) {\n    const newTargetBinding = getBinding(thisEnvFn, \"newtarget\", () => metaProperty(identifier(\"new\"), identifier(\"target\")));\n    newTargetPaths.forEach(targetChild => {\n      const targetRef = identifier(newTargetBinding);\n      targetRef.loc = targetChild.node.loc;\n      targetChild.replaceWith(targetRef);\n    });\n  }\n\n  if (superProps.length > 0) {\n    if (!allowInsertArrow) {\n      throw superProps[0].buildCodeFrameError(\"Unable to handle nested super.prop usage\");\n    }\n\n    const flatSuperProps = superProps.reduce((acc, superProp) => acc.concat(standardizeSuperProperty(superProp)), []);\n    flatSuperProps.forEach(superProp => {\n      const key = superProp.node.computed ? \"\" : superProp.get(\"property\").node.name;\n      const isAssignment = superProp.parentPath.isAssignmentExpression({\n        left: superProp.node\n      });\n      const isCall = superProp.parentPath.isCallExpression({\n        callee: superProp.node\n      });\n      const superBinding = getSuperPropBinding(thisEnvFn, isAssignment, key);\n      const args = [];\n\n      if (superProp.node.computed) {\n        args.push(superProp.get(\"property\").node);\n      }\n\n      if (isAssignment) {\n        const value = superProp.parentPath.node.right;\n        args.push(value);\n      }\n\n      const call = callExpression(identifier(superBinding), args);\n\n      if (isCall) {\n        superProp.parentPath.unshiftContainer(\"arguments\", thisExpression());\n        superProp.replaceWith(memberExpression(call, identifier(\"call\")));\n        thisPaths.push(superProp.parentPath.get(\"arguments.0\"));\n      } else if (isAssignment) {\n        superProp.parentPath.replaceWith(call);\n      } else {\n        superProp.replaceWith(call);\n      }\n    });\n  }\n\n  let thisBinding;\n\n  if (thisPaths.length > 0 || !noNewArrows) {\n    thisBinding = getThisBinding(thisEnvFn, inConstructor);\n\n    if (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) {\n      thisPaths.forEach(thisChild => {\n        const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);\n        thisRef.loc = thisChild.node.loc;\n        thisChild.replaceWith(thisRef);\n      });\n      if (!noNewArrows) thisBinding = null;\n    }\n  }\n\n  return thisBinding;\n}\n\nfunction standardizeSuperProperty(superProp) {\n  if (superProp.parentPath.isAssignmentExpression() && superProp.parentPath.node.operator !== \"=\") {\n    const assignmentPath = superProp.parentPath;\n    const op = assignmentPath.node.operator.slice(0, -1);\n    const value = assignmentPath.node.right;\n    assignmentPath.node.operator = \"=\";\n\n    if (superProp.node.computed) {\n      const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, assignmentExpression(\"=\", tmp, superProp.node.property), true));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(tmp.name), true), value));\n    } else {\n      assignmentPath.get(\"left\").replaceWith(memberExpression(superProp.node.object, superProp.node.property));\n      assignmentPath.get(\"right\").replaceWith(binaryExpression(op, memberExpression(superProp.node.object, identifier(superProp.node.property.name)), value));\n    }\n\n    return [assignmentPath.get(\"left\"), assignmentPath.get(\"right\").get(\"left\")];\n  } else if (superProp.parentPath.isUpdateExpression()) {\n    const updateExpr = superProp.parentPath;\n    const tmp = superProp.scope.generateDeclaredUidIdentifier(\"tmp\");\n    const computedKey = superProp.node.computed ? superProp.scope.generateDeclaredUidIdentifier(\"prop\") : null;\n    const parts = [assignmentExpression(\"=\", tmp, memberExpression(superProp.node.object, computedKey ? assignmentExpression(\"=\", computedKey, superProp.node.property) : superProp.node.property, superProp.node.computed)), assignmentExpression(\"=\", memberExpression(superProp.node.object, computedKey ? identifier(computedKey.name) : superProp.node.property, superProp.node.computed), binaryExpression(\"+\", identifier(tmp.name), numericLiteral(1)))];\n\n    if (!superProp.parentPath.node.prefix) {\n      parts.push(identifier(tmp.name));\n    }\n\n    updateExpr.replaceWith(sequenceExpression(parts));\n    const left = updateExpr.get(\"expressions.0.right\");\n    const right = updateExpr.get(\"expressions.1.left\");\n    return [left, right];\n  }\n\n  return [superProp];\n}\n\nfunction hasSuperClass(thisEnvFn) {\n  return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;\n}\n\nfunction getThisBinding(thisEnvFn, inConstructor) {\n  return getBinding(thisEnvFn, \"this\", thisBinding => {\n    if (!inConstructor || !hasSuperClass(thisEnvFn)) return thisExpression();\n    const supers = new WeakSet();\n    thisEnvFn.traverse({\n      Function(child) {\n        if (child.isArrowFunctionExpression()) return;\n        child.skip();\n      },\n\n      ClassProperty(child) {\n        child.skip();\n      },\n\n      CallExpression(child) {\n        if (!child.get(\"callee\").isSuper()) return;\n        if (supers.has(child.node)) return;\n        supers.add(child.node);\n        child.replaceWithMultiple([child.node, assignmentExpression(\"=\", identifier(thisBinding), identifier(\"this\"))]);\n      }\n\n    });\n  });\n}\n\nfunction getSuperBinding(thisEnvFn) {\n  return getBinding(thisEnvFn, \"supercall\", () => {\n    const argsBinding = thisEnvFn.scope.generateUidIdentifier(\"args\");\n    return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));\n  });\n}\n\nfunction getSuperPropBinding(thisEnvFn, isAssignment, propName) {\n  const op = isAssignment ? \"set\" : \"get\";\n  return getBinding(thisEnvFn, `superprop_${op}:${propName || \"\"}`, () => {\n    const argsList = [];\n    let fnBody;\n\n    if (propName) {\n      fnBody = memberExpression(_super(), identifier(propName));\n    } else {\n      const method = thisEnvFn.scope.generateUidIdentifier(\"prop\");\n      argsList.unshift(method);\n      fnBody = memberExpression(_super(), identifier(method.name), true);\n    }\n\n    if (isAssignment) {\n      const valueIdent = thisEnvFn.scope.generateUidIdentifier(\"value\");\n      argsList.push(valueIdent);\n      fnBody = assignmentExpression(\"=\", fnBody, identifier(valueIdent.name));\n    }\n\n    return arrowFunctionExpression(argsList, fnBody);\n  });\n}\n\nfunction getBinding(thisEnvFn, key, init) {\n  const cacheKey = \"binding:\" + key;\n  let data = thisEnvFn.getData(cacheKey);\n\n  if (!data) {\n    const id = thisEnvFn.scope.generateUidIdentifier(key);\n    data = id.name;\n    thisEnvFn.setData(cacheKey, data);\n    thisEnvFn.scope.push({\n      id: id,\n      init: init(data)\n    });\n  }\n\n  return data;\n}\n\nfunction getScopeInformation(fnPath) {\n  const thisPaths = [];\n  const argumentsPaths = [];\n  const newTargetPaths = [];\n  const superProps = [];\n  const superCalls = [];\n  fnPath.traverse({\n    ClassProperty(child) {\n      child.skip();\n    },\n\n    Function(child) {\n      if (child.isArrowFunctionExpression()) return;\n      child.skip();\n    },\n\n    ThisExpression(child) {\n      thisPaths.push(child);\n    },\n\n    JSXIdentifier(child) {\n      if (child.node.name !== \"this\") return;\n\n      if (!child.parentPath.isJSXMemberExpression({\n        object: child.node\n      }) && !child.parentPath.isJSXOpeningElement({\n        name: child.node\n      })) {\n        return;\n      }\n\n      thisPaths.push(child);\n    },\n\n    CallExpression(child) {\n      if (child.get(\"callee\").isSuper()) superCalls.push(child);\n    },\n\n    MemberExpression(child) {\n      if (child.get(\"object\").isSuper()) superProps.push(child);\n    },\n\n    ReferencedIdentifier(child) {\n      if (child.node.name !== \"arguments\") return;\n      let curr = child.scope;\n\n      do {\n        if (curr.hasOwnBinding(\"arguments\")) {\n          curr.rename(\"arguments\");\n          return;\n        }\n\n        if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression()) {\n          break;\n        }\n      } while (curr = curr.parent);\n\n      argumentsPaths.push(child);\n    },\n\n    MetaProperty(child) {\n      if (!child.get(\"meta\").isIdentifier({\n        name: \"new\"\n      })) return;\n      if (!child.get(\"property\").isIdentifier({\n        name: \"target\"\n      })) return;\n      newTargetPaths.push(child);\n    }\n\n  });\n  return {\n    thisPaths,\n    argumentsPaths,\n    newTargetPaths,\n    superProps,\n    superCalls\n  };\n}"]},"metadata":{},"sourceType":"script"}