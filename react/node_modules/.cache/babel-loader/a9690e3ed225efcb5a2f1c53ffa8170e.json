{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\desktop\\\\BudgetTracker\\\\react\\\\src\\\\Home.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport AddExpenseForm from './AddExpenseForm';\nimport DeleteExpenseForm from './DeleteExpenseForm';\nimport EditExpenseForm from './EditExpenseForm';\nimport AddTransactionForm from './AddTransactionForm';\nimport Transactions from './Transactions';\nimport NavBar from './NavBar';\nimport { Link } from \"react-router-dom\";\nimport Moment from 'moment';\nimport { createBrowserHistory } from \"history\";\nimport Login from './Login';\nimport { FaTrash } from 'react-icons/fa';\nimport { IconContext } from \"react-icons\";\nimport myLogo from './TrackerExLogoblue.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandlerAddExpense = e => {\n      e.preventDefault();\n      const pathName = window.location.pathname;\n      const username = pathName.split('/')[2];\n      axios.post(\"http://localhost:8080/expense/addRow\", {\n        expense: e.target[0].value,\n        budget: e.target[1].value,\n        userName: username\n      }).then(response => {\n        const newId = response.data;\n        const newExpense = e.target[0].value;\n        const newBudget = parseFloat(e.target[1].value);\n        console.log(\"Expense: \" + e.target[0].value + \"\\n\" + \"Budget: \" + e.target[1].value + \"\\n\" + \"Assigned ID: \" + response.data);\n        const newExpenseObject = {\n          id: newId,\n          expense: newExpense,\n          budget: newBudget,\n          spent: 0.0,\n          remaining: newBudget,\n          userName: username\n        };\n        this.setState({\n          expenses: [...this.state.expenses, newExpenseObject]\n        }, function () {\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          updatedMap.set(newExpenseObject.id, 0.0);\n          this.setState({\n            spentValsForAllExpenses: updatedMap\n          });\n          e.target[0].value = null;\n          e.target[1].value = null;\n        });\n      }).catch(error => {\n        console.log(error);\n      }); //window.location.reload(); \n    };\n\n    this.submitHandlerAddTransaction = e => {\n      e.preventDefault();\n      const pathName = window.location.pathname;\n      const username = pathName.split('/')[2];\n      const today = Moment(new Date()).format('YYYY-MM-DD');\n      console.log('test', Moment(today).format('YYYY-MM-DD')); // const todayYear = today.getFullYear()\n      // const todayMonth = today.getMonth()+1\n      // const todayDay = today.getDate()\n\n      let expenseSpent;\n      let nameOfExpense;\n      this.state.expenses.filter(element => {\n        if (element.id === this.state.transactionDropDownSelection) {\n          nameOfExpense = element.expense;\n          expenseSpent = element.spent;\n        }\n      });\n      axios.post(\"http://localhost:8080/transaction/addRow\", {\n        expenseID: this.state.transactionDropDownSelection,\n        payee: e.target[1].value,\n        spent: parseFloat(e.target[2].value),\n        expenseValue: nameOfExpense,\n        transactionDate: today,\n        userName: username\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n      const updateData = {\n        spent: expenseSpent + parseFloat(e.target[2].value)\n      };\n      axios.patch('http://localhost:8080/expense/editSpent/' + this.state.transactionDropDownSelection, updateData);\n      let updatedMap = new Map(this.state.spentValsForAllExpenses);\n      let targetID;\n      this.state.expenses.map(expense => {\n        console.log(\"dropdownselection\", this.state.transactionDropDownSelection);\n\n        if (expense.id === this.state.transactionDropDownSelection) {\n          targetID = expense.id;\n          console.log(\"targetID\", targetID);\n        }\n      });\n      this.state.expenses.map(expense => {\n        if (expense.id === targetID) {\n          console.log(\"in here\");\n          updatedMap.set(expense.id, updatedMap.get(expense.id) + parseFloat(e.target[2].value));\n          console.log(updatedMap.get(expense.id));\n        }\n      });\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id === this.state.transactionDropDownSelection) {\n          element.spent = expenseSpent + parseFloat(e.target[2].value);\n          return element;\n        } else {\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses,\n        spentValsForAllExpenses: updatedMap\n      });\n      e.target[1].value = null;\n      e.target[2].value = null;\n    };\n\n    this.state = {\n      expenses: [],\n      editDropDownSelection: 0,\n      transactionDropDownSelection: 0,\n      addExpenseToggle: false,\n      addTransactionToggle: false,\n      deleteExpenseToggle: false,\n      deleteConfirmVal: false,\n      editExpenseToggle: false,\n      selectedTransactions: [],\n      listOfMonths: [{\n        month: \"January\",\n        monthNum: 1\n      }, {\n        month: \"February\",\n        monthNum: 2\n      }, {\n        month: \"March\",\n        monthNum: 3\n      }, {\n        month: \"April\",\n        monthNum: 4\n      }, {\n        month: \"May\",\n        monthNum: 5\n      }, {\n        month: \"June\",\n        monthNum: 6\n      }, {\n        month: \"July\",\n        monthNum: 7\n      }, {\n        month: \"August\",\n        monthNum: 8\n      }, {\n        month: \"September\",\n        monthNum: 9\n      }, {\n        month: \"October\",\n        monthNum: 10\n      }, {\n        month: \"November\",\n        monthNum: 11\n      }, {\n        month: \"December\",\n        monthNum: 12\n      }],\n      selectedMonth: -1,\n      selectedYear: -1,\n      today: new Date(),\n      spentValsForAllExpenses: new Map(),\n      showHome: true,\n      showTransactions: false,\n      showLogin: false\n    };\n    this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\n    this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this);\n    this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\n    this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\n    this.handleConfirmDelete = this.handleConfirmDelete.bind(this);\n    this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\n    this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\n    this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\n    this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\n    this.initEditDropDown = this.initEditDropDown.bind(this);\n    this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\n    this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this);\n    this.signOut = this.signOut.bind(this);\n    this.signOutsetState = this.signOutsetState.bind(this); //this.showTransactions = this.showTransactions.bind(this);\n    //this.listOfMonths = this.listOfMonths.bind(this);\n  }\n\n  handleConfirmDelete(element) {\n    // Update the document title using the browser API\n    element = true;\n  }\n\n  submitHandlerDeleteExpense(e) {\n    //this.setState({id: e.target.value}) // value = expense id\n    console.log(e.target.value); //if (this.state.deleteConfirmVal) {\n\n    axios.delete('http://localhost:8080/expense/deleteRow/' + e.target.value).then(response => {\n      const idOfDeletedExpense = response.data;\n      const updatedExpenses = this.state.expenses.filter(expense => {\n        if (expense.id !== idOfDeletedExpense) {\n          return expense; // fix syntax\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n    axios.delete('http://localhost:8080/transaction/deleteExpenseTransactions/' + e.target.value).then(response => {\n      const idOfExpense = response.data;\n      const updatedTransactions = this.state.selectedTransactions.filter(transaction => {\n        if (transaction.expenseID !== idOfExpense) {\n          return transaction; // fix syntax\n        }\n      });\n      this.setState({\n        selectedTransactions: updatedTransactions\n      });\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    }); //window.location.reload();  \n    //}\n  }\n\n  submitHandlerEditExpense(e) {\n    e.preventDefault(); //console.log(e);\n\n    const data = {\n      expense: e.target[1].value,\n      budget: parseFloat(e.target[2].value)\n    };\n    axios.patch('http://localhost:8080/expense/editRow/' + this.state.editDropDownSelection, data).then(response => {\n      console.log(response);\n      const idOfEditedExpense = response.data;\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id !== idOfEditedExpense) {\n          return element;\n        } else {\n          element.expense = e.target[1].value;\n          element.budget = parseFloat(e.target[2].value);\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n      e.target[1].value = null;\n      e.target[2].value = null;\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  initEditDropDown() {\n    let lowestIndexExpense = -1;\n    {\n      this.state.expenses.map(element => {\n        if (lowestIndexExpense === -1) {\n          lowestIndexExpense = element.id;\n        } else {\n          if (element.id < lowestIndexExpense) {\n            lowestIndexExpense = element.id;\n          }\n        }\n      });\n    }\n    let elementWithSmallestIndex = \"\";\n    {\n      this.state.expenses.map(element => {\n        if (element.id === lowestIndexExpense) {\n          elementWithSmallestIndex = element.id;\n        }\n      });\n    }\n    this.setState({\n      editDropDownSelection: elementWithSmallestIndex\n    });\n  }\n\n  handleEditDropDownChange(e) {\n    //console.log(e);\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      editDropDownSelection: selectedElement\n    });\n  }\n\n  initTransactionDropDown() {\n    let lowestIndexExpense = -1;\n    {\n      this.state.expenses.map(element => {\n        if (lowestIndexExpense === -1) {\n          lowestIndexExpense = element.id;\n        } else {\n          if (element.id < lowestIndexExpense) {\n            lowestIndexExpense = element.id;\n          }\n        }\n      });\n    }\n    let elementWithSmallestIndex = \"\";\n    {\n      this.state.expenses.map(element => {\n        if (element.id === lowestIndexExpense) {\n          elementWithSmallestIndex = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: elementWithSmallestIndex\n    });\n  }\n\n  handleTransactionDropDownChange(e) {\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: selectedElement\n    });\n  }\n\n  handleSelectedMonthDropDownChange(e) {\n    let selectedElement = 0; //console.log(e.target.value)\n\n    if (e.target.value === \"-1\") {\n      console.log(\"No month selected.\");\n      return;\n    } else {\n      {\n        this.state.listOfMonths.map(element => {\n          if (element.monthNum === parseInt(e.target.value)) {\n            selectedElement = element.monthNum;\n          }\n        });\n      }\n      this.setState({\n        selectedMonth: selectedElement\n      }, function () {\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          console.log(\"newTransactionDate(MonthChange): \", res.data);\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          this.state.expenses.map(expense => {\n            updatedMap.set(expense.id, 0.0);\n          });\n          this.setState({\n            selectedTransactions: res.data,\n            spentValsForAllExpenses: updatedMap\n          }, function () {\n            let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n            this.state.selectedTransactions.map(transaction => {\n              const expenseSpentVal = changingSpentMap.get(transaction.expenseID);\n              changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n            });\n            this.setState({\n              spentValsForAllExpenses: changingSpentMap\n            });\n          });\n        });\n      });\n    }\n  }\n\n  handleSelectedYearDropDownChange(e) {\n    let selectedElement = 0; //console.log(e.target.value)\n\n    if (e.target.value === \"-1\") {\n      console.log(\"No Year selected.\");\n      return;\n    } else {\n      selectedElement = e.target.value;\n      this.setState({\n        selectedYear: selectedElement\n      }, function () {\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          console.log(\"newTransactionDate(YearChange): \", res.data);\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          this.state.expenses.map(expense => {\n            updatedMap.set(expense.id, 0.0);\n          });\n          this.setState({\n            selectedTransactions: res.data,\n            spentValsForAllExpenses: updatedMap\n          }, function () {\n            let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n            this.state.selectedTransactions.map(transaction => {\n              const expenseSpentVal = changingSpentMap.get(transaction.expenseID);\n              changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n            });\n            this.setState({\n              spentValsForAllExpenses: changingSpentMap\n            });\n          });\n        });\n      });\n    }\n  }\n\n  toggleAddExpenseModal() {\n    this.setState({\n      addExpenseToggle: !this.state.addExpenseToggle\n    });\n  }\n\n  toggleAddTransactionModal() {\n    this.setState({\n      addTransactionToggle: !this.state.addTransactionToggle\n    });\n  }\n\n  toggleDeleteExpenseModal() {\n    this.setState({\n      deleteExpenseToggle: !this.state.deleteExpenseToggle\n    });\n  }\n\n  toggleEditExpenseModal() {\n    this.setState({\n      editExpenseToggle: !this.state.editExpenseToggle\n    });\n  }\n\n  renderTableData() {\n    let sumOfBudget = 0;\n    let sumOfSpent = 0;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.expenses.map(element => {\n        const amountSpent = parseFloat(this.state.spentValsForAllExpenses.get(element.id));\n        sumOfBudget += element.budget;\n        sumOfSpent += amountSpent; //console.log(amountSpent);\n\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: element.expense\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", element.budget.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", amountSpent.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            id: sumOfBudget - sumOfSpent > 0 ? \"remainingPos2\" : \"remainingNeg2\",\n            children: [\"$\", (element.budget - amountSpent).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              name: \"deleteButton\",\n              id: \"trashCan\",\n              value: element.id,\n              onClick: e => {\n                this.submitHandlerDeleteExpense(e);\n                this.toggleDeleteExpenseModal();\n              },\n              children: /*#__PURE__*/_jsxDEV(IconContext.Provider, {\n                value: {\n                  style: {\n                    fontSize: '25px',\n                    color: \"crimson\"\n                  }\n                },\n                children: /*#__PURE__*/_jsxDEV(FaTrash, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 256\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 430,\n                columnNumber: 176\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          children: \"TOTAL : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          children: [\"$\", sumOfBudget.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          children: [\"$\", sumOfSpent.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          id: sumOfBudget - sumOfSpent > 0 ? \"remainingPos\" : \"remainingNeg\",\n          children: [\"$\", (sumOfBudget - sumOfSpent).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n  signOut() {\n    console.log(\"signed OUt\");\n    const pathName = window.location.pathname;\n    const username = pathName.split('/')[2];\n    localStorage.setItem(\"auth\", false);\n    const history = createBrowserHistory();\n    history.push('/'); //changes address and bottom code changes the rendering\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n  signOutsetState() {\n    this.setState({\n      showLogin: true,\n      showHome: false,\n      showTransactions: false\n    });\n  }\n\n  renderHome() {\n    const pathName = window.location.pathname;\n    const username = pathName.split('/')[2];\n\n    if (localStorage.getItem(\"auth\") === \"authenticated\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"display-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"signedInUser\",\n            children: \"Signed In User: \" + username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"signOut-button\",\n            onClick: () => {\n              this.signOutsetState();\n            },\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"navContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"home-title\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              id: \"myLogo\",\n              src: myLogo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"navButtons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button-25\",\n              onClick: this.toggleAddExpenseModal,\n              children: \"Add Expense\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button-25\",\n              onClick: () => {\n                this.toggleAddTransactionModal();\n                this.initTransactionDropDown();\n              },\n              children: \"Add Transaction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button-25\",\n              onClick: () => {\n                this.toggleEditExpenseModal();\n                this.initEditDropDown();\n              },\n              children: \"Edit Expense\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 486,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button-25\",\n              id: \"trans-button\",\n              onClick: () => {\n                this.setState({\n                  showHome: false,\n                  showTransactions: true\n                });\n              },\n              children: \"Show Transactions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"homeContent\",\n          children: [/*#__PURE__*/_jsxDEV(AddExpenseForm, {\n            handleClose: this.toggleAddExpenseModal,\n            show: this.state.addExpenseToggle,\n            submitHandler: this.submitHandlerAddExpense\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EditExpenseForm, {\n            myList: this.state.expenses,\n            handleClose: this.toggleEditExpenseModal,\n            handleChange: this.handleEditDropDownChange,\n            show: this.state.editExpenseToggle,\n            submitHandler: this.submitHandlerEditExpense\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n            myList: this.state.expenses,\n            handleClose: this.toggleAddTransactionModal,\n            show: this.state.addTransactionToggle,\n            submitHandler: this.submitHandlerAddTransaction,\n            handleChange: this.handleTransactionDropDownChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-flex\",\n            id: \"dateDropDown\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"selectColor\",\n              value: this.state.selectedMonth,\n              onChange: this.handleSelectedMonthDropDownChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                disabled: true,\n                value: \"-1\",\n                children: \"--Month--\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 33\n              }, this), this.state.listOfMonths.map(element => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: element.monthNum,\n                children: element.month\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"selectColor\",\n              onChange: this.handleSelectedYearDropDownChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                disabled: true,\n                value: \"-1\",\n                children: \"--Year--\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 4,\n                children: this.state.today.getFullYear() - 4\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 3,\n                children: this.state.today.getFullYear() - 3\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 512,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 2,\n                children: this.state.today.getFullYear() - 2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 513,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 1,\n                children: this.state.today.getFullYear() - 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 514,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: true,\n                value: this.state.today.getFullYear(),\n                children: this.state.today.getFullYear()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 515,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"expense-table\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Expense\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 522,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Budget\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 523,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Spent\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 524,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Remaining\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 525,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 526,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: this.renderTableData()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"You need to sign in to access this page.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-flex\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"signIn-button\",\n            onClick: () => this.signOutsetState(),\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    }\n  }\n\n  renderTransactions() {\n    const pathName = window.location.pathname;\n    const username = pathName.split('/')[2];\n    const history = createBrowserHistory();\n    history.push('/transactionsTable/' + username); //changes address and bottom code changes the rendering\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Transactions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/expense/allExpenses\") // gets all expenses from mysql\n    .then(res => {\n      console.log(\"auth\", localStorage.getItem(\"auth\"));\n      const pathName = window.location.pathname;\n      const username = pathName.split('/')[2];\n      let userExpenses = res.data.filter(expense => {\n        if (expense.userName === username) {\n          return expense;\n        }\n      }); // const expenses = res.data;\n      // console.log('axios expenses: ', expenses);\n\n      this.setState({\n        expenses: userExpenses\n      });\n      const today = new Date();\n      this.setState({\n        selectedMonth: today.getMonth() + 1,\n        selectedYear: today.getFullYear()\n      }, function () {\n        //gets transactions for current month and year\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          let userTransactions = res.data.filter(transaction => {\n            if (transaction.userName === username) {\n              return transaction;\n            }\n          });\n          this.setState({\n            selectedTransactions: userTransactions\n          }, function () {\n            console.log(this.state.selectedTransactions);\n          });\n          let updatedSpentValsForAllExpenses = new Map(); // rename to better name\n\n          this.state.expenses.map(expense => {\n            updatedSpentValsForAllExpenses.set(expense.id, 0.0);\n          });\n          this.setState({\n            spentValsForAllExpenses: updatedSpentValsForAllExpenses\n          });\n          this.state.selectedTransactions.map(transaction => {\n            let tempMap = new Map(this.state.spentValsForAllExpenses);\n            const expenseSpentVal = tempMap.get(transaction.expenseID);\n            tempMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n            this.setState({\n              spentValsForAllExpenses: tempMap\n            });\n          }); // let newMap = new Map(myHashMap);\n          // console.log('newMap', newMap);\n          // newMap.filter((expenseId){\n          //     if (expenseId === transactions.expenseId)\n          //     {\n          //        newMap.set(expenseId, newMap.get(expenseId) + transaction.spentVal) \n          //     }\n          // });\n        });\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.showHome && this.renderHome(), this.state.showTransactions && this.renderTransactions(), this.state.showLogin && this.signOut()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jason/OneDrive/desktop/BudgetTracker/react/src/Home.js"],"names":["React","useState","axios","AddExpenseForm","DeleteExpenseForm","EditExpenseForm","AddTransactionForm","Transactions","NavBar","Link","Moment","createBrowserHistory","Login","FaTrash","IconContext","myLogo","Home","Component","constructor","props","submitHandlerAddExpense","e","preventDefault","pathName","window","location","pathname","username","split","post","expense","target","value","budget","userName","then","response","newId","data","newExpense","newBudget","parseFloat","console","log","newExpenseObject","id","spent","remaining","setState","expenses","state","updatedMap","Map","spentValsForAllExpenses","set","catch","error","submitHandlerAddTransaction","today","Date","format","expenseSpent","nameOfExpense","filter","element","transactionDropDownSelection","expenseID","payee","expenseValue","transactionDate","updateData","patch","targetID","map","get","updatedExpenses","editDropDownSelection","addExpenseToggle","addTransactionToggle","deleteExpenseToggle","deleteConfirmVal","editExpenseToggle","selectedTransactions","listOfMonths","month","monthNum","selectedMonth","selectedYear","showHome","showTransactions","showLogin","toggleAddExpenseModal","bind","toggleAddTransactionModal","toggleDeleteExpenseModal","toggleEditExpenseModal","handleConfirmDelete","handleEditDropDownChange","handleTransactionDropDownChange","handleSelectedMonthDropDownChange","handleSelectedYearDropDownChange","initEditDropDown","initTransactionDropDown","submitHandlerEditExpense","signOut","signOutsetState","submitHandlerDeleteExpense","delete","idOfDeletedExpense","idOfExpense","updatedTransactions","transaction","idOfEditedExpense","lowestIndexExpense","elementWithSmallestIndex","selectedElement","parseInt","res","changingSpentMap","expenseSpentVal","renderTableData","sumOfBudget","sumOfSpent","amountSpent","toFixed","style","fontSize","color","localStorage","setItem","history","push","renderHome","getItem","getFullYear","renderTransactions","componentDidMount","userExpenses","getMonth","userTransactions","updatedSpentValsForAllExpenses","tempMap","render"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport AddExpenseForm from './AddExpenseForm';\r\nimport DeleteExpenseForm from './DeleteExpenseForm';\r\nimport EditExpenseForm from './EditExpenseForm';\r\nimport AddTransactionForm from './AddTransactionForm';\r\nimport Transactions from './Transactions';\r\nimport NavBar from './NavBar';\r\nimport {Link} from \"react-router-dom\";\r\nimport Moment from 'moment';\r\nimport {createBrowserHistory} from \"history\";\r\nimport Login from './Login';\r\nimport { FaTrash } from 'react-icons/fa'\r\nimport {IconContext} from \"react-icons\"\r\nimport myLogo from './TrackerExLogoblue.png'\r\n\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            expenses: [],\r\n            editDropDownSelection:0,\r\n            transactionDropDownSelection:0,\r\n\r\n            addExpenseToggle: false,\r\n            addTransactionToggle: false,\r\n            deleteExpenseToggle: false,\r\n            deleteConfirmVal: false,\r\n            editExpenseToggle: false,\r\n\r\n            selectedTransactions: [],\r\n            listOfMonths: [{month:\"January\", monthNum: 1}, {month:\"February\", monthNum: 2}, {month:\"March\", monthNum: 3}, {month:\"April\", monthNum: 4}, {month:\"May\", monthNum: 5}, {month:\"June\", monthNum: 6}, {month:\"July\", monthNum: 7}, {month:\"August\", monthNum: 8}, {month:\"September\", monthNum: 9}, {month:\"October\", monthNum: 10}, {month:\"November\", monthNum: 11}, {month:\"December\", monthNum: 12}],\r\n            selectedMonth: -1,\r\n            selectedYear: -1,\r\n            \r\n            today: new Date(),\r\n            spentValsForAllExpenses: new Map(),\r\n\r\n            showHome: true,\r\n            showTransactions: false,\r\n            showLogin: false\r\n\r\n        };\r\n\r\n        this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\r\n        this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this)\r\n        this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\r\n        this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\r\n        \r\n        this.handleConfirmDelete = this.handleConfirmDelete.bind(this);\r\n        this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\r\n        this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\r\n        this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\r\n        this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\r\n\r\n        this.initEditDropDown = this.initEditDropDown.bind(this);\r\n        this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\r\n        this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this);\r\n        this.signOut = this.signOut.bind(this);\r\n        this.signOutsetState = this.signOutsetState.bind(this);\r\n        //this.showTransactions = this.showTransactions.bind(this);\r\n        //this.listOfMonths = this.listOfMonths.bind(this);\r\n        \r\n    }\r\n\r\n    submitHandlerAddExpense = e => {\r\n        e.preventDefault();\r\n\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n\r\n        axios.post(\"http://localhost:8080/expense/addRow\",{\r\n            expense: e.target[0].value,\r\n            budget: e.target[1].value,\r\n            userName: username\r\n        }).then(response => {\r\n            \r\n            const newId = response.data;\r\n            const newExpense = e.target[0].value;\r\n            const newBudget = parseFloat(e.target[1].value);\r\n            \r\n            console.log(\"Expense: \" + e.target[0].value + \"\\n\" + \"Budget: \" + e.target[1].value + \"\\n\" + \"Assigned ID: \" + response.data)\r\n            const newExpenseObject = {\r\n                id: newId,\r\n                expense: newExpense,\r\n                budget: newBudget,\r\n                spent: 0.0,\r\n                remaining: newBudget,\r\n                userName: username\r\n            }\r\n            \r\n            this.setState({\r\n                expenses: [...this.state.expenses, newExpenseObject]\r\n            }, function() {\r\n                let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n                updatedMap.set(newExpenseObject.id, 0.0);\r\n                this.setState({spentValsForAllExpenses: updatedMap});\r\n                e.target[0].value = null;\r\n                e.target[1].value = null;\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })  \r\n        //window.location.reload(); \r\n    }\r\n\r\n    submitHandlerAddTransaction = e => {\r\n        e.preventDefault();\r\n\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        const today = Moment(new Date()).format('YYYY-MM-DD');\r\n        console.log('test', Moment(today).format('YYYY-MM-DD'));\r\n        // const todayYear = today.getFullYear()\r\n        // const todayMonth = today.getMonth()+1\r\n        // const todayDay = today.getDate()\r\n        \r\n        let expenseSpent;\r\n        let nameOfExpense; \r\n        this.state.expenses.filter((element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                nameOfExpense = element.expense;\r\n                expenseSpent = element.spent;\r\n            }\r\n        })\r\n\r\n        axios.post(\"http://localhost:8080/transaction/addRow\",{\r\n            expenseID: this.state.transactionDropDownSelection,\r\n            payee: e.target[1].value,\r\n            spent: parseFloat(e.target[2].value),\r\n            expenseValue: nameOfExpense, \r\n            transactionDate: today,\r\n            userName: username\r\n        }).then(response => {\r\n            console.log(response)\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        const updateData = {\r\n            spent: expenseSpent + parseFloat(e.target[2].value)\r\n        }\r\n\r\n        axios.patch('http://localhost:8080/expense/editSpent/' + this.state.transactionDropDownSelection, updateData)\r\n        \r\n        let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n        let targetID;\r\n        this.state.expenses.map((expense) => {\r\n            console.log(\"dropdownselection\",this.state.transactionDropDownSelection)\r\n            if (expense.id === this.state.transactionDropDownSelection) {\r\n                targetID = expense.id;\r\n                console.log(\"targetID\",targetID)\r\n            }\r\n        })\r\n\r\n        this.state.expenses.map((expense) => {\r\n            if (expense.id === targetID) {\r\n                console.log(\"in here\");\r\n                updatedMap.set(expense.id, updatedMap.get(expense.id) + parseFloat(e.target[2].value))\r\n                console.log(updatedMap.get(expense.id));\r\n            }\r\n        })\r\n\r\n        const updatedExpenses = this.state.expenses.filter( (element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                element.spent = expenseSpent + parseFloat(e.target[2].value)\r\n                return element;\r\n            }\r\n            else {\r\n                return element;\r\n            }\r\n        })\r\n\r\n        this.setState({expenses: updatedExpenses, spentValsForAllExpenses: updatedMap})\r\n        e.target[1].value = null;\r\n        e.target[2].value = null;\r\n    }\r\n\r\n    handleConfirmDelete(element){\r\n        // Update the document title using the browser API\r\n        element = true;\r\n    }\r\n    submitHandlerDeleteExpense (e) {\r\n        //this.setState({id: e.target.value}) // value = expense id\r\n        console.log(e.target.value)\r\n        \r\n        //if (this.state.deleteConfirmVal) {\r\n            axios.delete('http://localhost:8080/expense/deleteRow/' + e.target.value)\r\n            .then(response => {\r\n                const idOfDeletedExpense = response.data;\r\n                const updatedExpenses = this.state.expenses.filter((expense) => {\r\n                    if (expense.id !== idOfDeletedExpense) {\r\n                        return expense; // fix syntax\r\n                    }\r\n                });\r\n                this.setState({expenses: updatedExpenses});\r\n                console.log(response)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            }) \r\n\r\n            axios.delete('http://localhost:8080/transaction/deleteExpenseTransactions/' + e.target.value)\r\n            .then(response => {\r\n                const idOfExpense = response.data;\r\n                const updatedTransactions = this.state.selectedTransactions.filter((transaction) => {\r\n                    if (transaction.expenseID !== idOfExpense) {\r\n                        return transaction; // fix syntax\r\n                    }\r\n                });\r\n                this.setState({selectedTransactions: updatedTransactions});\r\n                console.log(response)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            }) \r\n            //window.location.reload();  \r\n        //}\r\n    }\r\n\r\n    submitHandlerEditExpense (e) {\r\n        e.preventDefault();\r\n        //console.log(e);\r\n\r\n        const data = {\r\n            expense: e.target[1].value,\r\n            budget: parseFloat(e.target[2].value)\r\n        }\r\n        axios.patch('http://localhost:8080/expense/editRow/' + this.state.editDropDownSelection, data)\r\n        .then(response => {\r\n            console.log(response)\r\n            const idOfEditedExpense = response.data;\r\n            const updatedExpenses = this.state.expenses.filter((element) => {\r\n                if (element.id !== idOfEditedExpense) {\r\n                    return element;\r\n                }\r\n                else{\r\n                    element.expense = e.target[1].value;\r\n                    element.budget = parseFloat(e.target[2].value);\r\n                    return element;\r\n                }\r\n                \r\n            })\r\n            this.setState({expenses: updatedExpenses});\r\n            \r\n            e.target[1].value = null;\r\n            e.target[2].value = null;\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    initEditDropDown() {\r\n        let lowestIndexExpense = -1;\r\n        {this.state.expenses.map((element) => {\r\n            if (lowestIndexExpense === -1) {\r\n                lowestIndexExpense = element.id;\r\n            }\r\n            else {\r\n                if (element.id < lowestIndexExpense) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n            }\r\n        })}\r\n        \r\n        let elementWithSmallestIndex = \"\";\r\n        {this.state.expenses.map((element) => {\r\n            if (element.id === lowestIndexExpense) {\r\n                elementWithSmallestIndex = element.id;\r\n            }\r\n        })}\r\n\r\n        this.setState({editDropDownSelection: elementWithSmallestIndex});\r\n    }\r\n    handleEditDropDownChange(e) {\r\n        //console.log(e);\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ editDropDownSelection: selectedElement });\r\n    }\r\n\r\n    initTransactionDropDown() {\r\n        let lowestIndexExpense = -1;\r\n        {this.state.expenses.map((element) => {\r\n            if (lowestIndexExpense === -1) {\r\n                lowestIndexExpense = element.id;\r\n            }\r\n            else {\r\n                if (element.id < lowestIndexExpense) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n            }\r\n        })}\r\n        \r\n        let elementWithSmallestIndex = \"\";\r\n        {this.state.expenses.map((element) => {\r\n            if (element.id === lowestIndexExpense) {\r\n                elementWithSmallestIndex = element.id;\r\n            }\r\n        })}\r\n\r\n        this.setState({transactionDropDownSelection: elementWithSmallestIndex});\r\n    }\r\n    handleTransactionDropDownChange(e) {\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ transactionDropDownSelection: selectedElement });\r\n    }\r\n\r\n    handleSelectedMonthDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No month selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            {this.state.listOfMonths.map((element) => {\r\n                if (element.monthNum === parseInt(e.target.value)) {\r\n                    selectedElement = element.monthNum;\r\n                }\r\n            })}\r\n            this.setState({selectedMonth: selectedElement}, function () {\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(\"newTransactionDate(MonthChange): \", res.data);\r\n                    \r\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedMap.set(expense.id, 0.0);\r\n                    })\r\n                    \r\n                    this.setState({selectedTransactions: res.data, spentValsForAllExpenses: updatedMap}, function(){\r\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\r\n                        \r\n                        this.state.selectedTransactions.map((transaction) => {\r\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID)\r\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                \r\n                        })\r\n                        this.setState({spentValsForAllExpenses: changingSpentMap})\r\n                    })\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSelectedYearDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No Year selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            selectedElement = e.target.value;\r\n            \r\n            this.setState({selectedYear: selectedElement}, function () {\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(\"newTransactionDate(YearChange): \" ,res.data);\r\n\r\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n                                       \r\n                    this.state.expenses.map((expense) => {\r\n                        updatedMap.set(expense.id, 0.0);\r\n                    })\r\n                    \r\n        \r\n                    this.setState({selectedTransactions: res.data, spentValsForAllExpenses: updatedMap}, function() {\r\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\r\n                        \r\n                        this.state.selectedTransactions.map((transaction) => {\r\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID)\r\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                \r\n                        })\r\n                        this.setState({spentValsForAllExpenses: changingSpentMap})\r\n                    });\r\n                    \r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleAddExpenseModal() {\r\n        this.setState({addExpenseToggle : !this.state.addExpenseToggle});\r\n    }\r\n    toggleAddTransactionModal() {\r\n        this.setState({addTransactionToggle: !this.state.addTransactionToggle});\r\n    }\r\n    toggleDeleteExpenseModal() {\r\n        this.setState({deleteExpenseToggle : !this.state.deleteExpenseToggle});\r\n    }\r\n    toggleEditExpenseModal() {\r\n        this.setState({editExpenseToggle: !this.state.editExpenseToggle});\r\n    }\r\n\r\n    renderTableData() {\r\n\r\n        let sumOfBudget = 0;\r\n        let sumOfSpent = 0;\r\n\r\n        return (<>\r\n            {this.state.expenses.map((element) => {\r\n            \r\n                const amountSpent = parseFloat(this.state.spentValsForAllExpenses.get(element.id));\r\n                sumOfBudget += element.budget;\r\n                sumOfSpent += amountSpent;\r\n                //console.log(amountSpent);\r\n                return (\r\n                    <tr>\r\n                        <td>{element.expense}</td>\r\n                        <td>${(element.budget).toFixed(2)}</td>\r\n                        <td>${(amountSpent).toFixed(2)}</td>\r\n                        <td id={(sumOfBudget-sumOfSpent) > 0 ? \"remainingPos2\":\"remainingNeg2\"}>${(element.budget-amountSpent).toFixed(2)}</td>\r\n                        <td><button name=\"deleteButton\" id='trashCan' value={element.id} onClick={(e) => {this.submitHandlerDeleteExpense(e);this.toggleDeleteExpenseModal()}}><IconContext.Provider value={{ style: {   fontSize: '25px', color: \"crimson\"}}}><FaTrash/></IconContext.Provider></button></td>\r\n                    </tr>\r\n                )\r\n\r\n            })}\r\n            <tr>\r\n                <td className='bold'>TOTAL : </td>\r\n                <td className='bold'>${sumOfBudget.toFixed(2)}</td>\r\n                <td className='bold'>${sumOfSpent.toFixed(2)}</td>\r\n                <td className='bold' id={(sumOfBudget-sumOfSpent) > 0 ? \"remainingPos\":\"remainingNeg\"}>${(sumOfBudget-sumOfSpent).toFixed(2)}</td>\r\n                <td></td>\r\n            </tr>\r\n\r\n        </>)\r\n        \r\n    }\r\n\r\n    signOut() {\r\n        console.log(\"signed OUt\")\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        localStorage.setItem(\"auth\", false);\r\n\r\n\r\n        const history = createBrowserHistory();\r\n        history.push('/');   //changes address and bottom code changes the rendering\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Login />\r\n        </>)\r\n    }\r\n    signOutsetState() {\r\n        this.setState({showLogin: true, showHome: false, showTransactions: false});\r\n    }\r\n\r\n    renderHome() {\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n\r\n        if (localStorage.getItem(\"auth\") === \"authenticated\") {\r\n        \r\n            return (\r\n                <div className='App-header'>\r\n\r\n                    <div className='display-block'>\r\n                            <p id=\"signedInUser\">{\"Signed In User: \" + username}</p>\r\n                            <button id=\"signOut-button\" onClick={() => {this.signOutsetState()}}>Sign Out</button>\r\n                    </div>\r\n\r\n                    <div id=\"navContainer\">\r\n                    <div id='home-title'>\r\n                                <img id='myLogo'src={myLogo}/>\r\n                            </div>\r\n                        <div className='navButtons'>\r\n                            <button className='button-25' onClick={this.toggleAddExpenseModal}>Add Expense</button>\r\n                            <button className='button-25' onClick={ () => {this.toggleAddTransactionModal();this.initTransactionDropDown();}}>Add Transaction</button>\r\n                            <button className='button-25' onClick={ () => {this.toggleEditExpenseModal();this.initEditDropDown();}}>Edit Expense</button>\r\n                            <button className='button-25' id='trans-button' onClick={() => {this.setState({showHome: false, showTransactions:true})}}>Show Transactions</button>\r\n                        </div>\r\n                    </div>\r\n                    <div id='homeContent'>\r\n                        \r\n                        {/* <div>\r\n                            <h1 className=\"mainTitle\">My Budget</h1>\r\n                        </div> */}\r\n                        {/* <div id=\"signedInUser\">{\"Signed In User: \" + username}</div> */}\r\n\r\n                        <AddExpenseForm  handleClose={this.toggleAddExpenseModal} show={this.state.addExpenseToggle} submitHandler={this.submitHandlerAddExpense}/>\r\n                        <EditExpenseForm myList={this.state.expenses} handleClose={this.toggleEditExpenseModal} handleChange={this.handleEditDropDownChange} show={this.state.editExpenseToggle} submitHandler={this.submitHandlerEditExpense}/>\r\n                        <AddTransactionForm  myList={this.state.expenses} handleClose={this.toggleAddTransactionModal} show={this.state.addTransactionToggle} submitHandler={this.submitHandlerAddTransaction} handleChange={this.handleTransactionDropDownChange}/>\r\n                        \r\n                        <div className=\"dropdown-flex\" id=\"dateDropDown\">\r\n                            <select id='selectColor' value={this.state.selectedMonth} onChange={this.handleSelectedMonthDropDownChange}>\r\n                                <option disabled value=\"-1\">--Month--</option>\r\n                                {\r\n                                this.state.listOfMonths.map((element) => (\r\n                                    <option value={element.monthNum}>{element.month}</option>\r\n                                ))}\r\n                            </select>\r\n                            <select id='selectColor' onChange={this.handleSelectedYearDropDownChange}>\r\n                                <option disabled value=\"-1\">--Year--</option>\r\n                                <option value={this.state.today.getFullYear()-4}>{this.state.today.getFullYear()-4}</option>\r\n                                <option value={this.state.today.getFullYear()-3}>{this.state.today.getFullYear()-3}</option>\r\n                                <option value={this.state.today.getFullYear()-2}>{this.state.today.getFullYear()-2}</option>\r\n                                <option value={this.state.today.getFullYear()-1}>{this.state.today.getFullYear()-1}</option>\r\n                                <option selected value={this.state.today.getFullYear()}>{this.state.today.getFullYear()}</option>\r\n                            </select>\r\n                        </div>\r\n                        \r\n                        <table className=\"expense-table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Expense</th>\r\n                                    <th>Budget</th>\r\n                                    <th>Spent</th>\r\n                                    <th>Remaining</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.renderTableData()}\r\n                            </tbody>\r\n                        </table>\r\n                    \r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            \r\n            return (<>\r\n                {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n                <div><h2>You need to sign in to access this page.</h2></div>\r\n                <div className=\"buttons-flex\"><button id=\"signIn-button\" onClick={() => this.signOutsetState()}>Sign in</button></div>\r\n                \r\n            </>)\r\n        }\r\n    }\r\n\r\n    renderTransactions() {\r\n        const pathName = window.location.pathname;\r\n        const username = pathName.split('/')[2];\r\n        \r\n        const history = createBrowserHistory();\r\n        history.push('/transactionsTable/' + username);   //changes address and bottom code changes the rendering\r\n        return (<>\r\n            {/* <Link to={homePage}>{<Home username={this.state.username}/>}</Link> */}\r\n            <Transactions />\r\n        </>)\r\n    }\r\n    componentDidMount() {\r\n        \r\n        axios.get(\"http://localhost:8080/expense/allExpenses\")  // gets all expenses from mysql\r\n        .then(res => {\r\n\r\n            console.log(\"auth\",localStorage.getItem(\"auth\"))\r\n\r\n            const pathName = window.location.pathname;\r\n            const username = pathName.split('/')[2];\r\n\r\n            let userExpenses = (res.data).filter((expense) => {\r\n                if (expense.userName === username) {\r\n                    return expense;\r\n                }\r\n            })\r\n\r\n            // const expenses = res.data;\r\n            // console.log('axios expenses: ', expenses);\r\n            this.setState({expenses: userExpenses});\r\n\r\n            const today = new Date();\r\n            this.setState({selectedMonth: today.getMonth()+1, selectedYear: today.getFullYear()}, function () { //gets transactions for current month and year\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n\r\n                    let userTransactions = (res.data).filter((transaction) => {\r\n                        if (transaction.userName === username) {\r\n                            return transaction;\r\n                        }\r\n                    })\r\n                    this.setState({selectedTransactions: userTransactions}, function() {\r\n                        console.log(this.state.selectedTransactions)\r\n                    });\r\n\r\n                    \r\n                    let updatedSpentValsForAllExpenses = new Map(); // rename to better name\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedSpentValsForAllExpenses.set(expense.id, 0.0);\r\n            \r\n                    });\r\n            \r\n                    this.setState({spentValsForAllExpenses: updatedSpentValsForAllExpenses});\r\n\r\n                    this.state.selectedTransactions.map((transaction) => {\r\n                        let tempMap = new Map(this.state.spentValsForAllExpenses);\r\n                        const expenseSpentVal = tempMap.get(transaction.expenseID)\r\n                        tempMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                        this.setState({spentValsForAllExpenses: tempMap})\r\n                    })\r\n\r\n                \r\n                    // let newMap = new Map(myHashMap);\r\n                    // console.log('newMap', newMap);\r\n\r\n                    // newMap.filter((expenseId){\r\n                    //     if (expenseId === transactions.expenseId)\r\n                    //     {\r\n                    //        newMap.set(expenseId, newMap.get(expenseId) + transaction.spentVal) \r\n                    //     }\r\n                    // });\r\n                })\r\n            });\r\n    \r\n            \r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (<>\r\n            <div>\r\n                {this.state.showHome && this.renderHome()}\r\n                {this.state.showTransactions && this.renderTransactions()}\r\n                {this.state.showLogin && this.signOut()}\r\n                \r\n                \r\n            </div>\r\n            \r\n        </>)\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}