{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Identifier = Identifier;\nexports.ArgumentPlaceholder = ArgumentPlaceholder;\nexports.SpreadElement = exports.RestElement = RestElement;\nexports.ObjectPattern = exports.ObjectExpression = ObjectExpression;\nexports.ObjectMethod = ObjectMethod;\nexports.ObjectProperty = ObjectProperty;\nexports.ArrayPattern = exports.ArrayExpression = ArrayExpression;\nexports.RecordExpression = RecordExpression;\nexports.TupleExpression = TupleExpression;\nexports.RegExpLiteral = RegExpLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.StringLiteral = StringLiteral;\nexports.BigIntLiteral = BigIntLiteral;\nexports.DecimalLiteral = DecimalLiteral;\nexports.TopicReference = TopicReference;\nexports.PipelineTopicExpression = PipelineTopicExpression;\nexports.PipelineBareFunction = PipelineBareFunction;\nexports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;\n\nvar _t = require(\"@babel/types\");\n\nvar _jsesc = require(\"jsesc\");\n\nconst {\n  isAssignmentPattern,\n  isIdentifier\n} = _t;\n\nfunction Identifier(node) {\n  this.exactSource(node.loc, () => {\n    this.word(node.name);\n  });\n}\n\nfunction ArgumentPlaceholder() {\n  this.token(\"?\");\n}\n\nfunction RestElement(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nfunction ObjectExpression(node) {\n  const props = node.properties;\n  this.token(\"{\");\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(\"}\");\n}\n\nfunction ObjectMethod(node) {\n  this.printJoin(node.decorators, node);\n\n  this._methodHead(node);\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction ObjectProperty(node) {\n  this.printJoin(node.decorators, node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) {\n      this.print(node.value, node);\n      return;\n    }\n\n    this.print(node.key, node);\n\n    if (node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) {\n      return;\n    }\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ArrayExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  this.token(\"[\");\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    } else {\n      this.token(\",\");\n    }\n  }\n\n  this.token(\"]\");\n}\n\nfunction RecordExpression(node) {\n  const props = node.properties;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"{|\";\n    endToken = \"|}\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#{\";\n    endToken = \"}\";\n  } else {\n    throw new Error(`The \"recordAndTupleSyntaxType\" generator option must be \"bar\" or \"hash\" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(endToken);\n}\n\nfunction TupleExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"[|\";\n    endToken = \"|]\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#[\";\n    endToken = \"]\";\n  } else {\n    throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    }\n  }\n\n  this.token(endToken);\n}\n\nfunction RegExpLiteral(node) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\n\nfunction BooleanLiteral(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nfunction NullLiteral() {\n  this.word(\"null\");\n}\n\nfunction NumericLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value + \"\";\n\n  if (opts.numbers) {\n    this.number(_jsesc(node.value, opts));\n  } else if (raw == null) {\n    this.number(value);\n  } else if (this.format.minified) {\n    this.number(raw.length < value.length ? raw : value);\n  } else {\n    this.number(raw);\n  }\n}\n\nfunction StringLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const val = _jsesc(node.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && {\n    json: true\n  }));\n\n  return this.token(val);\n}\n\nfunction BigIntLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"n\");\n}\n\nfunction DecimalLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"m\");\n}\n\nfunction TopicReference() {\n  const {\n    topicToken\n  } = this.format;\n\n  switch (topicToken) {\n    case \"#\":\n      this.token(\"#\");\n      break;\n\n    default:\n      {\n        const givenTopicTokenJSON = JSON.stringify(topicToken);\n        const message = `The \"topicToken\" generator option must be \"#\" (${givenTopicTokenJSON} received instead).`;\n        throw new Error(message);\n      }\n  }\n}\n\nfunction PipelineTopicExpression(node) {\n  this.print(node.expression, node);\n}\n\nfunction PipelineBareFunction(node) {\n  this.print(node.callee, node);\n}\n\nfunction PipelinePrimaryTopicReference() {\n  this.token(\"#\");\n}","map":{"version":3,"sources":["C:/Users/jason/OneDrive/desktop/BudgetTracker/react/node_modules/@babel/generator/lib/generators/types.js"],"names":["Object","defineProperty","exports","value","Identifier","ArgumentPlaceholder","SpreadElement","RestElement","ObjectPattern","ObjectExpression","ObjectMethod","ObjectProperty","ArrayPattern","ArrayExpression","RecordExpression","TupleExpression","RegExpLiteral","BooleanLiteral","NullLiteral","NumericLiteral","StringLiteral","BigIntLiteral","DecimalLiteral","TopicReference","PipelineTopicExpression","PipelineBareFunction","PipelinePrimaryTopicReference","_t","require","_jsesc","isAssignmentPattern","isIdentifier","node","exactSource","loc","word","name","token","print","argument","props","properties","printInnerComments","length","space","printList","indent","statement","printJoin","decorators","_methodHead","body","computed","key","left","shorthand","elems","elements","len","i","elem","startToken","endToken","format","recordAndTupleSyntaxType","Error","JSON","stringify","pattern","flags","raw","getPossibleRaw","opts","jsescOption","numbers","number","minified","val","assign","jsonCompatibleStrings","json","topicToken","givenTopicTokenJSON","message","expression","callee"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Identifier = Identifier;\nexports.ArgumentPlaceholder = ArgumentPlaceholder;\nexports.SpreadElement = exports.RestElement = RestElement;\nexports.ObjectPattern = exports.ObjectExpression = ObjectExpression;\nexports.ObjectMethod = ObjectMethod;\nexports.ObjectProperty = ObjectProperty;\nexports.ArrayPattern = exports.ArrayExpression = ArrayExpression;\nexports.RecordExpression = RecordExpression;\nexports.TupleExpression = TupleExpression;\nexports.RegExpLiteral = RegExpLiteral;\nexports.BooleanLiteral = BooleanLiteral;\nexports.NullLiteral = NullLiteral;\nexports.NumericLiteral = NumericLiteral;\nexports.StringLiteral = StringLiteral;\nexports.BigIntLiteral = BigIntLiteral;\nexports.DecimalLiteral = DecimalLiteral;\nexports.TopicReference = TopicReference;\nexports.PipelineTopicExpression = PipelineTopicExpression;\nexports.PipelineBareFunction = PipelineBareFunction;\nexports.PipelinePrimaryTopicReference = PipelinePrimaryTopicReference;\n\nvar _t = require(\"@babel/types\");\n\nvar _jsesc = require(\"jsesc\");\n\nconst {\n  isAssignmentPattern,\n  isIdentifier\n} = _t;\n\nfunction Identifier(node) {\n  this.exactSource(node.loc, () => {\n    this.word(node.name);\n  });\n}\n\nfunction ArgumentPlaceholder() {\n  this.token(\"?\");\n}\n\nfunction RestElement(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nfunction ObjectExpression(node) {\n  const props = node.properties;\n  this.token(\"{\");\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(\"}\");\n}\n\nfunction ObjectMethod(node) {\n  this.printJoin(node.decorators, node);\n\n  this._methodHead(node);\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction ObjectProperty(node) {\n  this.printJoin(node.decorators, node);\n\n  if (node.computed) {\n    this.token(\"[\");\n    this.print(node.key, node);\n    this.token(\"]\");\n  } else {\n    if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name) {\n      this.print(node.value, node);\n      return;\n    }\n\n    this.print(node.key, node);\n\n    if (node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name) {\n      return;\n    }\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ArrayExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  this.token(\"[\");\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    } else {\n      this.token(\",\");\n    }\n  }\n\n  this.token(\"]\");\n}\n\nfunction RecordExpression(node) {\n  const props = node.properties;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"{|\";\n    endToken = \"|}\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#{\";\n    endToken = \"}\";\n  } else {\n    throw new Error(`The \"recordAndTupleSyntaxType\" generator option must be \"bar\" or \"hash\" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  if (props.length) {\n    this.space();\n    this.printList(props, node, {\n      indent: true,\n      statement: true\n    });\n    this.space();\n  }\n\n  this.token(endToken);\n}\n\nfunction TupleExpression(node) {\n  const elems = node.elements;\n  const len = elems.length;\n  let startToken;\n  let endToken;\n\n  if (this.format.recordAndTupleSyntaxType === \"bar\") {\n    startToken = \"[|\";\n    endToken = \"|]\";\n  } else if (this.format.recordAndTupleSyntaxType === \"hash\") {\n    startToken = \"#[\";\n    endToken = \"]\";\n  } else {\n    throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);\n  }\n\n  this.token(startToken);\n  this.printInnerComments(node);\n\n  for (let i = 0; i < elems.length; i++) {\n    const elem = elems[i];\n\n    if (elem) {\n      if (i > 0) this.space();\n      this.print(elem, node);\n      if (i < len - 1) this.token(\",\");\n    }\n  }\n\n  this.token(endToken);\n}\n\nfunction RegExpLiteral(node) {\n  this.word(`/${node.pattern}/${node.flags}`);\n}\n\nfunction BooleanLiteral(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nfunction NullLiteral() {\n  this.word(\"null\");\n}\n\nfunction NumericLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n  const opts = this.format.jsescOption;\n  const value = node.value + \"\";\n\n  if (opts.numbers) {\n    this.number(_jsesc(node.value, opts));\n  } else if (raw == null) {\n    this.number(value);\n  } else if (this.format.minified) {\n    this.number(raw.length < value.length ? raw : value);\n  } else {\n    this.number(raw);\n  }\n}\n\nfunction StringLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const val = _jsesc(node.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && {\n    json: true\n  }));\n\n  return this.token(val);\n}\n\nfunction BigIntLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"n\");\n}\n\nfunction DecimalLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (!this.format.minified && raw != null) {\n    this.word(raw);\n    return;\n  }\n\n  this.word(node.value + \"m\");\n}\n\nfunction TopicReference() {\n  const {\n    topicToken\n  } = this.format;\n\n  switch (topicToken) {\n    case \"#\":\n      this.token(\"#\");\n      break;\n\n    default:\n      {\n        const givenTopicTokenJSON = JSON.stringify(topicToken);\n        const message = `The \"topicToken\" generator option must be \"#\" (${givenTopicTokenJSON} received instead).`;\n        throw new Error(message);\n      }\n  }\n}\n\nfunction PipelineTopicExpression(node) {\n  this.print(node.expression, node);\n}\n\nfunction PipelineBareFunction(node) {\n  this.print(node.callee, node);\n}\n\nfunction PipelinePrimaryTopicReference() {\n  this.token(\"#\");\n}"]},"metadata":{},"sourceType":"script"}