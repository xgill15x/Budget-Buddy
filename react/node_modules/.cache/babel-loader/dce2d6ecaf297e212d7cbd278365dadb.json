{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Desktop/Budget-Tracker/react/src/Components/Home.js\";\nimport React from 'react';\nimport '../App.css';\nimport AddExpenseForm from './AddExpenseForm';\nimport EditExpenseForm from './EditExpenseForm';\nimport AddTransactionForm from './AddTransactionForm';\nimport Transactions from './Transactions';\nimport Moment from 'moment';\nimport { createBrowserHistory } from \"history\";\nimport Login from './Login';\nimport { Trash } from 'react-bootstrap-icons';\nimport * as Resources from '../Resources/Resources';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.submitHandlerAddExpense = e => {\n      e.preventDefault();\n      const pathName = window.location.pathname;\n      const username = pathName.split('/')[2];\n      const expense = e.target[0].value;\n      const budget = e.target[1].value;\n      Resources.addExpenseEndpoint(expense, budget, username).then(response => {\n        const newId = response.data;\n        const floatBudget = parseFloat(e.target[1].value);\n        if (this.state.expenses.length === 0) {\n          this.setState({\n            transactionDropDownSelection: newId,\n            editDropDownSelection: newId\n          });\n        }\n        const newExpenseObject = {\n          id: newId,\n          expense: expense,\n          budget: floatBudget,\n          spent: 0.0,\n          remaining: floatBudget,\n          userName: username\n        };\n        this.setState({\n          expenses: [...this.state.expenses, newExpenseObject]\n        }, function () {\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          updatedMap.set(newExpenseObject.id, 0.0);\n          this.setState({\n            spentValsForAllExpenses: updatedMap\n          });\n          e.target[0].value = null;\n          e.target[1].value = null;\n        });\n      }).catch(error => {\n        //console.log(error);\n      });\n    };\n    this.submitHandlerAddTransaction = e => {\n      e.preventDefault();\n      const pathName = window.location.pathname;\n      const username = pathName.split('/')[2];\n      const today = Moment(this.state.today).format('YYYY-MM-DD');\n      let expenseTotalSpent;\n      const expenseID = this.state.transactionDropDownSelection;\n      const payee = e.target[1].value;\n      const spent = parseFloat(e.target[2].value);\n      this.state.expenses.filter(element => {\n        if (element.id === expenseID) {\n          expenseTotalSpent = element.spent;\n        }\n      });\n      Resources.addTransactionEndpoint(expenseID, payee, spent, today, username).then(response => {\n        //console.log(response);\n      }).catch(error => {\n        //console.log(error);\n      });\n      const updatedSpentData = {\n        spent: expenseTotalSpent + spent\n      };\n      Resources.updateSpentEndpoint(expenseID, updatedSpentData).then(response => {\n        //console.log(response);\n      }).catch(error => {\n        //console.log(error);\n      });\n      let updatedMap = new Map(this.state.spentValsForAllExpenses);\n      this.state.expenses.map(expense => {\n        if (expense.id === expenseID) {\n          const totalSpent = updatedMap.get(expense.id);\n          updatedMap.set(expense.id, totalSpent + spent);\n        }\n      });\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id === expenseID) {\n          element.spent = expenseTotalSpent + spent;\n          return element;\n        } else {\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses,\n        spentValsForAllExpenses: updatedMap\n      });\n      e.target[1].value = null;\n      e.target[2].value = null;\n    };\n    this.state = {\n      expenses: [],\n      editDropDownSelection: 0,\n      transactionDropDownSelection: 0,\n      addExpenseToggle: false,\n      addTransactionToggle: false,\n      deleteExpenseToggle: false,\n      deleteConfirmVal: false,\n      editExpenseToggle: false,\n      selectedTransactions: [],\n      listOfMonths: [{\n        month: \"January\",\n        monthNum: 1\n      }, {\n        month: \"February\",\n        monthNum: 2\n      }, {\n        month: \"March\",\n        monthNum: 3\n      }, {\n        month: \"April\",\n        monthNum: 4\n      }, {\n        month: \"May\",\n        monthNum: 5\n      }, {\n        month: \"June\",\n        monthNum: 6\n      }, {\n        month: \"July\",\n        monthNum: 7\n      }, {\n        month: \"August\",\n        monthNum: 8\n      }, {\n        month: \"September\",\n        monthNum: 9\n      }, {\n        month: \"October\",\n        monthNum: 10\n      }, {\n        month: \"November\",\n        monthNum: 11\n      }, {\n        month: \"December\",\n        monthNum: 12\n      }],\n      selectedMonth: -1,\n      selectedYear: -1,\n      today: new Date(),\n      spentValsForAllExpenses: new Map(),\n      showHome: true,\n      showTransactions: false,\n      showLogin: false,\n      userOnCurrentDate: true,\n      oldExpenseName: ''\n    };\n    this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\n    this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this);\n    this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\n    this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\n    this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\n    this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\n    this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\n    this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\n    this.initEditDropDown = this.initEditDropDown.bind(this);\n    this.secondaryInitEdit = this.secondaryInitEdit.bind(this);\n    this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\n    this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this);\n    this.signOut = this.signOut.bind(this);\n    this.signOutSetState = this.signOutSetState.bind(this);\n  }\n  toggleAddExpenseModal() {\n    this.setState({\n      addExpenseToggle: !this.state.addExpenseToggle\n    });\n  }\n  toggleAddTransactionModal() {\n    this.setState({\n      addTransactionToggle: !this.state.addTransactionToggle\n    });\n  }\n  toggleDeleteExpenseModal() {\n    this.setState({\n      deleteExpenseToggle: !this.state.deleteExpenseToggle\n    });\n  }\n  toggleEditExpenseModal() {\n    this.setState({\n      editExpenseToggle: !this.state.editExpenseToggle\n    });\n  }\n  signOut() {\n    localStorage.setItem(\"auth\", false);\n    const history = createBrowserHistory();\n    history.push('/'); //changes address and bottom code changes the rendering\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n  signOutSetState() {\n    this.setState({\n      showLogin: true,\n      showHome: false,\n      showTransactions: false\n    });\n  }\n  submitHandlerDeleteExpense(expenseID) {\n    const idOfDeletedExpense = expenseID;\n    Resources.deleteExpenseEndpoint(expenseID).then(response => {\n      //updating expenses table\n      const updatedExpenses = this.state.expenses.filter(expense => {\n        if (expense.id !== idOfDeletedExpense) {\n          return expense;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n      //console.log(response);\n    });\n    Resources.deleteTransactionsOfExpenseEndpoint(expenseID).then(response => {\n      const updatedTransactions = this.state.selectedTransactions.filter(transaction => {\n        if (transaction.expenseID !== expenseID) {\n          return transaction;\n        }\n      });\n      this.setState({\n        selectedTransactions: updatedTransactions\n      });\n      //console.log(response)\n    });\n  }\n  submitHandlerEditExpense(e) {\n    e.preventDefault();\n    const expenseID = this.state.editDropDownSelection;\n    const newExpense = e.target[1].value;\n    const newBudget = parseFloat(e.target[2].value);\n    const updatedData = {\n      expense: newExpense,\n      budget: newBudget\n    };\n    Resources.editExpenseEndpoint(expenseID, updatedData).then(response => {\n      // console.log(response);\n\n      //updating expenses\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id !== expenseID) {\n          return element;\n        } else {\n          element.expense = newExpense;\n          element.budget = newBudget;\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses,\n        oldExpenseName: updatedData.expense\n      });\n      e.target[1].value = null;\n      e.target[2].value = null;\n    }).catch(error => {\n      // console.log(error)\n    });\n  }\n  initEditDropDown() {\n    let placeholder;\n\n    //if list is empty show \"no expenses to change\" in new budget input\n    if (this.state.expenses.length !== 0) {\n      placeholder = this.state.expenses[0].expense;\n      let lowestIndexExpense = -1;\n\n      //find element with lowest id \n      {\n        this.state.expenses.map(element => {\n          if (lowestIndexExpense === -1) {\n            lowestIndexExpense = element.id;\n          } else {\n            if (element.id < lowestIndexExpense) {\n              lowestIndexExpense = element.id;\n            }\n          }\n        });\n      }\n      let elementWithSmallestIndex;\n      {\n        this.state.expenses.map(element => {\n          if (element.id === lowestIndexExpense) {\n            elementWithSmallestIndex = element.id;\n          }\n        });\n      }\n\n      //setting first element as default on page load\n      this.setState({\n        editDropDownSelection: elementWithSmallestIndex\n      }, function () {\n        {\n          this.state.expenses.map(expense => {\n            if (expense.id === elementWithSmallestIndex) {\n              this.setState({\n                oldExpenseName: placeholder\n              });\n            }\n          });\n        }\n        ;\n      });\n    } else {\n      this.setState({\n        oldExpenseName: \"No Expenses to Change\"\n      });\n    }\n  }\n  secondaryInitEdit() {\n    //used when user opens edit modal\n    if (this.state.oldExpenseName === \"No Expenses to Change\") {\n      if (this.state.expenses.length !== 0) {\n        this.setState({\n          oldExpenseName: this.state.expenses[0].expense\n        });\n      }\n    } else if (this.state.expenses.length === 0) {\n      this.setState({\n        oldExpenseName: \"No Expenses to Change\"\n      });\n    }\n  }\n  handleEditDropDownChange(e) {\n    //on Change of selection dropdown, update editDropDownSelection in state\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      editDropDownSelection: selectedElement\n    }, function () {\n      {\n        this.state.expenses.map(expense => {\n          //changing placeholder on dropdown change\n          if (expense.id === selectedElement) {\n            this.setState({\n              oldExpenseName: expense.expense\n            });\n          }\n        });\n      }\n    });\n  }\n  initTransactionDropDown() {\n    let lowestIndexExpense = -1;\n    {\n      this.state.expenses.map(element => {\n        if (lowestIndexExpense === -1) {\n          lowestIndexExpense = element.id;\n        } else {\n          if (element.id < lowestIndexExpense) {\n            lowestIndexExpense = element.id;\n          }\n        }\n      });\n    }\n    let elementWithSmallestIndex;\n    {\n      this.state.expenses.map(element => {\n        if (element.id === lowestIndexExpense) {\n          elementWithSmallestIndex = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: elementWithSmallestIndex\n    });\n  }\n  handleTransactionDropDownChange(e) {\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: selectedElement\n    });\n  }\n  handleSelectedMonthDropDownChange(e) {\n    let selectedElement = 0;\n    if (e.target.value === \"-1\") {\n      return;\n    } else {\n      //selectedElement is now month number\n      {\n        this.state.listOfMonths.map(element => {\n          if (element.monthNum === parseInt(e.target.value)) {\n            selectedElement = element.monthNum;\n          }\n        });\n      }\n      this.setState({\n        selectedMonth: selectedElement\n      }, function () {\n        //check to see if user on current date\n        if (parseInt(this.state.selectedYear) === this.state.today.getFullYear() && this.state.selectedMonth === this.state.today.getMonth() + 1) {\n          this.setState({\n            userOnCurrentDate: true\n          });\n        } else {\n          this.setState({\n            userOnCurrentDate: false\n          });\n        }\n        const updatedMonth = this.state.selectedMonth;\n        const updatedYear = this.state.selectedYear;\n        Resources.transactionsForSelectedDateEndpoint(updatedMonth, updatedYear).then(response => {\n          const updatedTransactions = response.data;\n\n          //setting spent vals to 0\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          this.state.expenses.map(expense => {\n            updatedMap.set(expense.id, 0.0);\n          });\n          this.setState({\n            selectedTransactions: updatedTransactions,\n            spentValsForAllExpenses: updatedMap\n          }, function () {\n            //adding new spentvals for my expenses on account of date change\n            let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n            this.state.selectedTransactions.map(transaction => {\n              const associatedExpenseID = transaction.expenseID;\n              const totalSpentVal = changingSpentMap.get(associatedExpenseID);\n              const spent = transaction.spent;\n              changingSpentMap.set(associatedExpenseID, totalSpentVal + spent);\n            });\n            this.setState({\n              spentValsForAllExpenses: changingSpentMap\n            });\n          });\n        });\n      });\n    }\n  }\n  handleSelectedYearDropDownChange(e) {\n    let selectedElement = 0;\n    if (e.target.value === \"-1\") {\n      return;\n    } else {\n      selectedElement = e.target.value;\n      this.setState({\n        selectedYear: selectedElement\n      }, function () {\n        //check to see if user on current date\n        if (parseInt(this.state.selectedYear) === this.state.today.getFullYear() && this.state.selectedMonth === this.state.today.getMonth() + 1) {\n          this.setState({\n            userOnCurrentDate: true\n          });\n        } else {\n          this.setState({\n            userOnCurrentDate: false\n          });\n        }\n        const updatedMonth = this.state.selectedMonth;\n        const updatedYear = this.state.selectedYear;\n        Resources.transactionsForSelectedDateEndpoint(updatedMonth, updatedYear).then(response => {\n          const updatedTransactions = response.data;\n          //setting spent vals to 0\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          this.state.expenses.map(expense => {\n            updatedMap.set(expense.id, 0.0);\n          });\n          this.setState({\n            selectedTransactions: updatedTransactions,\n            spentValsForAllExpenses: updatedMap\n          }, function () {\n            //setting new spent vals for expenses on account of date change\n            let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n            this.state.selectedTransactions.map(transaction => {\n              const expenseSpentVal = changingSpentMap.get(transaction.expenseID);\n              changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n            });\n            this.setState({\n              spentValsForAllExpenses: changingSpentMap\n            });\n          });\n        });\n      });\n    }\n  }\n  renderTableData() {\n    let sumOfBudget = 0;\n    let sumOfSpent = 0;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.state.expenses.map(element => {\n        const amountSpent = parseFloat(this.state.spentValsForAllExpenses.get(element.id));\n        sumOfBudget += element.budget;\n        sumOfSpent += amountSpent;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: element.expense\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", element.budget.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 476,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [\"$\", amountSpent.toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            id: element.budget - amountSpent >= 0 ? \"remainingPos2\" : \"remainingNeg2\",\n            children: [\"$\", (element.budget - amountSpent).toFixed(2)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                this.submitHandlerDeleteExpense(element.id);\n                this.toggleDeleteExpenseModal();\n              },\n              id: \"trashCan\",\n              children: /*#__PURE__*/_jsxDEV(Trash, {\n                color: \"crimson\",\n                size: \"2em\",\n                onClick: e => {\n                  this.submitHandlerDeleteExpense(element.id);\n                  this.toggleDeleteExpenseModal();\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 479,\n                columnNumber: 146\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 21\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          children: \"TOTAL : \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          children: [\"$\", sumOfBudget.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          children: [\"$\", sumOfSpent.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"bold\",\n          id: sumOfBudget - sumOfSpent >= 0 ? \"remainingPos\" : \"remainingNeg\",\n          children: [\"$\", (sumOfBudget - sumOfSpent).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 489,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n  renderHome() {\n    const pathName = window.location.pathname;\n    const username = pathName.split('/')[2];\n    if (localStorage.getItem(\"auth\") === \"authenticated\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: window.innerWidth >= 740 ? 'App-header' : 'App-header-phone',\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          id: \"myLogo\",\n          children: \"Bijou Budget\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 507,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: window.innerWidth >= 740 ? 'credentials' : 'phoneLogoAndCreds',\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            id: window.innerWidth >= 740 ? 'signedInUser' : 'phoneSignedInUser',\n            children: \"Signed In User: \" + username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: window.innerWidth >= 740 ? 'signOut-button' : 'phoneSignOutButton',\n            onClick: () => {\n              this.signOutSetState();\n            },\n            children: \"Sign Out\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"navContainer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"navButtons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: this.state.userOnCurrentDate ? false : true,\n              className: \"button-25\",\n              onClick: () => {\n                this.toggleAddExpenseModal();\n              },\n              children: \"Add Expense\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: this.state.userOnCurrentDate ? false : true,\n              className: \"button-25\",\n              onClick: () => {\n                this.toggleAddTransactionModal();\n              },\n              children: \"Add Transaction\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              disabled: this.state.userOnCurrentDate ? false : true,\n              className: \"button-25\",\n              onClick: () => {\n                this.toggleEditExpenseModal();\n                this.secondaryInitEdit();\n              },\n              children: \"Edit Expense\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 518,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button-25\",\n              id: \"trans-button\",\n              onClick: () => {\n                this.setState({\n                  showHome: false,\n                  showTransactions: true\n                });\n              },\n              children: \"Show Transactions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"homeContent\",\n          children: [/*#__PURE__*/_jsxDEV(AddExpenseForm, {\n            handleClose: this.toggleAddExpenseModal,\n            show: this.state.addExpenseToggle,\n            submitHandler: this.submitHandlerAddExpense\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(EditExpenseForm, {\n            myList: this.state.expenses,\n            handleClose: this.toggleEditExpenseModal,\n            handleChange: this.handleEditDropDownChange,\n            show: this.state.editExpenseToggle,\n            submitHandler: this.submitHandlerEditExpense,\n            oldExpenseName: this.state.oldExpenseName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n            myList: this.state.expenses,\n            handleClose: this.toggleAddTransactionModal,\n            show: this.state.addTransactionToggle,\n            submitHandler: this.submitHandlerAddTransaction,\n            handleChange: this.handleTransactionDropDownChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-flex\",\n            id: this.state.addExpenseToggle || this.state.addTransactionToggle || this.state.editExpenseToggle ? \"dateDropDownZ\" : \"dateDropDown\",\n            children: [/*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"selectColor\",\n              value: this.state.selectedMonth,\n              onChange: this.handleSelectedMonthDropDownChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                disabled: true,\n                value: \"-1\",\n                children: \"--Month--\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 33\n              }, this), this.state.listOfMonths.map(element => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: element.monthNum,\n                children: element.month\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 37\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"selectColor\",\n              onChange: this.handleSelectedYearDropDownChange,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                disabled: true,\n                value: \"-1\",\n                children: \"--Year--\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 539,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 4,\n                children: this.state.today.getFullYear() - 4\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 3,\n                children: this.state.today.getFullYear() - 3\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 541,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 2,\n                children: this.state.today.getFullYear() - 2\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: this.state.today.getFullYear() - 1,\n                children: this.state.today.getFullYear() - 1\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                selected: true,\n                value: this.state.today.getFullYear(),\n                children: this.state.today.getFullYear()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 544,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"expense-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Expense\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 552,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Budget\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 553,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Spent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 554,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Net\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 555,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 551,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 550,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.renderTableData()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"You need to sign in to access this page.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-flex\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button-25\",\n            id: \"modalButtons\",\n            onClick: () => this.signOutSetState(),\n            children: \"Sign in\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true);\n    }\n  }\n  renderTransactions() {\n    const pathName = window.location.pathname;\n    const username = pathName.split('/')[2];\n    const history = createBrowserHistory();\n    history.push('/transactionsTable/' + username); //changes address and bottom code changes the rendering\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Transactions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n  componentDidMount() {\n    Resources.getAllExpensesEndpoint() // gets all expenses from mysql\n    .then(response => {\n      const pathName = window.location.pathname;\n      const username = pathName.split('/')[2];\n\n      //filter out users expenses\n      let userExpenses = response.data.filter(expense => {\n        if (expense.userName === username) {\n          return expense;\n        }\n      });\n      this.setState({\n        expenses: userExpenses\n      });\n      const today = new Date();\n      const todayMonth = today.getMonth() + 1;\n      const todayYear = today.getFullYear();\n      this.setState({\n        selectedMonth: todayMonth,\n        selectedYear: todayYear\n      }, function () {\n        Resources.transactionsForSelectedDateEndpoint(todayMonth, todayYear) //gets transactions for current month and year\n        .then(response => {\n          //filter out users transactions\n          let userTransactions = response.data.filter(transaction => {\n            if (transaction.userName === username) {\n              return transaction;\n            }\n          });\n          this.setState({\n            selectedTransactions: userTransactions\n          });\n\n          //set spent vals to 0\n          let updatedSpentValsForAllExpenses = new Map(); // rename to better name\n          this.state.expenses.map(expense => {\n            updatedSpentValsForAllExpenses.set(expense.id, 0.0);\n          });\n          this.setState({\n            spentValsForAllExpenses: updatedSpentValsForAllExpenses\n          }, function () {\n            let updatedMap = new Map(this.state.spentValsForAllExpenses);\n            this.state.selectedTransactions.map(transaction => {\n              const totalSpentVal = updatedMap.get(transaction.expenseID);\n              const spent = transaction.spent;\n              updatedMap.set(transaction.expenseID, totalSpentVal + spent);\n              this.setState({\n                spentValsForAllExpenses: updatedMap\n              });\n            });\n            this.initEditDropDown();\n            this.initTransactionDropDown();\n          });\n        });\n      });\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [this.state.showHome && this.renderHome(), this.state.showTransactions && this.renderTransactions(), this.state.showLogin && this.signOut()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 649,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }\n}","map":{"version":3,"names":["React","AddExpenseForm","EditExpenseForm","AddTransactionForm","Transactions","Moment","createBrowserHistory","Login","Trash","Resources","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","Component","constructor","props","submitHandlerAddExpense","e","preventDefault","pathName","window","location","pathname","username","split","expense","target","value","budget","addExpenseEndpoint","then","response","newId","data","floatBudget","parseFloat","state","expenses","length","setState","transactionDropDownSelection","editDropDownSelection","newExpenseObject","id","spent","remaining","userName","updatedMap","Map","spentValsForAllExpenses","set","catch","error","submitHandlerAddTransaction","today","format","expenseTotalSpent","expenseID","payee","filter","element","addTransactionEndpoint","updatedSpentData","updateSpentEndpoint","map","totalSpent","get","updatedExpenses","addExpenseToggle","addTransactionToggle","deleteExpenseToggle","deleteConfirmVal","editExpenseToggle","selectedTransactions","listOfMonths","month","monthNum","selectedMonth","selectedYear","Date","showHome","showTransactions","showLogin","userOnCurrentDate","oldExpenseName","toggleAddExpenseModal","bind","toggleAddTransactionModal","toggleDeleteExpenseModal","toggleEditExpenseModal","handleEditDropDownChange","handleTransactionDropDownChange","handleSelectedMonthDropDownChange","handleSelectedYearDropDownChange","initEditDropDown","secondaryInitEdit","initTransactionDropDown","submitHandlerEditExpense","signOut","signOutSetState","localStorage","setItem","history","push","children","fileName","_jsxFileName","lineNumber","columnNumber","submitHandlerDeleteExpense","idOfDeletedExpense","deleteExpenseEndpoint","deleteTransactionsOfExpenseEndpoint","updatedTransactions","transaction","newExpense","newBudget","updatedData","editExpenseEndpoint","placeholder","lowestIndexExpense","elementWithSmallestIndex","selectedElement","parseInt","getFullYear","getMonth","updatedMonth","updatedYear","transactionsForSelectedDateEndpoint","changingSpentMap","associatedExpenseID","totalSpentVal","expenseSpentVal","renderTableData","sumOfBudget","sumOfSpent","amountSpent","toFixed","onClick","color","size","className","renderHome","getItem","innerWidth","disabled","handleClose","show","submitHandler","myList","handleChange","onChange","selected","renderTransactions","componentDidMount","getAllExpensesEndpoint","userExpenses","todayMonth","todayYear","userTransactions","updatedSpentValsForAllExpenses","render"],"sources":["/Users/jason/Desktop/Budget-Tracker/react/src/Components/Home.js"],"sourcesContent":["import React from 'react';\nimport '../App.css';\nimport AddExpenseForm from './AddExpenseForm';\nimport EditExpenseForm from './EditExpenseForm';\nimport AddTransactionForm from './AddTransactionForm';\nimport Transactions from './Transactions';\nimport Moment from 'moment';\nimport {createBrowserHistory} from \"history\";\nimport Login from './Login';\nimport { Trash } from 'react-bootstrap-icons';\nimport * as Resources from '../Resources/Resources';\n\nexport default class Home extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            \n            expenses: [],\n            editDropDownSelection:0,\n            transactionDropDownSelection:0,\n\n            addExpenseToggle: false,\n            addTransactionToggle: false,\n            deleteExpenseToggle: false,\n            deleteConfirmVal: false,\n            editExpenseToggle: false,\n            selectedTransactions: [],\n            listOfMonths: [{month:\"January\", monthNum: 1}, {month:\"February\", monthNum: 2}, {month:\"March\", monthNum: 3}, {month:\"April\", monthNum: 4}, {month:\"May\", monthNum: 5}, {month:\"June\", monthNum: 6}, {month:\"July\", monthNum: 7}, {month:\"August\", monthNum: 8}, {month:\"September\", monthNum: 9}, {month:\"October\", monthNum: 10}, {month:\"November\", monthNum: 11}, {month:\"December\", monthNum: 12}],\n            selectedMonth: -1,\n            selectedYear: -1,\n            today: new Date(),\n            spentValsForAllExpenses: new Map(),\n            showHome: true,\n            showTransactions: false,\n            showLogin: false,\n            userOnCurrentDate: true,\n            oldExpenseName: ''\n        };\n\n        this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\n        this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this);\n        this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\n        this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\n        this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\n        this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\n        this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\n        this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\n        this.initEditDropDown = this.initEditDropDown.bind(this);\n        this.secondaryInitEdit = this.secondaryInitEdit.bind(this);\n        this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\n        this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this);\n        this.signOut = this.signOut.bind(this);\n        this.signOutSetState = this.signOutSetState.bind(this);\n        \n    }\n\n    toggleAddExpenseModal() {\n        this.setState({addExpenseToggle : !this.state.addExpenseToggle});\n    }\n\n    toggleAddTransactionModal() {\n        this.setState({addTransactionToggle: !this.state.addTransactionToggle});\n    }\n\n    toggleDeleteExpenseModal() {\n        this.setState({deleteExpenseToggle : !this.state.deleteExpenseToggle});\n    }\n    \n    toggleEditExpenseModal() {\n        this.setState({editExpenseToggle: !this.state.editExpenseToggle});\n    }\n\n    signOut() {\n        localStorage.setItem(\"auth\", false);\n\n        const history = createBrowserHistory();\n        history.push('/');   //changes address and bottom code changes the rendering\n        return (<>\n            <Login />\n        </>)\n    }\n\n    signOutSetState() {\n        this.setState({showLogin: true, showHome: false, showTransactions: false});\n    }\n\n    submitHandlerAddExpense = e => {\n        e.preventDefault();\n\n        const pathName = window.location.pathname;\n        const username = pathName.split('/')[2];\n        const expense = e.target[0].value;\n        const budget = e.target[1].value;\n\n        Resources.addExpenseEndpoint(expense, budget, username)\n        .then( response => {\n            \n            const newId = response.data;\n            const floatBudget = parseFloat(e.target[1].value);\n\n            if (this.state.expenses.length === 0) {\n                this.setState({transactionDropDownSelection: newId, editDropDownSelection: newId});\n            }\n            \n            const newExpenseObject = {\n                id: newId,\n                expense: expense,\n                budget: floatBudget,\n                spent: 0.0,\n                remaining: floatBudget,\n                userName: username\n            }\n            \n            this.setState({expenses: [...this.state.expenses, newExpenseObject]}, function() {\n                let updatedMap = new Map(this.state.spentValsForAllExpenses);\n                updatedMap.set(newExpenseObject.id, 0.0);\n                this.setState({spentValsForAllExpenses: updatedMap});\n                e.target[0].value = null;\n                e.target[1].value = null;\n            });\n        }).catch(error => {\n            //console.log(error);\n        });\n    }\n\n    submitHandlerAddTransaction = e => {\n        e.preventDefault();\n\n        const pathName = window.location.pathname;\n        const username = pathName.split('/')[2];\n        const today = Moment(this.state.today).format('YYYY-MM-DD');\n        \n        let expenseTotalSpent; \n        const expenseID = this.state.transactionDropDownSelection;\n        const payee = e.target[1].value;\n        const spent = parseFloat(e.target[2].value);\n        \n        this.state.expenses.filter((element) => {\n            if (element.id === expenseID) {\n                expenseTotalSpent = element.spent;\n            }\n        });\n\n        Resources.addTransactionEndpoint(expenseID, payee, spent, today, username)\n        .then(response => {\n            //console.log(response);\n        }).catch(error => {\n            //console.log(error);\n        });\n\n        const updatedSpentData = {\n            spent: expenseTotalSpent + spent\n        }\n\n        Resources.updateSpentEndpoint(expenseID, updatedSpentData)\n        .then(response => {\n            //console.log(response);\n        }).catch(error => {\n            //console.log(error);\n        })\n        \n        let updatedMap = new Map(this.state.spentValsForAllExpenses);\n        this.state.expenses.map((expense) => {\n            if (expense.id === expenseID) {\n                const totalSpent = updatedMap.get(expense.id);\n                updatedMap.set(expense.id, totalSpent + spent);\n            }\n        });\n\n        const updatedExpenses = this.state.expenses.filter( (element) => {\n            if (element.id === expenseID) {\n                element.spent = expenseTotalSpent + spent;\n                return element;\n            }\n            else {\n                return element;\n            }\n        });\n\n        this.setState({expenses: updatedExpenses, spentValsForAllExpenses: updatedMap})\n        e.target[1].value = null;\n        e.target[2].value = null;\n    }\n\n    submitHandlerDeleteExpense (expenseID) {\n\n        const idOfDeletedExpense = expenseID;\n        Resources.deleteExpenseEndpoint(expenseID)\n        .then( (response) => {\n\n            //updating expenses table\n            const updatedExpenses = this.state.expenses.filter((expense) => {\n                if (expense.id !== idOfDeletedExpense) {\n                    return expense;\n                }\n            });\n            this.setState({expenses: updatedExpenses});\n            //console.log(response);\n        });\n\n        Resources.deleteTransactionsOfExpenseEndpoint(expenseID)\n        .then(response => {\n                \n            const updatedTransactions = this.state.selectedTransactions.filter((transaction) => {\n                if (transaction.expenseID !== expenseID) {\n                    return transaction; \n                }\n            });\n            this.setState({selectedTransactions: updatedTransactions});\n            //console.log(response)\n        });\n    }\n\n    submitHandlerEditExpense (e) {\n        e.preventDefault();\n\n        const expenseID = this.state.editDropDownSelection;\n        const newExpense = e.target[1].value;\n        const newBudget = parseFloat(e.target[2].value);\n\n        const updatedData = {\n            expense: newExpense,\n            budget: newBudget\n        }\n\n        Resources.editExpenseEndpoint(expenseID, updatedData)\n        .then(response => {\n            // console.log(response);\n            \n            //updating expenses\n            const updatedExpenses = this.state.expenses.filter((element) => {\n                if (element.id !== expenseID) {\n                    return element;\n                }\n                else{\n                    element.expense = newExpense;\n                    element.budget = newBudget;\n                    return element;\n                }\n                \n            })\n            this.setState({expenses: updatedExpenses, oldExpenseName: updatedData.expense});\n            \n            e.target[1].value = null;\n            e.target[2].value = null;\n        }).catch(error => {\n            // console.log(error)\n        })\n\n        \n    }\n\n    initEditDropDown() {\n        let placeholder;\n        \n        //if list is empty show \"no expenses to change\" in new budget input\n        if (this.state.expenses.length !== 0) {\n            placeholder= this.state.expenses[0].expense;\n            let lowestIndexExpense = -1;\n\n            //find element with lowest id \n            {this.state.expenses.map((element) => {\n                if (lowestIndexExpense === -1) {\n                    lowestIndexExpense = element.id;\n                }\n                else {\n                    if (element.id < lowestIndexExpense) {\n                        lowestIndexExpense = element.id;\n                    }\n                }\n            })}\n            \n            let elementWithSmallestIndex;\n            {this.state.expenses.map((element) => {\n                if (element.id === lowestIndexExpense) {\n                    elementWithSmallestIndex = element.id;\n                }\n            })}\n            \n            //setting first element as default on page load\n            this.setState({editDropDownSelection: elementWithSmallestIndex}, function() {\n                {this.state.expenses.map((expense) => {\n                    if (expense.id === elementWithSmallestIndex) {\n                        this.setState({oldExpenseName: placeholder});\n                    }\n                })};\n            });\n        }\n        else {\n            this.setState({oldExpenseName: \"No Expenses to Change\"});\n        }  \n    }\n\n    secondaryInitEdit() {\n        //used when user opens edit modal\n        if (this.state.oldExpenseName === \"No Expenses to Change\") {\n            if (this.state.expenses.length !== 0) {\n                this.setState({oldExpenseName: this.state.expenses[0].expense});\n            }\n        }\n        else if (this.state.expenses.length === 0) {\n            this.setState({oldExpenseName: \"No Expenses to Change\"});\n        }\n    }\n\n    handleEditDropDownChange(e) {\n        //on Change of selection dropdown, update editDropDownSelection in state\n        let selectedElement=0;\n        {this.state.expenses.map((element) => {\n            if (element.expense === e.target.value) {\n                selectedElement = element.id;\n            }\n        })}\n        this.setState({ editDropDownSelection: selectedElement }, function() {\n            {this.state.expenses.map((expense) => {\n                //changing placeholder on dropdown change\n                if (expense.id === selectedElement) {\n                    this.setState({oldExpenseName: expense.expense});\n                }\n            })}\n        });\n    }\n\n    initTransactionDropDown() {\n        let lowestIndexExpense = -1;\n        {this.state.expenses.map((element) => {\n            if (lowestIndexExpense === -1) {\n                lowestIndexExpense = element.id;\n            }\n            else {\n                if (element.id < lowestIndexExpense) {\n                    lowestIndexExpense = element.id;\n                }\n            }\n        })}\n        \n        let elementWithSmallestIndex;\n        {this.state.expenses.map((element) => {\n            if (element.id === lowestIndexExpense) {\n                elementWithSmallestIndex = element.id;\n            }\n        })}\n\n        this.setState({transactionDropDownSelection: elementWithSmallestIndex});\n    }\n\n    handleTransactionDropDownChange(e) {\n        let selectedElement=0;\n        {this.state.expenses.map((element) => {\n            if (element.expense === e.target.value) {\n                selectedElement = element.id;\n            }\n        })}\n        this.setState({ transactionDropDownSelection: selectedElement });\n    }\n\n    handleSelectedMonthDropDownChange(e) {\n        let selectedElement=0;\n        \n        if (e.target.value === \"-1\") {\n            return;\n        }\n        else{\n            //selectedElement is now month number\n            {this.state.listOfMonths.map((element) => {\n                if (element.monthNum === parseInt(e.target.value)) {\n                    selectedElement = element.monthNum;\n                }\n            })}\n            this.setState({selectedMonth: selectedElement}, function () {\n\n                //check to see if user on current date\n                if (parseInt(this.state.selectedYear) === this.state.today.getFullYear() && this.state.selectedMonth === this.state.today.getMonth()+1) {\n                    this.setState({userOnCurrentDate: true});\n                }\n                else {\n                    this.setState({userOnCurrentDate: false});\n                }\n\n                const updatedMonth = this.state.selectedMonth;\n                const updatedYear = this.state.selectedYear;\n\n                Resources.transactionsForSelectedDateEndpoint(updatedMonth, updatedYear)\n                .then(response => {\n                    \n                    const updatedTransactions = response.data;\n                    \n                    //setting spent vals to 0\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\n                    this.state.expenses.map((expense) => {\n                        updatedMap.set(expense.id, 0.0);\n                    })\n                    \n\n                    this.setState({selectedTransactions: updatedTransactions, spentValsForAllExpenses: updatedMap}, function(){\n                        //adding new spentvals for my expenses on account of date change\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n                        this.state.selectedTransactions.map((transaction) => {\n                            \n                            const associatedExpenseID = transaction.expenseID;\n                            const totalSpentVal = changingSpentMap.get(associatedExpenseID);\n                            const spent = transaction.spent;\n                            \n                            changingSpentMap.set(associatedExpenseID, totalSpentVal + spent);\n                \n                        });\n                        this.setState({spentValsForAllExpenses: changingSpentMap});\n                    })\n                })\n            });\n        }\n    }\n\n    handleSelectedYearDropDownChange(e) {\n        let selectedElement=0;\n        \n        if (e.target.value === \"-1\") {\n            return;\n        }\n        else{\n            selectedElement = e.target.value;\n            \n            this.setState({selectedYear: selectedElement}, function () {\n                \n                //check to see if user on current date\n                if (parseInt(this.state.selectedYear) === this.state.today.getFullYear() && this.state.selectedMonth === this.state.today.getMonth()+1) {\n                    this.setState({userOnCurrentDate: true});\n                }\n                else {\n                    this.setState({userOnCurrentDate: false});\n                }\n\n                const updatedMonth = this.state.selectedMonth;\n                const updatedYear = this.state.selectedYear;\n\n                Resources.transactionsForSelectedDateEndpoint(updatedMonth, updatedYear)\n                .then(response => {\n                    \n                    const updatedTransactions = response.data;\n                    //setting spent vals to 0\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);                 \n                    this.state.expenses.map((expense) => {\n                        updatedMap.set(expense.id, 0.0);\n                    })\n        \n                    this.setState({selectedTransactions: updatedTransactions, spentValsForAllExpenses: updatedMap}, function() {\n                        //setting new spent vals for expenses on account of date change\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n                        this.state.selectedTransactions.map((transaction) => {\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID);\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n                \n                        })\n                        this.setState({spentValsForAllExpenses: changingSpentMap});\n                    });                \n                })\n            });\n        }\n    }\n\n    renderTableData() {\n\n        let sumOfBudget = 0;\n        let sumOfSpent = 0;\n\n        return (<>\n            {this.state.expenses.map((element) => {\n            \n                const amountSpent = parseFloat(this.state.spentValsForAllExpenses.get(element.id));\n                sumOfBudget += element.budget;\n                sumOfSpent += amountSpent;\n                \n                return (\n                    <tr>\n                        <td>{element.expense}</td>\n                        <td>${(element.budget).toFixed(2)}</td>\n                        <td>${(amountSpent).toFixed(2)}</td>\n                        <td id={(element.budget-amountSpent) >= 0 ? \"remainingPos2\":\"remainingNeg2\"}>${(element.budget-amountSpent).toFixed(2)}</td>\n                        <td><button onClick={(e) => {this.submitHandlerDeleteExpense(element.id);this.toggleDeleteExpenseModal()}} id='trashCan'><Trash color=\"crimson\" size={\"2em\"} onClick={(e) => {this.submitHandlerDeleteExpense(element.id);this.toggleDeleteExpenseModal()}}/></button></td>\n                    </tr>\n                )\n\n            })}\n            <tr>\n                <td className='bold'>TOTAL : </td>\n                <td className='bold'>${sumOfBudget.toFixed(2)}</td>\n                <td className='bold'>${sumOfSpent.toFixed(2)}</td>\n                <td className='bold' id={(sumOfBudget-sumOfSpent) >= 0 ? \"remainingPos\":\"remainingNeg\"}>${(sumOfBudget-sumOfSpent).toFixed(2)}</td>\n                <td></td>\n            </tr>\n\n        </>)\n        \n    }\n\n    renderHome() {\n        const pathName = window.location.pathname;\n        const username = pathName.split('/')[2];\n\n        if (localStorage.getItem(\"auth\") === \"authenticated\") {\n        \n            return (\n                \n                <div className={window.innerWidth >= 740 ? 'App-header':'App-header-phone'}>\n                    \n                    \n                    <h1 id='myLogo'>Bijou Budget</h1>\n                    \n                    <div id={window.innerWidth >= 740 ? 'credentials':'phoneLogoAndCreds'}>\n                        <p id={window.innerWidth >= 740 ? 'signedInUser':'phoneSignedInUser'}>{\"Signed In User: \" + username}</p>\n                        <button id={window.innerWidth >= 740 ? 'signOut-button':'phoneSignOutButton'} onClick={() => {this.signOutSetState()}}>Sign Out</button>\n                    </div>\n                        \n                    <div id=\"navContainer\">\n                        <div className='navButtons'>\n                            <button disabled={this.state.userOnCurrentDate ? false : true} className='button-25' onClick={ () => {this.toggleAddExpenseModal();}}>Add Expense</button>\n                            <button disabled={this.state.userOnCurrentDate ? false : true} className='button-25' onClick={ () => {this.toggleAddTransactionModal();}}>Add Transaction</button>\n                            <button disabled={this.state.userOnCurrentDate ? false : true} className='button-25' onClick={ () => {this.toggleEditExpenseModal();this.secondaryInitEdit();}}>Edit Expense</button>\n                            <button className='button-25' id='trans-button' onClick={() => {this.setState({showHome: false, showTransactions:true})}}>Show Transactions</button>\n                        </div>\n                    </div>\n\n                    <div id='homeContent'>\n                    \n                        <AddExpenseForm  handleClose={this.toggleAddExpenseModal} show={this.state.addExpenseToggle} submitHandler={this.submitHandlerAddExpense}/>\n                        <EditExpenseForm myList={this.state.expenses} handleClose={this.toggleEditExpenseModal} handleChange={this.handleEditDropDownChange} show={this.state.editExpenseToggle} submitHandler={this.submitHandlerEditExpense} oldExpenseName={this.state.oldExpenseName}/>\n                        <AddTransactionForm  myList={this.state.expenses} handleClose={this.toggleAddTransactionModal} show={this.state.addTransactionToggle} submitHandler={this.submitHandlerAddTransaction} handleChange={this.handleTransactionDropDownChange}/>\n                        \n                        <div className=\"dropdown-flex\" id={(this.state.addExpenseToggle || this.state.addTransactionToggle || this.state.editExpenseToggle) ? \"dateDropDownZ\":\"dateDropDown\"}>\n                            <select id='selectColor' value={this.state.selectedMonth} onChange={this.handleSelectedMonthDropDownChange}>\n                                <option disabled value=\"-1\">--Month--</option>\n                                {\n                                this.state.listOfMonths.map((element) => (\n                                    <option value={element.monthNum}>{element.month}</option>\n                                ))}\n                            </select>\n\n                            <select id='selectColor' onChange={this.handleSelectedYearDropDownChange}>\n                                <option disabled value=\"-1\">--Year--</option>\n                                <option value={this.state.today.getFullYear()-4}>{this.state.today.getFullYear()-4}</option>\n                                <option value={this.state.today.getFullYear()-3}>{this.state.today.getFullYear()-3}</option>\n                                <option value={this.state.today.getFullYear()-2}>{this.state.today.getFullYear()-2}</option>\n                                <option value={this.state.today.getFullYear()-1}>{this.state.today.getFullYear()-1}</option>\n                                <option selected value={this.state.today.getFullYear()}>{this.state.today.getFullYear()}</option>\n                            </select> \n                        </div>\n                    </div>\n\n                    <table className=\"expense-table\">\n                            <thead>\n                                <tr>\n                                    <th>Expense</th>\n                                    <th>Budget</th>\n                                    <th>Spent</th>\n                                    <th>Net</th>\n                                    <th></th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {this.renderTableData()}\n                            </tbody>\n                    </table>\n                </div>\n            )\n        }\n        else {\n            \n            return (<>\n\n                <div><h2>You need to sign in to access this page.</h2></div>\n                <div className=\"buttons-flex\"><button className=\"button-25\" id=\"modalButtons\" onClick={() => this.signOutSetState()}>Sign in</button></div>\n                \n            </>)\n        }\n    }\n\n    renderTransactions() {\n        const pathName = window.location.pathname;\n        const username = pathName.split('/')[2];\n        \n        const history = createBrowserHistory();\n        history.push('/transactionsTable/' + username);   //changes address and bottom code changes the rendering\n        return (<>\n            <Transactions />\n        </>)\n    }\n\n    componentDidMount() {\n        \n        Resources.getAllExpensesEndpoint()  // gets all expenses from mysql\n        .then(response => {\n\n            const pathName = window.location.pathname;\n            const username = pathName.split('/')[2];\n\n            //filter out users expenses\n            let userExpenses = (response.data).filter((expense) => {\n                if (expense.userName === username) {\n                    return expense;\n                }\n            })\n            this.setState({expenses: userExpenses});\n\n            const today = new Date();\n            const todayMonth = today.getMonth()+1;\n            const todayYear = today.getFullYear();\n\n            this.setState({selectedMonth: todayMonth, selectedYear: todayYear}, function () { \n                Resources.transactionsForSelectedDateEndpoint(todayMonth, todayYear) //gets transactions for current month and year\n                .then(response => {\n                    \n                    //filter out users transactions\n                    let userTransactions = (response.data).filter((transaction) => {\n                        if (transaction.userName === username) {\n                            return transaction;\n                        }\n                    })\n                    this.setState({selectedTransactions: userTransactions});\n\n                    //set spent vals to 0\n                    let updatedSpentValsForAllExpenses = new Map(); // rename to better name\n                    this.state.expenses.map((expense) => {\n                        updatedSpentValsForAllExpenses.set(expense.id, 0.0);\n            \n                    });\n                    this.setState({spentValsForAllExpenses: updatedSpentValsForAllExpenses}, function() {\n                        let updatedMap = new Map(this.state.spentValsForAllExpenses);\n                        this.state.selectedTransactions.map((transaction) => {\n                            const totalSpentVal = updatedMap.get(transaction.expenseID);\n                            const spent = transaction.spent;\n                            updatedMap.set(transaction.expenseID, totalSpentVal + spent);\n                            this.setState({spentValsForAllExpenses: updatedMap});\n                        })\n                        \n                        this.initEditDropDown();\n                        this.initTransactionDropDown();\n                    });\n                    \n                })\n            });\n    \n            \n        })\n\n    }\n\n    render() {\n        return (<>\n            <div>\n                {this.state.showHome && this.renderHome()}\n                {this.state.showTransactions && this.renderTransactions()}\n                {this.state.showLogin && this.signOut()}\n            </div>\n            \n        </>)\n    }\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AACnB,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAAQC,oBAAoB,QAAO,SAAS;AAC5C,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,KAAK,QAAQ,uBAAuB;AAC7C,OAAO,KAAKC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpD,eAAe,MAAMC,IAAI,SAASd,KAAK,CAACe,SAAS,CAAC;EAC9CC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAAC,KAwEjBC,uBAAuB,GAAGC,CAAC,IAAI;MAC3BA,CAAC,CAACC,cAAc,CAAC,CAAC;MAElB,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACzC,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvC,MAAMC,OAAO,GAAGR,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK;MACjC,MAAMC,MAAM,GAAGX,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK;MAEhCpB,SAAS,CAACsB,kBAAkB,CAACJ,OAAO,EAAEG,MAAM,EAAEL,QAAQ,CAAC,CACtDO,IAAI,CAAEC,QAAQ,IAAI;QAEf,MAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAI;QAC3B,MAAMC,WAAW,GAAGC,UAAU,CAAClB,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC;QAEjD,IAAI,IAAI,CAACS,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;UAClC,IAAI,CAACC,QAAQ,CAAC;YAACC,4BAA4B,EAAER,KAAK;YAAES,qBAAqB,EAAET;UAAK,CAAC,CAAC;QACtF;QAEA,MAAMU,gBAAgB,GAAG;UACrBC,EAAE,EAAEX,KAAK;UACTP,OAAO,EAAEA,OAAO;UAChBG,MAAM,EAAEM,WAAW;UACnBU,KAAK,EAAE,GAAG;UACVC,SAAS,EAAEX,WAAW;UACtBY,QAAQ,EAAEvB;QACd,CAAC;QAED,IAAI,CAACgB,QAAQ,CAAC;UAACF,QAAQ,EAAE,CAAC,GAAG,IAAI,CAACD,KAAK,CAACC,QAAQ,EAAEK,gBAAgB;QAAC,CAAC,EAAE,YAAW;UAC7E,IAAIK,UAAU,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACa,uBAAuB,CAAC;UAC5DF,UAAU,CAACG,GAAG,CAACR,gBAAgB,CAACC,EAAE,EAAE,GAAG,CAAC;UACxC,IAAI,CAACJ,QAAQ,CAAC;YAACU,uBAAuB,EAAEF;UAAU,CAAC,CAAC;UACpD9B,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,IAAI;UACxBV,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,IAAI;QAC5B,CAAC,CAAC;MACN,CAAC,CAAC,CAACwB,KAAK,CAACC,KAAK,IAAI;QACd;MAAA,CACH,CAAC;IACN,CAAC;IAAA,KAEDC,2BAA2B,GAAGpC,CAAC,IAAI;MAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;MAElB,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACzC,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACvC,MAAM8B,KAAK,GAAGnD,MAAM,CAAC,IAAI,CAACiC,KAAK,CAACkB,KAAK,CAAC,CAACC,MAAM,CAAC,YAAY,CAAC;MAE3D,IAAIC,iBAAiB;MACrB,MAAMC,SAAS,GAAG,IAAI,CAACrB,KAAK,CAACI,4BAA4B;MACzD,MAAMkB,KAAK,GAAGzC,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK;MAC/B,MAAMiB,KAAK,GAAGT,UAAU,CAAClB,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC;MAE3C,IAAI,CAACS,KAAK,CAACC,QAAQ,CAACsB,MAAM,CAAEC,OAAO,IAAK;QACpC,IAAIA,OAAO,CAACjB,EAAE,KAAKc,SAAS,EAAE;UAC1BD,iBAAiB,GAAGI,OAAO,CAAChB,KAAK;QACrC;MACJ,CAAC,CAAC;MAEFrC,SAAS,CAACsD,sBAAsB,CAACJ,SAAS,EAAEC,KAAK,EAAEd,KAAK,EAAEU,KAAK,EAAE/B,QAAQ,CAAC,CACzEO,IAAI,CAACC,QAAQ,IAAI;QACd;MAAA,CACH,CAAC,CAACoB,KAAK,CAACC,KAAK,IAAI;QACd;MAAA,CACH,CAAC;MAEF,MAAMU,gBAAgB,GAAG;QACrBlB,KAAK,EAAEY,iBAAiB,GAAGZ;MAC/B,CAAC;MAEDrC,SAAS,CAACwD,mBAAmB,CAACN,SAAS,EAAEK,gBAAgB,CAAC,CACzDhC,IAAI,CAACC,QAAQ,IAAI;QACd;MAAA,CACH,CAAC,CAACoB,KAAK,CAACC,KAAK,IAAI;QACd;MAAA,CACH,CAAC;MAEF,IAAIL,UAAU,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACa,uBAAuB,CAAC;MAC5D,IAAI,CAACb,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEvC,OAAO,IAAK;QACjC,IAAIA,OAAO,CAACkB,EAAE,KAAKc,SAAS,EAAE;UAC1B,MAAMQ,UAAU,GAAGlB,UAAU,CAACmB,GAAG,CAACzC,OAAO,CAACkB,EAAE,CAAC;UAC7CI,UAAU,CAACG,GAAG,CAACzB,OAAO,CAACkB,EAAE,EAAEsB,UAAU,GAAGrB,KAAK,CAAC;QAClD;MACJ,CAAC,CAAC;MAEF,MAAMuB,eAAe,GAAG,IAAI,CAAC/B,KAAK,CAACC,QAAQ,CAACsB,MAAM,CAAGC,OAAO,IAAK;QAC7D,IAAIA,OAAO,CAACjB,EAAE,KAAKc,SAAS,EAAE;UAC1BG,OAAO,CAAChB,KAAK,GAAGY,iBAAiB,GAAGZ,KAAK;UACzC,OAAOgB,OAAO;QAClB,CAAC,MACI;UACD,OAAOA,OAAO;QAClB;MACJ,CAAC,CAAC;MAEF,IAAI,CAACrB,QAAQ,CAAC;QAACF,QAAQ,EAAE8B,eAAe;QAAElB,uBAAuB,EAAEF;MAAU,CAAC,CAAC;MAC/E9B,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,IAAI;MACxBV,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,IAAI;IAC5B,CAAC;IAvKG,IAAI,CAACS,KAAK,GAAG;MAETC,QAAQ,EAAE,EAAE;MACZI,qBAAqB,EAAC,CAAC;MACvBD,4BAA4B,EAAC,CAAC;MAE9B4B,gBAAgB,EAAE,KAAK;MACvBC,oBAAoB,EAAE,KAAK;MAC3BC,mBAAmB,EAAE,KAAK;MAC1BC,gBAAgB,EAAE,KAAK;MACvBC,iBAAiB,EAAE,KAAK;MACxBC,oBAAoB,EAAE,EAAE;MACxBC,YAAY,EAAE,CAAC;QAACC,KAAK,EAAC,SAAS;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,UAAU;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,OAAO;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,OAAO;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,KAAK;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,MAAM;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,MAAM;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,QAAQ;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,WAAW;QAAEC,QAAQ,EAAE;MAAC,CAAC,EAAE;QAACD,KAAK,EAAC,SAAS;QAAEC,QAAQ,EAAE;MAAE,CAAC,EAAE;QAACD,KAAK,EAAC,UAAU;QAAEC,QAAQ,EAAE;MAAE,CAAC,EAAE;QAACD,KAAK,EAAC,UAAU;QAAEC,QAAQ,EAAE;MAAE,CAAC,CAAC;MACvYC,aAAa,EAAE,CAAC,CAAC;MACjBC,YAAY,EAAE,CAAC,CAAC;MAChBxB,KAAK,EAAE,IAAIyB,IAAI,CAAC,CAAC;MACjB9B,uBAAuB,EAAE,IAAID,GAAG,CAAC,CAAC;MAClCgC,QAAQ,EAAE,IAAI;MACdC,gBAAgB,EAAE,KAAK;MACvBC,SAAS,EAAE,KAAK;MAChBC,iBAAiB,EAAE,IAAI;MACvBC,cAAc,EAAE;IACpB,CAAC;IAED,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC;IAClE,IAAI,CAACC,yBAAyB,GAAG,IAAI,CAACA,yBAAyB,CAACD,IAAI,CAAC,IAAI,CAAC;IAC1E,IAAI,CAACE,wBAAwB,GAAG,IAAI,CAACA,wBAAwB,CAACF,IAAI,CAAC,IAAI,CAAC;IACxE,IAAI,CAACG,sBAAsB,GAAG,IAAI,CAACA,sBAAsB,CAACH,IAAI,CAAC,IAAI,CAAC;IACpE,IAAI,CAACI,wBAAwB,GAAG,IAAI,CAACA,wBAAwB,CAACJ,IAAI,CAAC,IAAI,CAAC;IACxE,IAAI,CAACK,+BAA+B,GAAG,IAAI,CAACA,+BAA+B,CAACL,IAAI,CAAC,IAAI,CAAC;IACtF,IAAI,CAACM,iCAAiC,GAAG,IAAI,CAACA,iCAAiC,CAACN,IAAI,CAAC,IAAI,CAAC;IAC1F,IAAI,CAACO,gCAAgC,GAAG,IAAI,CAACA,gCAAgC,CAACP,IAAI,CAAC,IAAI,CAAC;IACxF,IAAI,CAACQ,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACR,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAACS,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACT,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAI,CAACU,uBAAuB,GAAG,IAAI,CAACA,uBAAuB,CAACV,IAAI,CAAC,IAAI,CAAC;IACtE,IAAI,CAACW,wBAAwB,GAAG,IAAI,CAACA,wBAAwB,CAACX,IAAI,CAAC,IAAI,CAAC;IACxE,IAAI,CAACY,OAAO,GAAG,IAAI,CAACA,OAAO,CAACZ,IAAI,CAAC,IAAI,CAAC;IACtC,IAAI,CAACa,eAAe,GAAG,IAAI,CAACA,eAAe,CAACb,IAAI,CAAC,IAAI,CAAC;EAE1D;EAEAD,qBAAqBA,CAAA,EAAG;IACpB,IAAI,CAAC9C,QAAQ,CAAC;MAAC6B,gBAAgB,EAAG,CAAC,IAAI,CAAChC,KAAK,CAACgC;IAAgB,CAAC,CAAC;EACpE;EAEAmB,yBAAyBA,CAAA,EAAG;IACxB,IAAI,CAAChD,QAAQ,CAAC;MAAC8B,oBAAoB,EAAE,CAAC,IAAI,CAACjC,KAAK,CAACiC;IAAoB,CAAC,CAAC;EAC3E;EAEAmB,wBAAwBA,CAAA,EAAG;IACvB,IAAI,CAACjD,QAAQ,CAAC;MAAC+B,mBAAmB,EAAG,CAAC,IAAI,CAAClC,KAAK,CAACkC;IAAmB,CAAC,CAAC;EAC1E;EAEAmB,sBAAsBA,CAAA,EAAG;IACrB,IAAI,CAAClD,QAAQ,CAAC;MAACiC,iBAAiB,EAAE,CAAC,IAAI,CAACpC,KAAK,CAACoC;IAAiB,CAAC,CAAC;EACrE;EAEA0B,OAAOA,CAAA,EAAG;IACNE,YAAY,CAACC,OAAO,CAAC,MAAM,EAAE,KAAK,CAAC;IAEnC,MAAMC,OAAO,GAAGlG,oBAAoB,CAAC,CAAC;IACtCkG,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAG;IACrB,oBAAQ9F,OAAA,CAAAE,SAAA;MAAA6F,QAAA,eACJ/F,OAAA,CAACJ,KAAK;QAAAoG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,gBACX,CAAC;EACP;EAEAT,eAAeA,CAAA,EAAG;IACd,IAAI,CAAC5D,QAAQ,CAAC;MAAC2C,SAAS,EAAE,IAAI;MAAEF,QAAQ,EAAE,KAAK;MAAEC,gBAAgB,EAAE;IAAK,CAAC,CAAC;EAC9E;EAoGA4B,0BAA0BA,CAAEpD,SAAS,EAAE;IAEnC,MAAMqD,kBAAkB,GAAGrD,SAAS;IACpClD,SAAS,CAACwG,qBAAqB,CAACtD,SAAS,CAAC,CACzC3B,IAAI,CAAGC,QAAQ,IAAK;MAEjB;MACA,MAAMoC,eAAe,GAAG,IAAI,CAAC/B,KAAK,CAACC,QAAQ,CAACsB,MAAM,CAAElC,OAAO,IAAK;QAC5D,IAAIA,OAAO,CAACkB,EAAE,KAAKmE,kBAAkB,EAAE;UACnC,OAAOrF,OAAO;QAClB;MACJ,CAAC,CAAC;MACF,IAAI,CAACc,QAAQ,CAAC;QAACF,QAAQ,EAAE8B;MAAe,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC;IAEF5D,SAAS,CAACyG,mCAAmC,CAACvD,SAAS,CAAC,CACvD3B,IAAI,CAACC,QAAQ,IAAI;MAEd,MAAMkF,mBAAmB,GAAG,IAAI,CAAC7E,KAAK,CAACqC,oBAAoB,CAACd,MAAM,CAAEuD,WAAW,IAAK;QAChF,IAAIA,WAAW,CAACzD,SAAS,KAAKA,SAAS,EAAE;UACrC,OAAOyD,WAAW;QACtB;MACJ,CAAC,CAAC;MACF,IAAI,CAAC3E,QAAQ,CAAC;QAACkC,oBAAoB,EAAEwC;MAAmB,CAAC,CAAC;MAC1D;IACJ,CAAC,CAAC;EACN;EAEAhB,wBAAwBA,CAAEhF,CAAC,EAAE;IACzBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,MAAMuC,SAAS,GAAG,IAAI,CAACrB,KAAK,CAACK,qBAAqB;IAClD,MAAM0E,UAAU,GAAGlG,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK;IACpC,MAAMyF,SAAS,GAAGjF,UAAU,CAAClB,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC;IAE/C,MAAM0F,WAAW,GAAG;MAChB5F,OAAO,EAAE0F,UAAU;MACnBvF,MAAM,EAAEwF;IACZ,CAAC;IAED7G,SAAS,CAAC+G,mBAAmB,CAAC7D,SAAS,EAAE4D,WAAW,CAAC,CACpDvF,IAAI,CAACC,QAAQ,IAAI;MACd;;MAEA;MACA,MAAMoC,eAAe,GAAG,IAAI,CAAC/B,KAAK,CAACC,QAAQ,CAACsB,MAAM,CAAEC,OAAO,IAAK;QAC5D,IAAIA,OAAO,CAACjB,EAAE,KAAKc,SAAS,EAAE;UAC1B,OAAOG,OAAO;QAClB,CAAC,MACG;UACAA,OAAO,CAACnC,OAAO,GAAG0F,UAAU;UAC5BvD,OAAO,CAAChC,MAAM,GAAGwF,SAAS;UAC1B,OAAOxD,OAAO;QAClB;MAEJ,CAAC,CAAC;MACF,IAAI,CAACrB,QAAQ,CAAC;QAACF,QAAQ,EAAE8B,eAAe;QAAEiB,cAAc,EAAEiC,WAAW,CAAC5F;MAAO,CAAC,CAAC;MAE/ER,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,IAAI;MACxBV,CAAC,CAACS,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,GAAG,IAAI;IAC5B,CAAC,CAAC,CAACwB,KAAK,CAACC,KAAK,IAAI;MACd;IAAA,CACH,CAAC;EAGN;EAEA0C,gBAAgBA,CAAA,EAAG;IACf,IAAIyB,WAAW;;IAEf;IACA,IAAI,IAAI,CAACnF,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;MAClCiF,WAAW,GAAE,IAAI,CAACnF,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACZ,OAAO;MAC3C,IAAI+F,kBAAkB,GAAG,CAAC,CAAC;;MAE3B;MACA;QAAC,IAAI,CAACpF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEJ,OAAO,IAAK;UAClC,IAAI4D,kBAAkB,KAAK,CAAC,CAAC,EAAE;YAC3BA,kBAAkB,GAAG5D,OAAO,CAACjB,EAAE;UACnC,CAAC,MACI;YACD,IAAIiB,OAAO,CAACjB,EAAE,GAAG6E,kBAAkB,EAAE;cACjCA,kBAAkB,GAAG5D,OAAO,CAACjB,EAAE;YACnC;UACJ;QACJ,CAAC,CAAC;MAAA;MAEF,IAAI8E,wBAAwB;MAC5B;QAAC,IAAI,CAACrF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEJ,OAAO,IAAK;UAClC,IAAIA,OAAO,CAACjB,EAAE,KAAK6E,kBAAkB,EAAE;YACnCC,wBAAwB,GAAG7D,OAAO,CAACjB,EAAE;UACzC;QACJ,CAAC,CAAC;MAAA;;MAEF;MACA,IAAI,CAACJ,QAAQ,CAAC;QAACE,qBAAqB,EAAEgF;MAAwB,CAAC,EAAE,YAAW;QACxE;UAAC,IAAI,CAACrF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEvC,OAAO,IAAK;YAClC,IAAIA,OAAO,CAACkB,EAAE,KAAK8E,wBAAwB,EAAE;cACzC,IAAI,CAAClF,QAAQ,CAAC;gBAAC6C,cAAc,EAAEmC;cAAW,CAAC,CAAC;YAChD;UACJ,CAAC,CAAC;QAAA;QAAC;MACP,CAAC,CAAC;IACN,CAAC,MACI;MACD,IAAI,CAAChF,QAAQ,CAAC;QAAC6C,cAAc,EAAE;MAAuB,CAAC,CAAC;IAC5D;EACJ;EAEAW,iBAAiBA,CAAA,EAAG;IAChB;IACA,IAAI,IAAI,CAAC3D,KAAK,CAACgD,cAAc,KAAK,uBAAuB,EAAE;MACvD,IAAI,IAAI,CAAChD,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;QAClC,IAAI,CAACC,QAAQ,CAAC;UAAC6C,cAAc,EAAE,IAAI,CAAChD,KAAK,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACZ;QAAO,CAAC,CAAC;MACnE;IACJ,CAAC,MACI,IAAI,IAAI,CAACW,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;MACvC,IAAI,CAACC,QAAQ,CAAC;QAAC6C,cAAc,EAAE;MAAuB,CAAC,CAAC;IAC5D;EACJ;EAEAM,wBAAwBA,CAACzE,CAAC,EAAE;IACxB;IACA,IAAIyG,eAAe,GAAC,CAAC;IACrB;MAAC,IAAI,CAACtF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEJ,OAAO,IAAK;QAClC,IAAIA,OAAO,CAACnC,OAAO,KAAKR,CAAC,CAACS,MAAM,CAACC,KAAK,EAAE;UACpC+F,eAAe,GAAG9D,OAAO,CAACjB,EAAE;QAChC;MACJ,CAAC,CAAC;IAAA;IACF,IAAI,CAACJ,QAAQ,CAAC;MAAEE,qBAAqB,EAAEiF;IAAgB,CAAC,EAAE,YAAW;MACjE;QAAC,IAAI,CAACtF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEvC,OAAO,IAAK;UAClC;UACA,IAAIA,OAAO,CAACkB,EAAE,KAAK+E,eAAe,EAAE;YAChC,IAAI,CAACnF,QAAQ,CAAC;cAAC6C,cAAc,EAAE3D,OAAO,CAACA;YAAO,CAAC,CAAC;UACpD;QACJ,CAAC,CAAC;MAAA;IACN,CAAC,CAAC;EACN;EAEAuE,uBAAuBA,CAAA,EAAG;IACtB,IAAIwB,kBAAkB,GAAG,CAAC,CAAC;IAC3B;MAAC,IAAI,CAACpF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEJ,OAAO,IAAK;QAClC,IAAI4D,kBAAkB,KAAK,CAAC,CAAC,EAAE;UAC3BA,kBAAkB,GAAG5D,OAAO,CAACjB,EAAE;QACnC,CAAC,MACI;UACD,IAAIiB,OAAO,CAACjB,EAAE,GAAG6E,kBAAkB,EAAE;YACjCA,kBAAkB,GAAG5D,OAAO,CAACjB,EAAE;UACnC;QACJ;MACJ,CAAC,CAAC;IAAA;IAEF,IAAI8E,wBAAwB;IAC5B;MAAC,IAAI,CAACrF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEJ,OAAO,IAAK;QAClC,IAAIA,OAAO,CAACjB,EAAE,KAAK6E,kBAAkB,EAAE;UACnCC,wBAAwB,GAAG7D,OAAO,CAACjB,EAAE;QACzC;MACJ,CAAC,CAAC;IAAA;IAEF,IAAI,CAACJ,QAAQ,CAAC;MAACC,4BAA4B,EAAEiF;IAAwB,CAAC,CAAC;EAC3E;EAEA9B,+BAA+BA,CAAC1E,CAAC,EAAE;IAC/B,IAAIyG,eAAe,GAAC,CAAC;IACrB;MAAC,IAAI,CAACtF,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEJ,OAAO,IAAK;QAClC,IAAIA,OAAO,CAACnC,OAAO,KAAKR,CAAC,CAACS,MAAM,CAACC,KAAK,EAAE;UACpC+F,eAAe,GAAG9D,OAAO,CAACjB,EAAE;QAChC;MACJ,CAAC,CAAC;IAAA;IACF,IAAI,CAACJ,QAAQ,CAAC;MAAEC,4BAA4B,EAAEkF;IAAgB,CAAC,CAAC;EACpE;EAEA9B,iCAAiCA,CAAC3E,CAAC,EAAE;IACjC,IAAIyG,eAAe,GAAC,CAAC;IAErB,IAAIzG,CAAC,CAACS,MAAM,CAACC,KAAK,KAAK,IAAI,EAAE;MACzB;IACJ,CAAC,MACG;MACA;MACA;QAAC,IAAI,CAACS,KAAK,CAACsC,YAAY,CAACV,GAAG,CAAEJ,OAAO,IAAK;UACtC,IAAIA,OAAO,CAACgB,QAAQ,KAAK+C,QAAQ,CAAC1G,CAAC,CAACS,MAAM,CAACC,KAAK,CAAC,EAAE;YAC/C+F,eAAe,GAAG9D,OAAO,CAACgB,QAAQ;UACtC;QACJ,CAAC,CAAC;MAAA;MACF,IAAI,CAACrC,QAAQ,CAAC;QAACsC,aAAa,EAAE6C;MAAe,CAAC,EAAE,YAAY;QAExD;QACA,IAAIC,QAAQ,CAAC,IAAI,CAACvF,KAAK,CAAC0C,YAAY,CAAC,KAAK,IAAI,CAAC1C,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,IAAI,IAAI,CAACxF,KAAK,CAACyC,aAAa,KAAK,IAAI,CAACzC,KAAK,CAACkB,KAAK,CAACuE,QAAQ,CAAC,CAAC,GAAC,CAAC,EAAE;UACpI,IAAI,CAACtF,QAAQ,CAAC;YAAC4C,iBAAiB,EAAE;UAAI,CAAC,CAAC;QAC5C,CAAC,MACI;UACD,IAAI,CAAC5C,QAAQ,CAAC;YAAC4C,iBAAiB,EAAE;UAAK,CAAC,CAAC;QAC7C;QAEA,MAAM2C,YAAY,GAAG,IAAI,CAAC1F,KAAK,CAACyC,aAAa;QAC7C,MAAMkD,WAAW,GAAG,IAAI,CAAC3F,KAAK,CAAC0C,YAAY;QAE3CvE,SAAS,CAACyH,mCAAmC,CAACF,YAAY,EAAEC,WAAW,CAAC,CACvEjG,IAAI,CAACC,QAAQ,IAAI;UAEd,MAAMkF,mBAAmB,GAAGlF,QAAQ,CAACE,IAAI;;UAEzC;UACA,IAAIc,UAAU,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACa,uBAAuB,CAAC;UAC5D,IAAI,CAACb,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEvC,OAAO,IAAK;YACjCsB,UAAU,CAACG,GAAG,CAACzB,OAAO,CAACkB,EAAE,EAAE,GAAG,CAAC;UACnC,CAAC,CAAC;UAGF,IAAI,CAACJ,QAAQ,CAAC;YAACkC,oBAAoB,EAAEwC,mBAAmB;YAAEhE,uBAAuB,EAAEF;UAAU,CAAC,EAAE,YAAU;YACtG;YACA,IAAIkF,gBAAgB,GAAG,IAAIjF,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACa,uBAAuB,CAAC;YAClE,IAAI,CAACb,KAAK,CAACqC,oBAAoB,CAACT,GAAG,CAAEkD,WAAW,IAAK;cAEjD,MAAMgB,mBAAmB,GAAGhB,WAAW,CAACzD,SAAS;cACjD,MAAM0E,aAAa,GAAGF,gBAAgB,CAAC/D,GAAG,CAACgE,mBAAmB,CAAC;cAC/D,MAAMtF,KAAK,GAAGsE,WAAW,CAACtE,KAAK;cAE/BqF,gBAAgB,CAAC/E,GAAG,CAACgF,mBAAmB,EAAEC,aAAa,GAAGvF,KAAK,CAAC;YAEpE,CAAC,CAAC;YACF,IAAI,CAACL,QAAQ,CAAC;cAACU,uBAAuB,EAAEgF;YAAgB,CAAC,CAAC;UAC9D,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ;EAEApC,gCAAgCA,CAAC5E,CAAC,EAAE;IAChC,IAAIyG,eAAe,GAAC,CAAC;IAErB,IAAIzG,CAAC,CAACS,MAAM,CAACC,KAAK,KAAK,IAAI,EAAE;MACzB;IACJ,CAAC,MACG;MACA+F,eAAe,GAAGzG,CAAC,CAACS,MAAM,CAACC,KAAK;MAEhC,IAAI,CAACY,QAAQ,CAAC;QAACuC,YAAY,EAAE4C;MAAe,CAAC,EAAE,YAAY;QAEvD;QACA,IAAIC,QAAQ,CAAC,IAAI,CAACvF,KAAK,CAAC0C,YAAY,CAAC,KAAK,IAAI,CAAC1C,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,IAAI,IAAI,CAACxF,KAAK,CAACyC,aAAa,KAAK,IAAI,CAACzC,KAAK,CAACkB,KAAK,CAACuE,QAAQ,CAAC,CAAC,GAAC,CAAC,EAAE;UACpI,IAAI,CAACtF,QAAQ,CAAC;YAAC4C,iBAAiB,EAAE;UAAI,CAAC,CAAC;QAC5C,CAAC,MACI;UACD,IAAI,CAAC5C,QAAQ,CAAC;YAAC4C,iBAAiB,EAAE;UAAK,CAAC,CAAC;QAC7C;QAEA,MAAM2C,YAAY,GAAG,IAAI,CAAC1F,KAAK,CAACyC,aAAa;QAC7C,MAAMkD,WAAW,GAAG,IAAI,CAAC3F,KAAK,CAAC0C,YAAY;QAE3CvE,SAAS,CAACyH,mCAAmC,CAACF,YAAY,EAAEC,WAAW,CAAC,CACvEjG,IAAI,CAACC,QAAQ,IAAI;UAEd,MAAMkF,mBAAmB,GAAGlF,QAAQ,CAACE,IAAI;UACzC;UACA,IAAIc,UAAU,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACa,uBAAuB,CAAC;UAC5D,IAAI,CAACb,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEvC,OAAO,IAAK;YACjCsB,UAAU,CAACG,GAAG,CAACzB,OAAO,CAACkB,EAAE,EAAE,GAAG,CAAC;UACnC,CAAC,CAAC;UAEF,IAAI,CAACJ,QAAQ,CAAC;YAACkC,oBAAoB,EAAEwC,mBAAmB;YAAEhE,uBAAuB,EAAEF;UAAU,CAAC,EAAE,YAAW;YACvG;YACA,IAAIkF,gBAAgB,GAAG,IAAIjF,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACa,uBAAuB,CAAC;YAClE,IAAI,CAACb,KAAK,CAACqC,oBAAoB,CAACT,GAAG,CAAEkD,WAAW,IAAK;cACjD,MAAMkB,eAAe,GAAGH,gBAAgB,CAAC/D,GAAG,CAACgD,WAAW,CAACzD,SAAS,CAAC;cACnEwE,gBAAgB,CAAC/E,GAAG,CAACgE,WAAW,CAACzD,SAAS,EAAE2E,eAAe,GAAGlB,WAAW,CAACtE,KAAK,CAAC;YAEpF,CAAC,CAAC;YACF,IAAI,CAACL,QAAQ,CAAC;cAACU,uBAAuB,EAAEgF;YAAgB,CAAC,CAAC;UAC9D,CAAC,CAAC;QACN,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EACJ;EAEAI,eAAeA,CAAA,EAAG;IAEd,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,UAAU,GAAG,CAAC;IAElB,oBAAQ9H,OAAA,CAAAE,SAAA;MAAA6F,QAAA,GACH,IAAI,CAACpE,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEJ,OAAO,IAAK;QAElC,MAAM4E,WAAW,GAAGrG,UAAU,CAAC,IAAI,CAACC,KAAK,CAACa,uBAAuB,CAACiB,GAAG,CAACN,OAAO,CAACjB,EAAE,CAAC,CAAC;QAClF2F,WAAW,IAAI1E,OAAO,CAAChC,MAAM;QAC7B2G,UAAU,IAAIC,WAAW;QAEzB,oBACI/H,OAAA;UAAA+F,QAAA,gBACI/F,OAAA;YAAA+F,QAAA,EAAK5C,OAAO,CAACnC;UAAO;YAAAgF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC1BnG,OAAA;YAAA+F,QAAA,GAAI,GAAC,EAAE5C,OAAO,CAAChC,MAAM,CAAE6G,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvCnG,OAAA;YAAA+F,QAAA,GAAI,GAAC,EAAEgC,WAAW,CAAEC,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpCnG,OAAA;YAAIkC,EAAE,EAAGiB,OAAO,CAAChC,MAAM,GAAC4G,WAAW,IAAK,CAAC,GAAG,eAAe,GAAC,eAAgB;YAAAhC,QAAA,GAAC,GAAC,EAAC,CAAC5C,OAAO,CAAChC,MAAM,GAAC4G,WAAW,EAAEC,OAAO,CAAC,CAAC,CAAC;UAAA;YAAAhC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5HnG,OAAA;YAAA+F,QAAA,eAAI/F,OAAA;cAAQiI,OAAO,EAAGzH,CAAC,IAAK;gBAAC,IAAI,CAAC4F,0BAA0B,CAACjD,OAAO,CAACjB,EAAE,CAAC;gBAAC,IAAI,CAAC6C,wBAAwB,CAAC,CAAC;cAAA,CAAE;cAAC7C,EAAE,EAAC,UAAU;cAAA6D,QAAA,eAAC/F,OAAA,CAACH,KAAK;gBAACqI,KAAK,EAAC,SAAS;gBAACC,IAAI,EAAE,KAAM;gBAACF,OAAO,EAAGzH,CAAC,IAAK;kBAAC,IAAI,CAAC4F,0BAA0B,CAACjD,OAAO,CAACjB,EAAE,CAAC;kBAAC,IAAI,CAAC6C,wBAAwB,CAAC,CAAC;gBAAA;cAAE;gBAAAiB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAC;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3Q,CAAC;MAGb,CAAC,CAAC,eACFnG,OAAA;QAAA+F,QAAA,gBACI/F,OAAA;UAAIoI,SAAS,EAAC,MAAM;UAAArC,QAAA,EAAC;QAAQ;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClCnG,OAAA;UAAIoI,SAAS,EAAC,MAAM;UAAArC,QAAA,GAAC,GAAC,EAAC8B,WAAW,CAACG,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAhC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnDnG,OAAA;UAAIoI,SAAS,EAAC,MAAM;UAAArC,QAAA,GAAC,GAAC,EAAC+B,UAAU,CAACE,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAhC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAClDnG,OAAA;UAAIoI,SAAS,EAAC,MAAM;UAAClG,EAAE,EAAG2F,WAAW,GAACC,UAAU,IAAK,CAAC,GAAG,cAAc,GAAC,cAAe;UAAA/B,QAAA,GAAC,GAAC,EAAC,CAAC8B,WAAW,GAACC,UAAU,EAAEE,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAhC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnInG,OAAA;UAAAgG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CAAC;IAAA,eAEP,CAAC;EAEP;EAEAkC,UAAUA,CAAA,EAAG;IACT,MAAM3H,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;IACzC,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEvC,IAAI4E,YAAY,CAAC2C,OAAO,CAAC,MAAM,CAAC,KAAK,eAAe,EAAE;MAElD,oBAEItI,OAAA;QAAKoI,SAAS,EAAEzH,MAAM,CAAC4H,UAAU,IAAI,GAAG,GAAG,YAAY,GAAC,kBAAmB;QAAAxC,QAAA,gBAGvE/F,OAAA;UAAIkC,EAAE,EAAC,QAAQ;UAAA6D,QAAA,EAAC;QAAY;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAEjCnG,OAAA;UAAKkC,EAAE,EAAEvB,MAAM,CAAC4H,UAAU,IAAI,GAAG,GAAG,aAAa,GAAC,mBAAoB;UAAAxC,QAAA,gBAClE/F,OAAA;YAAGkC,EAAE,EAAEvB,MAAM,CAAC4H,UAAU,IAAI,GAAG,GAAG,cAAc,GAAC,mBAAoB;YAAAxC,QAAA,EAAE,kBAAkB,GAAGjF;UAAQ;YAAAkF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACzGnG,OAAA;YAAQkC,EAAE,EAAEvB,MAAM,CAAC4H,UAAU,IAAI,GAAG,GAAG,gBAAgB,GAAC,oBAAqB;YAACN,OAAO,EAAEA,CAAA,KAAM;cAAC,IAAI,CAACvC,eAAe,CAAC,CAAC;YAAA,CAAE;YAAAK,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvI,CAAC,eAENnG,OAAA;UAAKkC,EAAE,EAAC,cAAc;UAAA6D,QAAA,eAClB/F,OAAA;YAAKoI,SAAS,EAAC,YAAY;YAAArC,QAAA,gBACvB/F,OAAA;cAAQwI,QAAQ,EAAE,IAAI,CAAC7G,KAAK,CAAC+C,iBAAiB,GAAG,KAAK,GAAG,IAAK;cAAC0D,SAAS,EAAC,WAAW;cAACH,OAAO,EAAGA,CAAA,KAAM;gBAAC,IAAI,CAACrD,qBAAqB,CAAC,CAAC;cAAC,CAAE;cAAAmB,QAAA,EAAC;YAAW;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC1JnG,OAAA;cAAQwI,QAAQ,EAAE,IAAI,CAAC7G,KAAK,CAAC+C,iBAAiB,GAAG,KAAK,GAAG,IAAK;cAAC0D,SAAS,EAAC,WAAW;cAACH,OAAO,EAAGA,CAAA,KAAM;gBAAC,IAAI,CAACnD,yBAAyB,CAAC,CAAC;cAAC,CAAE;cAAAiB,QAAA,EAAC;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAClKnG,OAAA;cAAQwI,QAAQ,EAAE,IAAI,CAAC7G,KAAK,CAAC+C,iBAAiB,GAAG,KAAK,GAAG,IAAK;cAAC0D,SAAS,EAAC,WAAW;cAACH,OAAO,EAAGA,CAAA,KAAM;gBAAC,IAAI,CAACjD,sBAAsB,CAAC,CAAC;gBAAC,IAAI,CAACM,iBAAiB,CAAC,CAAC;cAAC,CAAE;cAAAS,QAAA,EAAC;YAAY;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACrLnG,OAAA;cAAQoI,SAAS,EAAC,WAAW;cAAClG,EAAE,EAAC,cAAc;cAAC+F,OAAO,EAAEA,CAAA,KAAM;gBAAC,IAAI,CAACnG,QAAQ,CAAC;kBAACyC,QAAQ,EAAE,KAAK;kBAAEC,gBAAgB,EAAC;gBAAI,CAAC,CAAC;cAAA,CAAE;cAAAuB,QAAA,EAAC;YAAiB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnJ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENnG,OAAA;UAAKkC,EAAE,EAAC,aAAa;UAAA6D,QAAA,gBAEjB/F,OAAA,CAACV,cAAc;YAAEmJ,WAAW,EAAE,IAAI,CAAC7D,qBAAsB;YAAC8D,IAAI,EAAE,IAAI,CAAC/G,KAAK,CAACgC,gBAAiB;YAACgF,aAAa,EAAE,IAAI,CAACpI;UAAwB;YAAAyF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eAC3InG,OAAA,CAACT,eAAe;YAACqJ,MAAM,EAAE,IAAI,CAACjH,KAAK,CAACC,QAAS;YAAC6G,WAAW,EAAE,IAAI,CAACzD,sBAAuB;YAAC6D,YAAY,EAAE,IAAI,CAAC5D,wBAAyB;YAACyD,IAAI,EAAE,IAAI,CAAC/G,KAAK,CAACoC,iBAAkB;YAAC4E,aAAa,EAAE,IAAI,CAACnD,wBAAyB;YAACb,cAAc,EAAE,IAAI,CAAChD,KAAK,CAACgD;UAAe;YAAAqB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eACnQnG,OAAA,CAACR,kBAAkB;YAAEoJ,MAAM,EAAE,IAAI,CAACjH,KAAK,CAACC,QAAS;YAAC6G,WAAW,EAAE,IAAI,CAAC3D,yBAA0B;YAAC4D,IAAI,EAAE,IAAI,CAAC/G,KAAK,CAACiC,oBAAqB;YAAC+E,aAAa,EAAE,IAAI,CAAC/F,2BAA4B;YAACiG,YAAY,EAAE,IAAI,CAAC3D;UAAgC;YAAAc,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAC,CAAC,eAE5OnG,OAAA;YAAKoI,SAAS,EAAC,eAAe;YAAClG,EAAE,EAAG,IAAI,CAACP,KAAK,CAACgC,gBAAgB,IAAI,IAAI,CAAChC,KAAK,CAACiC,oBAAoB,IAAI,IAAI,CAACjC,KAAK,CAACoC,iBAAiB,GAAI,eAAe,GAAC,cAAe;YAAAgC,QAAA,gBACjK/F,OAAA;cAAQkC,EAAE,EAAC,aAAa;cAAChB,KAAK,EAAE,IAAI,CAACS,KAAK,CAACyC,aAAc;cAAC0E,QAAQ,EAAE,IAAI,CAAC3D,iCAAkC;cAAAY,QAAA,gBACvG/F,OAAA;gBAAQwI,QAAQ;gBAACtH,KAAK,EAAC,IAAI;gBAAA6E,QAAA,EAAC;cAAS;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,EAE9C,IAAI,CAACxE,KAAK,CAACsC,YAAY,CAACV,GAAG,CAAEJ,OAAO,iBAChCnD,OAAA;gBAAQkB,KAAK,EAAEiC,OAAO,CAACgB,QAAS;gBAAA4B,QAAA,EAAE5C,OAAO,CAACe;cAAK;gBAAA8B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAC3D,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,eAETnG,OAAA;cAAQkC,EAAE,EAAC,aAAa;cAAC4G,QAAQ,EAAE,IAAI,CAAC1D,gCAAiC;cAAAW,QAAA,gBACrE/F,OAAA;gBAAQwI,QAAQ;gBAACtH,KAAK,EAAC,IAAI;gBAAA6E,QAAA,EAAC;cAAQ;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC7CnG,OAAA;gBAAQkB,KAAK,EAAE,IAAI,CAACS,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC,CAAE;gBAAApB,QAAA,EAAE,IAAI,CAACpE,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC;cAAC;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC,eAC5FnG,OAAA;gBAAQkB,KAAK,EAAE,IAAI,CAACS,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC,CAAE;gBAAApB,QAAA,EAAE,IAAI,CAACpE,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC;cAAC;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC,eAC5FnG,OAAA;gBAAQkB,KAAK,EAAE,IAAI,CAACS,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC,CAAE;gBAAApB,QAAA,EAAE,IAAI,CAACpE,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC;cAAC;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC,eAC5FnG,OAAA;gBAAQkB,KAAK,EAAE,IAAI,CAACS,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC,CAAE;gBAAApB,QAAA,EAAE,IAAI,CAACpE,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAC,GAAC;cAAC;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC,eAC5FnG,OAAA;gBAAQ+I,QAAQ;gBAAC7H,KAAK,EAAE,IAAI,CAACS,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC,CAAE;gBAAApB,QAAA,EAAE,IAAI,CAACpE,KAAK,CAACkB,KAAK,CAACsE,WAAW,CAAC;cAAC;gBAAAnB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC7F,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC,eAENnG,OAAA;UAAOoI,SAAS,EAAC,eAAe;UAAArC,QAAA,gBACxB/F,OAAA;YAAA+F,QAAA,eACI/F,OAAA;cAAA+F,QAAA,gBACI/F,OAAA;gBAAA+F,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChBnG,OAAA;gBAAA+F,QAAA,EAAI;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACfnG,OAAA;gBAAA+F,QAAA,EAAI;cAAK;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACdnG,OAAA;gBAAA+F,QAAA,EAAI;cAAG;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACZnG,OAAA;gBAAAgG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACRnG,OAAA;YAAA+F,QAAA,EACK,IAAI,CAAC6B,eAAe,CAAC;UAAC;YAAA5B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACT,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAEd,CAAC,MACI;MAED,oBAAQnG,OAAA,CAAAE,SAAA;QAAA6F,QAAA,gBAEJ/F,OAAA;UAAA+F,QAAA,eAAK/F,OAAA;YAAA+F,QAAA,EAAI;UAAwC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC5DnG,OAAA;UAAKoI,SAAS,EAAC,cAAc;UAAArC,QAAA,eAAC/F,OAAA;YAAQoI,SAAS,EAAC,WAAW;YAAClG,EAAE,EAAC,cAAc;YAAC+F,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACvC,eAAe,CAAC,CAAE;YAAAK,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA,eAE7I,CAAC;IACP;EACJ;EAEA6C,kBAAkBA,CAAA,EAAG;IACjB,MAAMtI,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;IACzC,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAEvC,MAAM8E,OAAO,GAAGlG,oBAAoB,CAAC,CAAC;IACtCkG,OAAO,CAACC,IAAI,CAAC,qBAAqB,GAAGhF,QAAQ,CAAC,CAAC,CAAG;IAClD,oBAAQd,OAAA,CAAAE,SAAA;MAAA6F,QAAA,eACJ/F,OAAA,CAACP,YAAY;QAAAuG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,gBAClB,CAAC;EACP;EAEA8C,iBAAiBA,CAAA,EAAG;IAEhBnJ,SAAS,CAACoJ,sBAAsB,CAAC,CAAC,CAAE;IAAA,CACnC7H,IAAI,CAACC,QAAQ,IAAI;MAEd,MAAMZ,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACzC,MAAMC,QAAQ,GAAGJ,QAAQ,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;;MAEvC;MACA,IAAIoI,YAAY,GAAI7H,QAAQ,CAACE,IAAI,CAAE0B,MAAM,CAAElC,OAAO,IAAK;QACnD,IAAIA,OAAO,CAACqB,QAAQ,KAAKvB,QAAQ,EAAE;UAC/B,OAAOE,OAAO;QAClB;MACJ,CAAC,CAAC;MACF,IAAI,CAACc,QAAQ,CAAC;QAACF,QAAQ,EAAEuH;MAAY,CAAC,CAAC;MAEvC,MAAMtG,KAAK,GAAG,IAAIyB,IAAI,CAAC,CAAC;MACxB,MAAM8E,UAAU,GAAGvG,KAAK,CAACuE,QAAQ,CAAC,CAAC,GAAC,CAAC;MACrC,MAAMiC,SAAS,GAAGxG,KAAK,CAACsE,WAAW,CAAC,CAAC;MAErC,IAAI,CAACrF,QAAQ,CAAC;QAACsC,aAAa,EAAEgF,UAAU;QAAE/E,YAAY,EAAEgF;MAAS,CAAC,EAAE,YAAY;QAC5EvJ,SAAS,CAACyH,mCAAmC,CAAC6B,UAAU,EAAEC,SAAS,CAAC,CAAC;QAAA,CACpEhI,IAAI,CAACC,QAAQ,IAAI;UAEd;UACA,IAAIgI,gBAAgB,GAAIhI,QAAQ,CAACE,IAAI,CAAE0B,MAAM,CAAEuD,WAAW,IAAK;YAC3D,IAAIA,WAAW,CAACpE,QAAQ,KAAKvB,QAAQ,EAAE;cACnC,OAAO2F,WAAW;YACtB;UACJ,CAAC,CAAC;UACF,IAAI,CAAC3E,QAAQ,CAAC;YAACkC,oBAAoB,EAAEsF;UAAgB,CAAC,CAAC;;UAEvD;UACA,IAAIC,8BAA8B,GAAG,IAAIhH,GAAG,CAAC,CAAC,CAAC,CAAC;UAChD,IAAI,CAACZ,KAAK,CAACC,QAAQ,CAAC2B,GAAG,CAAEvC,OAAO,IAAK;YACjCuI,8BAA8B,CAAC9G,GAAG,CAACzB,OAAO,CAACkB,EAAE,EAAE,GAAG,CAAC;UAEvD,CAAC,CAAC;UACF,IAAI,CAACJ,QAAQ,CAAC;YAACU,uBAAuB,EAAE+G;UAA8B,CAAC,EAAE,YAAW;YAChF,IAAIjH,UAAU,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACZ,KAAK,CAACa,uBAAuB,CAAC;YAC5D,IAAI,CAACb,KAAK,CAACqC,oBAAoB,CAACT,GAAG,CAAEkD,WAAW,IAAK;cACjD,MAAMiB,aAAa,GAAGpF,UAAU,CAACmB,GAAG,CAACgD,WAAW,CAACzD,SAAS,CAAC;cAC3D,MAAMb,KAAK,GAAGsE,WAAW,CAACtE,KAAK;cAC/BG,UAAU,CAACG,GAAG,CAACgE,WAAW,CAACzD,SAAS,EAAE0E,aAAa,GAAGvF,KAAK,CAAC;cAC5D,IAAI,CAACL,QAAQ,CAAC;gBAACU,uBAAuB,EAAEF;cAAU,CAAC,CAAC;YACxD,CAAC,CAAC;YAEF,IAAI,CAAC+C,gBAAgB,CAAC,CAAC;YACvB,IAAI,CAACE,uBAAuB,CAAC,CAAC;UAClC,CAAC,CAAC;QAEN,CAAC,CAAC;MACN,CAAC,CAAC;IAGN,CAAC,CAAC;EAEN;EAEAiE,MAAMA,CAAA,EAAG;IACL,oBAAQxJ,OAAA,CAAAE,SAAA;MAAA6F,QAAA,eACJ/F,OAAA;QAAA+F,QAAA,GACK,IAAI,CAACpE,KAAK,CAAC4C,QAAQ,IAAI,IAAI,CAAC8D,UAAU,CAAC,CAAC,EACxC,IAAI,CAAC1G,KAAK,CAAC6C,gBAAgB,IAAI,IAAI,CAACwE,kBAAkB,CAAC,CAAC,EACxD,IAAI,CAACrH,KAAK,CAAC8C,SAAS,IAAI,IAAI,CAACgB,OAAO,CAAC,CAAC;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC;IAAC,gBAER,CAAC;EACP;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module"}