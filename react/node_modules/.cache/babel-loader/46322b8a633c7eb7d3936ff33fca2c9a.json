{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\desktop\\\\BudgetTracker\\\\react\\\\src\\\\Home.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport AddExpenseForm from './AddExpenseForm';\nimport DeleteExpenseForm from './DeleteExpenseForm';\nimport EditExpenseForm from './EditExpenseForm';\nimport AddTransactionForm from './AddTransactionForm';\nimport { Link } from \"react-router-dom\";\nimport Moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandlerAddExpense = e => {\n      e.preventDefault();\n      axios.post(\"http://localhost:8080/expense/addRow\", {\n        expense: e.target[0].value,\n        budget: e.target[1].value\n      }).then(response => {\n        const newId = response.data;\n        const newExpense = e.target[0].value;\n        const newBudget = parseFloat(e.target[1].value);\n        console.log(\"Expense: \" + e.target[0].value + \"\\n\" + \"Budget: \" + e.target[1].value + \"\\n\" + \"Assigned ID: \" + response.data);\n        const newExpenseObject = {\n          id: newId,\n          expense: newExpense,\n          budget: newBudget,\n          spent: 0.0,\n          remaining: newBudget\n        };\n        this.setState({\n          expenses: [...this.state.expenses, newExpenseObject]\n        });\n      }).catch(error => {\n        console.log(error);\n      }); //window.location.reload(); \n    };\n\n    this.submitHandlerAddTransaction = e => {\n      e.preventDefault();\n      const today = Moment(new Date()).format('YYYY-MM-DD');\n      console.log('test', Moment(today).format('YYYY-MM-DD')); // const todayYear = today.getFullYear()\n      // const todayMonth = today.getMonth()+1\n      // const todayDay = today.getDate()\n\n      let expenseSpent;\n      let nameOfExpense;\n      this.state.expenses.filter(element => {\n        if (element.id === this.state.transactionDropDownSelection) {\n          nameOfExpense = element.expense;\n          expenseSpent = element.spent;\n        }\n      });\n      axios.post(\"http://localhost:8080/transaction/addRow\", {\n        expenseID: this.state.transactionDropDownSelection,\n        payee: e.target[1].value,\n        spent: parseFloat(e.target[2].value),\n        expenseValue: nameOfExpense,\n        transactionDate: today\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n      const updateData = {\n        spent: expenseSpent + parseFloat(e.target[2].value)\n      };\n      axios.patch('http://localhost:8080/expense/editSpent/' + this.state.transactionDropDownSelection, updateData);\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id === this.state.transactionDropDownSelection) {\n          element.spent = expenseSpent + parseFloat(e.target[2].value);\n          return element;\n        } else {\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n    };\n\n    this.state = {\n      expenses: [],\n      editDropDownSelection: 0,\n      transactionDropDownSelection: 0,\n      addExpenseToggle: false,\n      addTransactionToggle: false,\n      deleteExpenseToggle: false,\n      deleteConfirmVal: false,\n      editExpenseToggle: false,\n      selectedTransactions: [],\n      listOfMonths: [{\n        month: \"January\",\n        monthNum: 1\n      }, {\n        month: \"February\",\n        monthNum: 2\n      }, {\n        month: \"March\",\n        monthNum: 3\n      }, {\n        month: \"April\",\n        monthNum: 4\n      }, {\n        month: \"May\",\n        monthNum: 5\n      }, {\n        month: \"June\",\n        monthNum: 6\n      }, {\n        month: \"July\",\n        monthNum: 7\n      }, {\n        month: \"August\",\n        monthNum: 8\n      }, {\n        month: \"September\",\n        monthNum: 9\n      }, {\n        month: \"October\",\n        monthNum: 10\n      }, {\n        month: \"November\",\n        monthNum: 11\n      }, {\n        month: \"December\",\n        monthNum: 12\n      }],\n      selectedMonth: -1,\n      selectedYear: -1,\n      today: new Date(),\n      spentValsForAllExpenses: new Map()\n    };\n    this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\n    this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this);\n    this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\n    this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\n    this.handleConfirmDelete = this.handleConfirmDelete.bind(this);\n    this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\n    this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\n    this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\n    this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\n    this.initEditDropDown = this.initEditDropDown.bind(this);\n    this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\n    this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this); //this.listOfMonths = this.listOfMonths.bind(this);\n  }\n\n  handleConfirmDelete(element) {\n    // Update the document title using the browser API\n    element = true;\n  }\n\n  submitHandlerDeleteExpense(e) {\n    //this.setState({id: e.target.value}) // value = expense id\n    console.log(e.target.value); //if (this.state.deleteConfirmVal) {\n\n    axios.delete('http://localhost:8080/expense/deleteRow/' + e.target.value).then(response => {\n      const idOfDeletedExpense = response.data;\n      const updatedExpenses = this.state.expenses.filter(expense => {\n        if (expense.id !== idOfDeletedExpense) {\n          return expense; // fix syntax\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    }); //window.location.reload();  \n    //}\n  }\n\n  submitHandlerEditExpense(e) {\n    e.preventDefault(); //console.log(e);\n\n    const data = {\n      expense: e.target[1].value,\n      budget: parseFloat(e.target[2].value)\n    };\n    axios.patch('http://localhost:8080/expense/editRow/' + this.state.editDropDownSelection, data).then(response => {\n      console.log(response);\n      const idOfEditedExpense = response.data;\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id !== idOfEditedExpense) {\n          return element;\n        } else {\n          element.expense = e.target[1].value;\n          element.budget = parseFloat(e.target[2].value);\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  initEditDropDown() {\n    let lowestIndexExpense = -1;\n    {\n      this.state.expenses.map(element => {\n        if (lowestIndexExpense === -1) {\n          lowestIndexExpense = element.id;\n        } else {\n          if (element.id < lowestIndexExpense) {\n            lowestIndexExpense = element.id;\n          }\n        }\n      });\n    }\n    let elementWithSmallestIndex = \"\";\n    {\n      this.state.expenses.map(element => {\n        if (element.id === lowestIndexExpense) {\n          elementWithSmallestIndex = element.id;\n        }\n      });\n    }\n    this.setState({\n      editDropDownSelection: elementWithSmallestIndex\n    });\n  }\n\n  handleEditDropDownChange(e) {\n    //console.log(e);\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      editDropDownSelection: selectedElement\n    });\n  }\n\n  initTransactionDropDown() {\n    let lowestIndexExpense = -1;\n    {\n      this.state.expenses.map(element => {\n        if (lowestIndexExpense === -1) {\n          lowestIndexExpense = element.id;\n        } else {\n          if (element.id < lowestIndexExpense) {\n            lowestIndexExpense = element.id;\n          }\n        }\n      });\n    }\n    let elementWithSmallestIndex = \"\";\n    {\n      this.state.expenses.map(element => {\n        if (element.id === lowestIndexExpense) {\n          elementWithSmallestIndex = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: elementWithSmallestIndex\n    });\n  }\n\n  handleTransactionDropDownChange(e) {\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: selectedElement\n    });\n  }\n\n  handleSelectedMonthDropDownChange(e) {\n    let selectedElement = 0; //console.log(e.target.value)\n\n    if (e.target.value === \"-1\") {\n      console.log(\"No month selected.\");\n      return;\n    } else {\n      {\n        this.state.listOfMonths.map(element => {\n          if (element.monthNum === parseInt(e.target.value)) {\n            selectedElement = element.monthNum;\n          }\n        });\n      }\n      this.setState({\n        selectedMonth: selectedElement\n      }, function () {\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          //console.log(this.state.selectedMonth)\n          this.setState({\n            selectedTransactions: res.data\n          });\n          console.log(res.data);\n        });\n      });\n    }\n  }\n\n  handleSelectedYearDropDownChange(e) {\n    let selectedElement = 0; //console.log(e.target.value)\n\n    if (e.target.value === \"-1\") {\n      console.log(\"No Year selected.\");\n      return;\n    } else {\n      selectedElement = e.target.value;\n      this.setState({\n        selectedYear: selectedElement\n      }, function () {\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          //console.log(this.state.selectedMonth)\n          this.setState({\n            selectedTransactions: res.data\n          });\n          console.log(res.data);\n        });\n      });\n    }\n  }\n\n  toggleAddExpenseModal() {\n    this.setState({\n      addExpenseToggle: !this.state.addExpenseToggle\n    });\n  }\n\n  toggleAddTransactionModal() {\n    this.setState({\n      addTransactionToggle: !this.state.addTransactionToggle\n    });\n  }\n\n  toggleDeleteExpenseModal() {\n    this.setState({\n      deleteExpenseToggle: !this.state.deleteExpenseToggle\n    });\n  }\n\n  toggleEditExpenseModal() {\n    this.setState({\n      editExpenseToggle: !this.state.editExpenseToggle\n    });\n  }\n\n  renderTableData() {\n    return this.state.expenses.map(element => {\n      const amountSpent = this.state.spentValsForAllExpenses.get(element.id);\n      console.log(amountSpent);\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: element.expense\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"$\", element.budget.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"$\", amountSpent]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"$\", (element.budget - amountSpent).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"deleteButton\",\n            value: element.id,\n            onClick: e => {\n              this.submitHandlerDeleteExpense(e);\n              this.toggleDeleteExpenseModal();\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 15\n      }, this);\n    });\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/expense/allExpenses\") // gets all expenses from mysql\n    .then(res => {\n      const expenses = res.data;\n      console.log('axios expenses: ', expenses);\n      this.setState({\n        expenses\n      });\n      const today = new Date();\n      this.setState({\n        selectedMonth: today.getMonth() + 1,\n        selectedYear: today.getFullYear()\n      }, function () {\n        //gets transactions for current month and year\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          this.setState({\n            selectedTransactions: res.data\n          });\n          let updatedSpentValsForAllExpenses = new Map(); // rename to better name\n\n          this.state.expenses.map(expense => {\n            updatedSpentValsForAllExpenses.set(expense.id, 0);\n          });\n          this.setState({\n            spentValsForAllExpenses: updatedSpentValsForAllExpenses\n          });\n          console.log(\"Spent Vals\", this.state.spentValsForAllExpenses);\n          this.state.selectedTransactions.map(transaction => {\n            let tempMap = new Map(this.state.spentValsForAllExpenses);\n            const expenseSpentVal = tempMap.get(transaction.expenseID);\n            tempMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n          }); // let newMap = new Map(myHashMap);\n          // console.log('newMap', newMap);\n          // newMap.filter((expenseId){\n          //     if (expenseId === transactions.expenseId)\n          //     {\n          //        newMap.set(expenseId, newMap.get(expenseId) + transaction.spentVal) \n          //     }\n          // });\n        });\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"mainTitle\",\n        children: \"Budget Tracker\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.toggleAddExpenseModal,\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.toggleAddTransactionModal();\n            this.initTransactionDropDown();\n          },\n          children: \"Add Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.toggleEditExpenseModal();\n            this.initEditDropDown();\n          },\n          children: \"Edit Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/transactionsTable\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"buttons-flex\",\n            children: \"Show Transactions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddExpenseForm, {\n        handleClose: this.toggleAddExpenseModal,\n        show: this.state.addExpenseToggle,\n        submitHandler: this.submitHandlerAddExpense\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(EditExpenseForm, {\n        myList: this.state.expenses,\n        handleClose: this.toggleEditExpenseModal,\n        handleChange: this.handleEditDropDownChange,\n        show: this.state.editExpenseToggle,\n        submitHandler: this.submitHandlerEditExpense\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n        myList: this.state.expenses,\n        handleClose: this.toggleAddTransactionModal,\n        show: this.state.addTransactionToggle,\n        submitHandler: this.submitHandlerAddTransaction,\n        handleChange: this.handleTransactionDropDownChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dropdown-flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: this.handleSelectedMonthDropDownChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"-1\",\n            children: \"--Month--\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 25\n          }, this), this.state.listOfMonths.map(element => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: element.monthNum,\n            children: element.month\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 29\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: this.handleSelectedYearDropDownChange,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"-1\",\n            children: \"--Year--\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: this.state.today.getFullYear() - 2,\n            children: this.state.today.getFullYear() - 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: this.state.today.getFullYear() - 1,\n            children: this.state.today.getFullYear() - 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: this.state.today.getFullYear(),\n            children: this.state.today.getFullYear()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: this.state.today.getFullYear() + 1,\n            children: this.state.today.getFullYear() + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: this.state.today.getFullYear() + 2,\n            children: this.state.today.getFullYear() + 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"expense-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Expense\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Budget\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Spent\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Remaining\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Delete()\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 416,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.renderTableData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jason/OneDrive/desktop/BudgetTracker/react/src/Home.js"],"names":["React","useState","axios","AddExpenseForm","DeleteExpenseForm","EditExpenseForm","AddTransactionForm","Link","Moment","Home","Component","constructor","props","submitHandlerAddExpense","e","preventDefault","post","expense","target","value","budget","then","response","newId","data","newExpense","newBudget","parseFloat","console","log","newExpenseObject","id","spent","remaining","setState","expenses","state","catch","error","submitHandlerAddTransaction","today","Date","format","expenseSpent","nameOfExpense","filter","element","transactionDropDownSelection","expenseID","payee","expenseValue","transactionDate","updateData","patch","updatedExpenses","editDropDownSelection","addExpenseToggle","addTransactionToggle","deleteExpenseToggle","deleteConfirmVal","editExpenseToggle","selectedTransactions","listOfMonths","month","monthNum","selectedMonth","selectedYear","spentValsForAllExpenses","Map","toggleAddExpenseModal","bind","toggleAddTransactionModal","toggleDeleteExpenseModal","toggleEditExpenseModal","handleConfirmDelete","handleEditDropDownChange","handleTransactionDropDownChange","handleSelectedMonthDropDownChange","handleSelectedYearDropDownChange","initEditDropDown","initTransactionDropDown","submitHandlerEditExpense","submitHandlerDeleteExpense","delete","idOfDeletedExpense","idOfEditedExpense","lowestIndexExpense","map","elementWithSmallestIndex","selectedElement","parseInt","get","res","renderTableData","amountSpent","toFixed","componentDidMount","getMonth","getFullYear","updatedSpentValsForAllExpenses","set","transaction","tempMap","expenseSpentVal","render"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport AddExpenseForm from './AddExpenseForm';\r\nimport DeleteExpenseForm from './DeleteExpenseForm';\r\nimport EditExpenseForm from './EditExpenseForm';\r\nimport AddTransactionForm from './AddTransactionForm';\r\nimport {Link} from \"react-router-dom\";\r\nimport Moment from 'moment';\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            expenses: [],\r\n            editDropDownSelection:0,\r\n            transactionDropDownSelection:0,\r\n\r\n            addExpenseToggle: false,\r\n            addTransactionToggle: false,\r\n            deleteExpenseToggle: false,\r\n            deleteConfirmVal: false,\r\n            editExpenseToggle: false,\r\n\r\n            selectedTransactions: [],\r\n            listOfMonths: [{month:\"January\", monthNum: 1}, {month:\"February\", monthNum: 2}, {month:\"March\", monthNum: 3}, {month:\"April\", monthNum: 4}, {month:\"May\", monthNum: 5}, {month:\"June\", monthNum: 6}, {month:\"July\", monthNum: 7}, {month:\"August\", monthNum: 8}, {month:\"September\", monthNum: 9}, {month:\"October\", monthNum: 10}, {month:\"November\", monthNum: 11}, {month:\"December\", monthNum: 12}],\r\n            selectedMonth: -1,\r\n            selectedYear: -1,\r\n            \r\n            today: new Date(),\r\n            spentValsForAllExpenses: new Map()\r\n        };\r\n\r\n        this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\r\n        this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this)\r\n        this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\r\n        this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\r\n        \r\n        this.handleConfirmDelete = this.handleConfirmDelete.bind(this);\r\n        this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\r\n        this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\r\n        this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\r\n        this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\r\n\r\n        this.initEditDropDown = this.initEditDropDown.bind(this);\r\n        this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\r\n        this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this);\r\n        //this.listOfMonths = this.listOfMonths.bind(this);\r\n        \r\n    }\r\n\r\n    submitHandlerAddExpense = e => {\r\n        e.preventDefault();\r\n        axios.post(\"http://localhost:8080/expense/addRow\",{\r\n            expense: e.target[0].value,\r\n            budget: e.target[1].value\r\n        }).then(response => {\r\n            \r\n            const newId = response.data;\r\n            const newExpense = e.target[0].value;\r\n            const newBudget = parseFloat(e.target[1].value);\r\n            \r\n            console.log(\"Expense: \" + e.target[0].value + \"\\n\" + \"Budget: \" + e.target[1].value + \"\\n\" + \"Assigned ID: \" + response.data)\r\n            const newExpenseObject = {\r\n                id: newId,\r\n                expense: newExpense,\r\n                budget: newBudget,\r\n                spent: 0.0,\r\n                remaining: newBudget\r\n            }\r\n            this.setState({\r\n                expenses: [...this.state.expenses, newExpenseObject]\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })  \r\n        //window.location.reload(); \r\n    }\r\n\r\n    submitHandlerAddTransaction = e => {\r\n        e.preventDefault();\r\n\r\n        const today = Moment(new Date()).format('YYYY-MM-DD');\r\n        console.log('test', Moment(today).format('YYYY-MM-DD'));\r\n        // const todayYear = today.getFullYear()\r\n        // const todayMonth = today.getMonth()+1\r\n        // const todayDay = today.getDate()\r\n        \r\n        let expenseSpent;\r\n        let nameOfExpense; \r\n        this.state.expenses.filter((element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                nameOfExpense = element.expense;\r\n                expenseSpent = element.spent;\r\n            }\r\n        })\r\n\r\n        axios.post(\"http://localhost:8080/transaction/addRow\",{\r\n            expenseID: this.state.transactionDropDownSelection,\r\n            payee: e.target[1].value,\r\n            spent: parseFloat(e.target[2].value),\r\n            expenseValue: nameOfExpense, \r\n            transactionDate: today\r\n        }).then(response => {\r\n            console.log(response)\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        const updateData = {\r\n            spent: expenseSpent + parseFloat(e.target[2].value)\r\n        }\r\n\r\n        axios.patch('http://localhost:8080/expense/editSpent/' + this.state.transactionDropDownSelection, updateData)\r\n        \r\n        const updatedExpenses = this.state.expenses.filter( (element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                element.spent = expenseSpent + parseFloat(e.target[2].value)\r\n                return element;\r\n            }\r\n            else {\r\n                return element;\r\n            }\r\n        })\r\n\r\n        this.setState({expenses: updatedExpenses})\r\n    \r\n    }\r\n\r\n    handleConfirmDelete(element){\r\n        // Update the document title using the browser API\r\n        element = true;\r\n    }\r\n    submitHandlerDeleteExpense (e) {\r\n        //this.setState({id: e.target.value}) // value = expense id\r\n        console.log(e.target.value)\r\n        \r\n        //if (this.state.deleteConfirmVal) {\r\n            axios.delete('http://localhost:8080/expense/deleteRow/' + e.target.value)\r\n            .then(response => {\r\n                const idOfDeletedExpense = response.data;\r\n                const updatedExpenses = this.state.expenses.filter((expense) => {\r\n                    if (expense.id !== idOfDeletedExpense) {\r\n                        return expense; // fix syntax\r\n                    }\r\n                });\r\n                this.setState({expenses: updatedExpenses});\r\n                console.log(response)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            }) \r\n            //window.location.reload();  \r\n        //}\r\n    }\r\n\r\n    submitHandlerEditExpense (e) {\r\n        e.preventDefault();\r\n        //console.log(e);\r\n\r\n        const data = {\r\n            expense: e.target[1].value,\r\n            budget: parseFloat(e.target[2].value)\r\n        }\r\n        axios.patch('http://localhost:8080/expense/editRow/' + this.state.editDropDownSelection, data)\r\n        .then(response => {\r\n            console.log(response)\r\n            const idOfEditedExpense = response.data;\r\n            const updatedExpenses = this.state.expenses.filter((element) => {\r\n                if (element.id !== idOfEditedExpense) {\r\n                    return element;\r\n                }\r\n                else{\r\n                    element.expense = e.target[1].value;\r\n                    element.budget = parseFloat(e.target[2].value);\r\n                    return element;\r\n                }\r\n                \r\n            })\r\n            this.setState({expenses: updatedExpenses});\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    initEditDropDown() {\r\n        let lowestIndexExpense = -1;\r\n        {this.state.expenses.map((element) => {\r\n            if (lowestIndexExpense === -1) {\r\n                lowestIndexExpense = element.id;\r\n            }\r\n            else {\r\n                if (element.id < lowestIndexExpense) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n            }\r\n        })}\r\n        \r\n        let elementWithSmallestIndex = \"\";\r\n        {this.state.expenses.map((element) => {\r\n            if (element.id === lowestIndexExpense) {\r\n                elementWithSmallestIndex = element.id;\r\n            }\r\n        })}\r\n\r\n        this.setState({editDropDownSelection: elementWithSmallestIndex});\r\n    }\r\n    handleEditDropDownChange(e) {\r\n        //console.log(e);\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ editDropDownSelection: selectedElement });\r\n    }\r\n\r\n    initTransactionDropDown() {\r\n        let lowestIndexExpense = -1;\r\n        {this.state.expenses.map((element) => {\r\n            if (lowestIndexExpense === -1) {\r\n                lowestIndexExpense = element.id;\r\n            }\r\n            else {\r\n                if (element.id < lowestIndexExpense) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n            }\r\n        })}\r\n        \r\n        let elementWithSmallestIndex = \"\";\r\n        {this.state.expenses.map((element) => {\r\n            if (element.id === lowestIndexExpense) {\r\n                elementWithSmallestIndex = element.id;\r\n            }\r\n        })}\r\n\r\n        this.setState({transactionDropDownSelection: elementWithSmallestIndex});\r\n    }\r\n    handleTransactionDropDownChange(e) {\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ transactionDropDownSelection: selectedElement });\r\n    }\r\n\r\n    handleSelectedMonthDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No month selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            {this.state.listOfMonths.map((element) => {\r\n                if (element.monthNum === parseInt(e.target.value)) {\r\n                    selectedElement = element.monthNum;\r\n                }\r\n            })}\r\n            this.setState({selectedMonth: selectedElement}, function () {\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    //console.log(this.state.selectedMonth)\r\n                    this.setState({selectedTransactions: res.data});\r\n                    console.log(res.data);\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSelectedYearDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No Year selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            selectedElement = e.target.value;\r\n            this.setState({selectedYear: selectedElement}, function () {\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    //console.log(this.state.selectedMonth)\r\n                    this.setState({selectedTransactions: res.data});\r\n                    console.log(res.data);\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleAddExpenseModal() {\r\n        this.setState({addExpenseToggle : !this.state.addExpenseToggle});\r\n    }\r\n    toggleAddTransactionModal() {\r\n        this.setState({addTransactionToggle: !this.state.addTransactionToggle});\r\n    }\r\n    toggleDeleteExpenseModal() {\r\n        this.setState({deleteExpenseToggle : !this.state.deleteExpenseToggle});\r\n    }\r\n    toggleEditExpenseModal() {\r\n        this.setState({editExpenseToggle: !this.state.editExpenseToggle});\r\n    }\r\n\r\n    renderTableData() {\r\n\r\n        return this.state.expenses.map((element) => {\r\n            \r\n           const amountSpent = this.state.spentValsForAllExpenses.get(element.id);\r\n           console.log(amountSpent);\r\n           return (\r\n              <tr>\r\n                 <td>{element.expense}</td>\r\n                 <td>${(element.budget).toFixed(2)}</td>\r\n                 <td>${(amountSpent)}</td>\r\n                 <td>${(element.budget-amountSpent).toFixed(2)}</td>\r\n                 <td><button name=\"deleteButton\" value={element.id} onClick={(e) => {this.submitHandlerDeleteExpense(e);this.toggleDeleteExpenseModal()}}>Delete</button></td>\r\n              </tr>\r\n           )\r\n        })\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/expense/allExpenses\")  // gets all expenses from mysql\r\n        .then(res => {\r\n            const expenses = res.data;\r\n            console.log('axios expenses: ', expenses);\r\n            this.setState({expenses});\r\n\r\n            const today = new Date();\r\n            this.setState({selectedMonth: today.getMonth()+1, selectedYear: today.getFullYear()}, function () { //gets transactions for current month and year\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    this.setState({selectedTransactions: res.data});\r\n                    \r\n                    let updatedSpentValsForAllExpenses = new Map(); // rename to better name\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedSpentValsForAllExpenses.set(expense.id, 0);\r\n            \r\n                    });\r\n            \r\n                    this.setState({spentValsForAllExpenses: updatedSpentValsForAllExpenses});\r\n\r\n                    console.log(\"Spent Vals\",this.state.spentValsForAllExpenses);\r\n\r\n                    this.state.selectedTransactions.map((transaction) => {\r\n                        let tempMap = new Map(this.state.spentValsForAllExpenses);\r\n                        const expenseSpentVal = tempMap.get(transaction.expenseID)\r\n                        tempMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                    })\r\n                    // let newMap = new Map(myHashMap);\r\n                    // console.log('newMap', newMap);\r\n\r\n                    // newMap.filter((expenseId){\r\n                    //     if (expenseId === transactions.expenseId)\r\n                    //     {\r\n                    //        newMap.set(expenseId, newMap.get(expenseId) + transaction.spentVal) \r\n                    //     }\r\n                    // });\r\n                })\r\n            });\r\n    \r\n            \r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"mainTitle\">Budget Tracker</h1>\r\n                <div className=\"buttons-flex\">\r\n                    <button onClick={this.toggleAddExpenseModal}>Add Expense</button>\r\n                    <button onClick={ () => {this.toggleAddTransactionModal();this.initTransactionDropDown();}}>Add Transaction</button>\r\n                    <button onClick={ () => {this.toggleEditExpenseModal();this.initEditDropDown();}}>Edit Expense</button>\r\n                    <Link to=\"/transactionsTable\">\r\n                        <button className=\"buttons-flex\">Show Transactions</button>\r\n                    </Link>\r\n                </div>\r\n                <AddExpenseForm  handleClose={this.toggleAddExpenseModal} show={this.state.addExpenseToggle} submitHandler={this.submitHandlerAddExpense}/>\r\n                {/*<DeleteExpenseForm show={this.state.deleteExpenseToggle} handleClose={this.toggleDeleteExpenseModal} deletConfirm={this.state.deleteConfirmVal} handleDeleteConfirm={this.handleConfirmDelete} /> */}\r\n                <EditExpenseForm myList={this.state.expenses} handleClose={this.toggleEditExpenseModal} handleChange={this.handleEditDropDownChange} show={this.state.editExpenseToggle} submitHandler={this.submitHandlerEditExpense}/>\r\n                <AddTransactionForm  myList={this.state.expenses} handleClose={this.toggleAddTransactionModal} show={this.state.addTransactionToggle} submitHandler={this.submitHandlerAddTransaction} handleChange={this.handleTransactionDropDownChange}/>\r\n                \r\n                <div className=\"dropdown-flex\">\r\n                    <select onChange={this.handleSelectedMonthDropDownChange}>\r\n                        <option value=\"-1\">--Month--</option>\r\n                        {this.state.listOfMonths.map((element) => (\r\n                            <option value={element.monthNum}>{element.month}</option>\r\n                        ))}\r\n                    </select>\r\n                    <select onChange={this.handleSelectedYearDropDownChange}>\r\n                        <option value=\"-1\">--Year--</option>\r\n                        <option value={this.state.today.getFullYear()-2}>{this.state.today.getFullYear()-2}</option>\r\n                        <option value={this.state.today.getFullYear()-1}>{this.state.today.getFullYear()-1}</option>\r\n                        <option value={this.state.today.getFullYear()}>{this.state.today.getFullYear()}</option>\r\n                        <option value={this.state.today.getFullYear()+1}>{this.state.today.getFullYear()+1}</option>\r\n                        <option value={this.state.today.getFullYear()+2}>{this.state.today.getFullYear()+2}</option>\r\n                    </select>\r\n                </div>\r\n                \r\n                <table className=\"expense-table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Expense</th>\r\n                            <th>Budget</th>\r\n                            <th>Spent</th>\r\n                            <th>Remaining</th>\r\n                            <th>Delete()</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}