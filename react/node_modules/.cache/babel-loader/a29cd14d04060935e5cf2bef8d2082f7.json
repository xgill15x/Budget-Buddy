{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\OneDrive\\\\desktop\\\\BudgetTracker\\\\react\\\\src\\\\Home.js\";\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport AddExpenseForm from './AddExpenseForm';\nimport DeleteExpenseForm from './DeleteExpenseForm';\nimport EditExpenseForm from './EditExpenseForm';\nimport AddTransactionForm from './AddTransactionForm';\nimport NavBar from './NavBar';\nimport { Link } from \"react-router-dom\";\nimport Moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandlerAddExpense = e => {\n      e.preventDefault();\n      axios.post(\"http://localhost:8080/expense/addRow\", {\n        expense: e.target[0].value,\n        budget: e.target[1].value,\n        userName: this.props.username\n      }).then(response => {\n        const newId = response.data;\n        const newExpense = e.target[0].value;\n        const newBudget = parseFloat(e.target[1].value);\n        console.log(\"Expense: \" + e.target[0].value + \"\\n\" + \"Budget: \" + e.target[1].value + \"\\n\" + \"Assigned ID: \" + response.data);\n        const newExpenseObject = {\n          id: newId,\n          expense: newExpense,\n          budget: newBudget,\n          spent: 0.0,\n          remaining: newBudget,\n          userName: this.props.userName\n        };\n        this.setState({\n          expenses: [...this.state.expenses, newExpenseObject]\n        }, function () {\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          updatedMap.set(newExpenseObject.id, 0.0);\n          this.setState({\n            spentValsForAllExpenses: updatedMap\n          });\n        });\n      }).catch(error => {\n        console.log(error);\n      }); //window.location.reload(); \n    };\n\n    this.submitHandlerAddTransaction = e => {\n      e.preventDefault();\n      const today = Moment(new Date()).format('YYYY-MM-DD');\n      console.log('test', Moment(today).format('YYYY-MM-DD')); // const todayYear = today.getFullYear()\n      // const todayMonth = today.getMonth()+1\n      // const todayDay = today.getDate()\n\n      let expenseSpent;\n      let nameOfExpense;\n      this.state.expenses.filter(element => {\n        if (element.id === this.state.transactionDropDownSelection) {\n          nameOfExpense = element.expense;\n          expenseSpent = element.spent;\n        }\n      });\n      axios.post(\"http://localhost:8080/transaction/addRow\", {\n        expenseID: this.state.transactionDropDownSelection,\n        payee: e.target[1].value,\n        spent: parseFloat(e.target[2].value),\n        expenseValue: nameOfExpense,\n        transactionDate: today,\n        userName: this.props.userName\n      }).then(response => {\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n      const updateData = {\n        spent: expenseSpent + parseFloat(e.target[2].value)\n      };\n      axios.patch('http://localhost:8080/expense/editSpent/' + this.state.transactionDropDownSelection, updateData);\n      let updatedMap = new Map(this.state.spentValsForAllExpenses);\n      let targetID;\n      this.state.expenses.map(expense => {\n        console.log(\"dropdownselection\", this.state.transactionDropDownSelection);\n\n        if (expense.id === this.state.transactionDropDownSelection) {\n          targetID = expense.id;\n          console.log(\"targetID\", targetID);\n        }\n      });\n      this.state.expenses.map(expense => {\n        if (expense.id === targetID) {\n          console.log(\"in here\");\n          updatedMap.set(expense.id, updatedMap.get(expense.id) + parseFloat(e.target[2].value));\n          console.log(updatedMap.get(expense.id));\n        }\n      });\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id === this.state.transactionDropDownSelection) {\n          element.spent = expenseSpent + parseFloat(e.target[2].value);\n          return element;\n        } else {\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses,\n        spentValsForAllExpenses: updatedMap\n      });\n    };\n\n    this.state = {\n      expenses: [],\n      editDropDownSelection: 0,\n      transactionDropDownSelection: 0,\n      addExpenseToggle: false,\n      addTransactionToggle: false,\n      deleteExpenseToggle: false,\n      deleteConfirmVal: false,\n      editExpenseToggle: false,\n      selectedTransactions: [],\n      listOfMonths: [{\n        month: \"January\",\n        monthNum: 1\n      }, {\n        month: \"February\",\n        monthNum: 2\n      }, {\n        month: \"March\",\n        monthNum: 3\n      }, {\n        month: \"April\",\n        monthNum: 4\n      }, {\n        month: \"May\",\n        monthNum: 5\n      }, {\n        month: \"June\",\n        monthNum: 6\n      }, {\n        month: \"July\",\n        monthNum: 7\n      }, {\n        month: \"August\",\n        monthNum: 8\n      }, {\n        month: \"September\",\n        monthNum: 9\n      }, {\n        month: \"October\",\n        monthNum: 10\n      }, {\n        month: \"November\",\n        monthNum: 11\n      }, {\n        month: \"December\",\n        monthNum: 12\n      }],\n      selectedMonth: -1,\n      selectedYear: -1,\n      today: new Date(),\n      spentValsForAllExpenses: new Map(),\n      loggedInUsername: ''\n    };\n    this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\n    this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this);\n    this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\n    this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\n    this.handleConfirmDelete = this.handleConfirmDelete.bind(this);\n    this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\n    this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\n    this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\n    this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\n    this.initEditDropDown = this.initEditDropDown.bind(this);\n    this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\n    this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this); //this.listOfMonths = this.listOfMonths.bind(this);\n  }\n\n  handleConfirmDelete(element) {\n    // Update the document title using the browser API\n    element = true;\n  }\n\n  submitHandlerDeleteExpense(e) {\n    //this.setState({id: e.target.value}) // value = expense id\n    console.log(e.target.value); //if (this.state.deleteConfirmVal) {\n\n    axios.delete('http://localhost:8080/expense/deleteRow/' + e.target.value).then(response => {\n      const idOfDeletedExpense = response.data;\n      const updatedExpenses = this.state.expenses.filter(expense => {\n        if (expense.id !== idOfDeletedExpense) {\n          return expense; // fix syntax\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    }); //window.location.reload();  \n    //}\n  }\n\n  submitHandlerEditExpense(e) {\n    e.preventDefault(); //console.log(e);\n\n    const data = {\n      expense: e.target[1].value,\n      budget: parseFloat(e.target[2].value)\n    };\n    axios.patch('http://localhost:8080/expense/editRow/' + this.state.editDropDownSelection, data).then(response => {\n      console.log(response);\n      const idOfEditedExpense = response.data;\n      const updatedExpenses = this.state.expenses.filter(element => {\n        if (element.id !== idOfEditedExpense) {\n          return element;\n        } else {\n          element.expense = e.target[1].value;\n          element.budget = parseFloat(e.target[2].value);\n          return element;\n        }\n      });\n      this.setState({\n        expenses: updatedExpenses\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  initEditDropDown() {\n    let lowestIndexExpense = -1;\n    {\n      this.state.expenses.map(element => {\n        if (lowestIndexExpense === -1) {\n          lowestIndexExpense = element.id;\n        } else {\n          if (element.id < lowestIndexExpense) {\n            lowestIndexExpense = element.id;\n          }\n        }\n      });\n    }\n    let elementWithSmallestIndex = \"\";\n    {\n      this.state.expenses.map(element => {\n        if (element.id === lowestIndexExpense) {\n          elementWithSmallestIndex = element.id;\n        }\n      });\n    }\n    this.setState({\n      editDropDownSelection: elementWithSmallestIndex\n    });\n  }\n\n  handleEditDropDownChange(e) {\n    //console.log(e);\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      editDropDownSelection: selectedElement\n    });\n  }\n\n  initTransactionDropDown() {\n    let lowestIndexExpense = -1;\n    {\n      this.state.expenses.map(element => {\n        if (lowestIndexExpense === -1) {\n          lowestIndexExpense = element.id;\n        } else {\n          if (element.id < lowestIndexExpense) {\n            lowestIndexExpense = element.id;\n          }\n        }\n      });\n    }\n    let elementWithSmallestIndex = \"\";\n    {\n      this.state.expenses.map(element => {\n        if (element.id === lowestIndexExpense) {\n          elementWithSmallestIndex = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: elementWithSmallestIndex\n    });\n  }\n\n  handleTransactionDropDownChange(e) {\n    let selectedElement = 0;\n    {\n      this.state.expenses.map(element => {\n        if (element.expense === e.target.value) {\n          selectedElement = element.id;\n        }\n      });\n    }\n    this.setState({\n      transactionDropDownSelection: selectedElement\n    });\n  }\n\n  handleSelectedMonthDropDownChange(e) {\n    let selectedElement = 0; //console.log(e.target.value)\n\n    if (e.target.value === \"-1\") {\n      console.log(\"No month selected.\");\n      return;\n    } else {\n      {\n        this.state.listOfMonths.map(element => {\n          if (element.monthNum === parseInt(e.target.value)) {\n            selectedElement = element.monthNum;\n          }\n        });\n      }\n      this.setState({\n        selectedMonth: selectedElement\n      }, function () {\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          console.log(\"newTransactionDate(MonthChange): \", res.data);\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          this.state.expenses.map(expense => {\n            updatedMap.set(expense.id, 0.0);\n          });\n          this.setState({\n            selectedTransactions: res.data,\n            spentValsForAllExpenses: updatedMap\n          }, function () {\n            let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n            this.state.selectedTransactions.map(transaction => {\n              const expenseSpentVal = changingSpentMap.get(transaction.expenseID);\n              changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n            });\n            this.setState({\n              spentValsForAllExpenses: changingSpentMap\n            });\n          });\n        });\n      });\n    }\n  }\n\n  handleSelectedYearDropDownChange(e) {\n    let selectedElement = 0; //console.log(e.target.value)\n\n    if (e.target.value === \"-1\") {\n      console.log(\"No Year selected.\");\n      return;\n    } else {\n      selectedElement = e.target.value;\n      this.setState({\n        selectedYear: selectedElement\n      }, function () {\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          console.log(\"newTransactionDate(YearChange): \", res.data);\n          let updatedMap = new Map(this.state.spentValsForAllExpenses);\n          this.state.expenses.map(expense => {\n            updatedMap.set(expense.id, 0.0);\n          });\n          this.setState({\n            selectedTransactions: res.data,\n            spentValsForAllExpenses: updatedMap\n          }, function () {\n            let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\n            this.state.selectedTransactions.map(transaction => {\n              const expenseSpentVal = changingSpentMap.get(transaction.expenseID);\n              changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n            });\n            this.setState({\n              spentValsForAllExpenses: changingSpentMap\n            });\n          });\n        });\n      });\n    }\n  }\n\n  toggleAddExpenseModal() {\n    this.setState({\n      addExpenseToggle: !this.state.addExpenseToggle\n    });\n  }\n\n  toggleAddTransactionModal() {\n    this.setState({\n      addTransactionToggle: !this.state.addTransactionToggle\n    });\n  }\n\n  toggleDeleteExpenseModal() {\n    this.setState({\n      deleteExpenseToggle: !this.state.deleteExpenseToggle\n    });\n  }\n\n  toggleEditExpenseModal() {\n    this.setState({\n      editExpenseToggle: !this.state.editExpenseToggle\n    });\n  }\n\n  renderTableData() {\n    return this.state.expenses.map(element => {\n      const amountSpent = parseFloat(this.state.spentValsForAllExpenses.get(element.id)); //console.log(amountSpent);\n\n      return /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"td\", {\n          children: element.expense\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"$\", element.budget.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"$\", amountSpent.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: [\"$\", (element.budget - amountSpent).toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"deleteButton\",\n            value: element.id,\n            onClick: e => {\n              this.submitHandlerDeleteExpense(e);\n              this.toggleDeleteExpenseModal();\n            },\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 18\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 15\n      }, this);\n    });\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/expense/allExpenses\") // gets all expenses from mysql\n    .then(res => {\n      const expenses = res.data;\n      console.log('axios expenses: ', expenses);\n      this.setState({\n        expenses\n      });\n      const today = new Date();\n      this.setState({\n        selectedMonth: today.getMonth() + 1,\n        selectedYear: today.getFullYear()\n      }, function () {\n        //gets transactions for current month and year\n        axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth + \"/\" + this.state.selectedYear).then(res => {\n          let userTransactions = res.data.filter(transaction => {\n            if (transaction.userName === this.props.username) {\n              return transaction;\n            }\n          });\n          this.setState({\n            selectedTransactions: userTransactions\n          }, function () {\n            console.log(this.state.selectedTransactions);\n          });\n          let updatedSpentValsForAllExpenses = new Map(); // rename to better name\n\n          this.state.expenses.map(expense => {\n            updatedSpentValsForAllExpenses.set(expense.id, 0.0);\n          });\n          this.setState({\n            spentValsForAllExpenses: updatedSpentValsForAllExpenses\n          });\n          this.state.selectedTransactions.map(transaction => {\n            let tempMap = new Map(this.state.spentValsForAllExpenses);\n            const expenseSpentVal = tempMap.get(transaction.expenseID);\n            tempMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\n            this.setState({\n              spentValsForAllExpenses: tempMap\n            });\n          }); // let newMap = new Map(myHashMap);\n          // console.log('newMap', newMap);\n          // newMap.filter((expenseId){\n          //     if (expenseId === transactions.expenseId)\n          //     {\n          //        newMap.set(expenseId, newMap.get(expenseId) + transaction.spentVal) \n          //     }\n          // });\n        });\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"mainTitle\",\n          children: this.props.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            class: \"btn btn-danger\",\n            onClick: this.toggleAddExpenseModal,\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.toggleAddTransactionModal();\n              this.initTransactionDropDown();\n            },\n            children: \"Add Transaction\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.toggleEditExpenseModal();\n              this.initEditDropDown();\n            },\n            children: \"Edit Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/transactionsTable\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"buttons-flex\",\n              children: \"Show Transactions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 459,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AddExpenseForm, {\n          handleClose: this.toggleAddExpenseModal,\n          show: this.state.addExpenseToggle,\n          submitHandler: this.submitHandlerAddExpense\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(EditExpenseForm, {\n          myList: this.state.expenses,\n          handleClose: this.toggleEditExpenseModal,\n          handleChange: this.handleEditDropDownChange,\n          show: this.state.editExpenseToggle,\n          submitHandler: this.submitHandlerEditExpense\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(AddTransactionForm, {\n          myList: this.state.expenses,\n          handleClose: this.toggleAddTransactionModal,\n          show: this.state.addTransactionToggle,\n          submitHandler: this.submitHandlerAddTransaction,\n          handleChange: this.handleTransactionDropDownChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dropdown-flex\",\n          id: \"dateDropDown\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            value: this.state.selectedMonth,\n            onChange: this.handleSelectedMonthDropDownChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              disabled: true,\n              value: \"-1\",\n              children: \"--Month--\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 29\n            }, this), this.state.listOfMonths.map(element => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: element.monthNum,\n              children: element.month\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 33\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            onChange: this.handleSelectedYearDropDownChange,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              disabled: true,\n              value: \"-1\",\n              children: \"--Year--\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 476,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: this.state.today.getFullYear() - 4,\n              children: this.state.today.getFullYear() - 4\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: this.state.today.getFullYear() - 3,\n              children: this.state.today.getFullYear() - 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: this.state.today.getFullYear() - 2,\n              children: this.state.today.getFullYear() - 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 479,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: this.state.today.getFullYear() - 1,\n              children: this.state.today.getFullYear() - 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 480,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              selected: true,\n              value: this.state.today.getFullYear(),\n              children: this.state.today.getFullYear()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"expense-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Expense\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Budget\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Spent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Remaining\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Delete()\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: this.renderTableData()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/jason/OneDrive/desktop/BudgetTracker/react/src/Home.js"],"names":["React","useState","axios","AddExpenseForm","DeleteExpenseForm","EditExpenseForm","AddTransactionForm","NavBar","Link","Moment","Home","Component","constructor","props","submitHandlerAddExpense","e","preventDefault","post","expense","target","value","budget","userName","username","then","response","newId","data","newExpense","newBudget","parseFloat","console","log","newExpenseObject","id","spent","remaining","setState","expenses","state","updatedMap","Map","spentValsForAllExpenses","set","catch","error","submitHandlerAddTransaction","today","Date","format","expenseSpent","nameOfExpense","filter","element","transactionDropDownSelection","expenseID","payee","expenseValue","transactionDate","updateData","patch","targetID","map","get","updatedExpenses","editDropDownSelection","addExpenseToggle","addTransactionToggle","deleteExpenseToggle","deleteConfirmVal","editExpenseToggle","selectedTransactions","listOfMonths","month","monthNum","selectedMonth","selectedYear","loggedInUsername","toggleAddExpenseModal","bind","toggleAddTransactionModal","toggleDeleteExpenseModal","toggleEditExpenseModal","handleConfirmDelete","handleEditDropDownChange","handleTransactionDropDownChange","handleSelectedMonthDropDownChange","handleSelectedYearDropDownChange","initEditDropDown","initTransactionDropDown","submitHandlerEditExpense","submitHandlerDeleteExpense","delete","idOfDeletedExpense","idOfEditedExpense","lowestIndexExpense","elementWithSmallestIndex","selectedElement","parseInt","res","changingSpentMap","transaction","expenseSpentVal","renderTableData","amountSpent","toFixed","componentDidMount","getMonth","getFullYear","userTransactions","updatedSpentValsForAllExpenses","tempMap","render"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport AddExpenseForm from './AddExpenseForm';\r\nimport DeleteExpenseForm from './DeleteExpenseForm';\r\nimport EditExpenseForm from './EditExpenseForm';\r\nimport AddTransactionForm from './AddTransactionForm';\r\nimport NavBar from './NavBar';\r\nimport {Link} from \"react-router-dom\";\r\nimport Moment from 'moment';\r\n\r\n\r\nexport default class Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            \r\n            expenses: [],\r\n            editDropDownSelection:0,\r\n            transactionDropDownSelection:0,\r\n\r\n            addExpenseToggle: false,\r\n            addTransactionToggle: false,\r\n            deleteExpenseToggle: false,\r\n            deleteConfirmVal: false,\r\n            editExpenseToggle: false,\r\n\r\n            selectedTransactions: [],\r\n            listOfMonths: [{month:\"January\", monthNum: 1}, {month:\"February\", monthNum: 2}, {month:\"March\", monthNum: 3}, {month:\"April\", monthNum: 4}, {month:\"May\", monthNum: 5}, {month:\"June\", monthNum: 6}, {month:\"July\", monthNum: 7}, {month:\"August\", monthNum: 8}, {month:\"September\", monthNum: 9}, {month:\"October\", monthNum: 10}, {month:\"November\", monthNum: 11}, {month:\"December\", monthNum: 12}],\r\n            selectedMonth: -1,\r\n            selectedYear: -1,\r\n            \r\n            today: new Date(),\r\n            spentValsForAllExpenses: new Map(),\r\n\r\n            loggedInUsername: ''\r\n        };\r\n\r\n        this.toggleAddExpenseModal = this.toggleAddExpenseModal.bind(this);\r\n        this.toggleAddTransactionModal = this.toggleAddTransactionModal.bind(this)\r\n        this.toggleDeleteExpenseModal = this.toggleDeleteExpenseModal.bind(this);\r\n        this.toggleEditExpenseModal = this.toggleEditExpenseModal.bind(this);\r\n        \r\n        this.handleConfirmDelete = this.handleConfirmDelete.bind(this);\r\n        this.handleEditDropDownChange = this.handleEditDropDownChange.bind(this);\r\n        this.handleTransactionDropDownChange = this.handleTransactionDropDownChange.bind(this);\r\n        this.handleSelectedMonthDropDownChange = this.handleSelectedMonthDropDownChange.bind(this);\r\n        this.handleSelectedYearDropDownChange = this.handleSelectedYearDropDownChange.bind(this);\r\n\r\n        this.initEditDropDown = this.initEditDropDown.bind(this);\r\n        this.initTransactionDropDown = this.initTransactionDropDown.bind(this);\r\n        this.submitHandlerEditExpense = this.submitHandlerEditExpense.bind(this);\r\n        //this.listOfMonths = this.listOfMonths.bind(this);\r\n        \r\n    }\r\n\r\n    submitHandlerAddExpense = e => {\r\n        e.preventDefault();\r\n        axios.post(\"http://localhost:8080/expense/addRow\",{\r\n            expense: e.target[0].value,\r\n            budget: e.target[1].value,\r\n            userName: this.props.username\r\n        }).then(response => {\r\n            \r\n            const newId = response.data;\r\n            const newExpense = e.target[0].value;\r\n            const newBudget = parseFloat(e.target[1].value);\r\n            \r\n            console.log(\"Expense: \" + e.target[0].value + \"\\n\" + \"Budget: \" + e.target[1].value + \"\\n\" + \"Assigned ID: \" + response.data)\r\n            const newExpenseObject = {\r\n                id: newId,\r\n                expense: newExpense,\r\n                budget: newBudget,\r\n                spent: 0.0,\r\n                remaining: newBudget,\r\n                userName: this.props.userName\r\n            }\r\n            \r\n            this.setState({\r\n                expenses: [...this.state.expenses, newExpenseObject]\r\n            }, function() {\r\n                let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n                updatedMap.set(newExpenseObject.id, 0.0);\r\n                this.setState({spentValsForAllExpenses: updatedMap});\r\n            })\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })  \r\n        //window.location.reload(); \r\n    }\r\n\r\n    submitHandlerAddTransaction = e => {\r\n        e.preventDefault();\r\n        \r\n        const today = Moment(new Date()).format('YYYY-MM-DD');\r\n        console.log('test', Moment(today).format('YYYY-MM-DD'));\r\n        // const todayYear = today.getFullYear()\r\n        // const todayMonth = today.getMonth()+1\r\n        // const todayDay = today.getDate()\r\n        \r\n        let expenseSpent;\r\n        let nameOfExpense; \r\n        this.state.expenses.filter((element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                nameOfExpense = element.expense;\r\n                expenseSpent = element.spent;\r\n            }\r\n        })\r\n\r\n        axios.post(\"http://localhost:8080/transaction/addRow\",{\r\n            expenseID: this.state.transactionDropDownSelection,\r\n            payee: e.target[1].value,\r\n            spent: parseFloat(e.target[2].value),\r\n            expenseValue: nameOfExpense, \r\n            transactionDate: today,\r\n            userName: this.props.userName\r\n        }).then(response => {\r\n            console.log(response)\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        const updateData = {\r\n            spent: expenseSpent + parseFloat(e.target[2].value)\r\n        }\r\n\r\n        axios.patch('http://localhost:8080/expense/editSpent/' + this.state.transactionDropDownSelection, updateData)\r\n        \r\n        let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n        let targetID;\r\n        this.state.expenses.map((expense) => {\r\n            console.log(\"dropdownselection\",this.state.transactionDropDownSelection)\r\n            if (expense.id === this.state.transactionDropDownSelection) {\r\n                targetID = expense.id;\r\n                console.log(\"targetID\",targetID)\r\n            }\r\n        })\r\n\r\n        this.state.expenses.map((expense) => {\r\n            if (expense.id === targetID) {\r\n                console.log(\"in here\");\r\n                updatedMap.set(expense.id, updatedMap.get(expense.id) + parseFloat(e.target[2].value))\r\n                console.log(updatedMap.get(expense.id));\r\n            }\r\n        })\r\n\r\n        const updatedExpenses = this.state.expenses.filter( (element) => {\r\n            if (element.id === this.state.transactionDropDownSelection) {\r\n                element.spent = expenseSpent + parseFloat(e.target[2].value)\r\n                return element;\r\n            }\r\n            else {\r\n                return element;\r\n            }\r\n        })\r\n\r\n        this.setState({expenses: updatedExpenses, spentValsForAllExpenses: updatedMap})\r\n    \r\n    }\r\n\r\n    handleConfirmDelete(element){\r\n        // Update the document title using the browser API\r\n        element = true;\r\n    }\r\n    submitHandlerDeleteExpense (e) {\r\n        //this.setState({id: e.target.value}) // value = expense id\r\n        console.log(e.target.value)\r\n        \r\n        //if (this.state.deleteConfirmVal) {\r\n            axios.delete('http://localhost:8080/expense/deleteRow/' + e.target.value)\r\n            .then(response => {\r\n                const idOfDeletedExpense = response.data;\r\n                const updatedExpenses = this.state.expenses.filter((expense) => {\r\n                    if (expense.id !== idOfDeletedExpense) {\r\n                        return expense; // fix syntax\r\n                    }\r\n                });\r\n                this.setState({expenses: updatedExpenses});\r\n                console.log(response)\r\n            }).catch(error => {\r\n                console.log(error)\r\n            }) \r\n            //window.location.reload();  \r\n        //}\r\n    }\r\n\r\n    submitHandlerEditExpense (e) {\r\n        e.preventDefault();\r\n        //console.log(e);\r\n\r\n        const data = {\r\n            expense: e.target[1].value,\r\n            budget: parseFloat(e.target[2].value)\r\n        }\r\n        axios.patch('http://localhost:8080/expense/editRow/' + this.state.editDropDownSelection, data)\r\n        .then(response => {\r\n            console.log(response)\r\n            const idOfEditedExpense = response.data;\r\n            const updatedExpenses = this.state.expenses.filter((element) => {\r\n                if (element.id !== idOfEditedExpense) {\r\n                    return element;\r\n                }\r\n                else{\r\n                    element.expense = e.target[1].value;\r\n                    element.budget = parseFloat(e.target[2].value);\r\n                    return element;\r\n                }\r\n                \r\n            })\r\n            this.setState({expenses: updatedExpenses});\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n\r\n        \r\n    }\r\n\r\n    initEditDropDown() {\r\n        let lowestIndexExpense = -1;\r\n        {this.state.expenses.map((element) => {\r\n            if (lowestIndexExpense === -1) {\r\n                lowestIndexExpense = element.id;\r\n            }\r\n            else {\r\n                if (element.id < lowestIndexExpense) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n            }\r\n        })}\r\n        \r\n        let elementWithSmallestIndex = \"\";\r\n        {this.state.expenses.map((element) => {\r\n            if (element.id === lowestIndexExpense) {\r\n                elementWithSmallestIndex = element.id;\r\n            }\r\n        })}\r\n\r\n        this.setState({editDropDownSelection: elementWithSmallestIndex});\r\n    }\r\n    handleEditDropDownChange(e) {\r\n        //console.log(e);\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ editDropDownSelection: selectedElement });\r\n    }\r\n\r\n    initTransactionDropDown() {\r\n        let lowestIndexExpense = -1;\r\n        {this.state.expenses.map((element) => {\r\n            if (lowestIndexExpense === -1) {\r\n                lowestIndexExpense = element.id;\r\n            }\r\n            else {\r\n                if (element.id < lowestIndexExpense) {\r\n                    lowestIndexExpense = element.id;\r\n                }\r\n            }\r\n        })}\r\n        \r\n        let elementWithSmallestIndex = \"\";\r\n        {this.state.expenses.map((element) => {\r\n            if (element.id === lowestIndexExpense) {\r\n                elementWithSmallestIndex = element.id;\r\n            }\r\n        })}\r\n\r\n        this.setState({transactionDropDownSelection: elementWithSmallestIndex});\r\n    }\r\n    handleTransactionDropDownChange(e) {\r\n        let selectedElement=0;\r\n        {this.state.expenses.map((element) => {\r\n            if (element.expense === e.target.value) {\r\n                selectedElement = element.id;\r\n            }\r\n        })}\r\n        this.setState({ transactionDropDownSelection: selectedElement });\r\n    }\r\n\r\n    handleSelectedMonthDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No month selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            {this.state.listOfMonths.map((element) => {\r\n                if (element.monthNum === parseInt(e.target.value)) {\r\n                    selectedElement = element.monthNum;\r\n                }\r\n            })}\r\n            this.setState({selectedMonth: selectedElement}, function () {\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(\"newTransactionDate(MonthChange): \", res.data);\r\n                    \r\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedMap.set(expense.id, 0.0);\r\n                    })\r\n                    \r\n                    this.setState({selectedTransactions: res.data, spentValsForAllExpenses: updatedMap}, function(){\r\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\r\n                        \r\n                        this.state.selectedTransactions.map((transaction) => {\r\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID)\r\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                \r\n                        })\r\n                        this.setState({spentValsForAllExpenses: changingSpentMap})\r\n                    })\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    handleSelectedYearDropDownChange(e) {\r\n        let selectedElement=0;\r\n        //console.log(e.target.value)\r\n        if (e.target.value === \"-1\") {\r\n            console.log(\"No Year selected.\")\r\n            return;\r\n        }\r\n        else{\r\n            selectedElement = e.target.value;\r\n            \r\n            this.setState({selectedYear: selectedElement}, function () {\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n                    console.log(\"newTransactionDate(YearChange): \" ,res.data);\r\n\r\n                    let updatedMap = new Map(this.state.spentValsForAllExpenses);\r\n                                       \r\n                    this.state.expenses.map((expense) => {\r\n                        updatedMap.set(expense.id, 0.0);\r\n                    })\r\n                    \r\n        \r\n                    this.setState({selectedTransactions: res.data, spentValsForAllExpenses: updatedMap}, function() {\r\n                        let changingSpentMap = new Map(this.state.spentValsForAllExpenses);\r\n                        \r\n                        this.state.selectedTransactions.map((transaction) => {\r\n                            const expenseSpentVal = changingSpentMap.get(transaction.expenseID)\r\n                            changingSpentMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                \r\n                        })\r\n                        this.setState({spentValsForAllExpenses: changingSpentMap})\r\n                    });\r\n                    \r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    toggleAddExpenseModal() {\r\n        this.setState({addExpenseToggle : !this.state.addExpenseToggle});\r\n    }\r\n    toggleAddTransactionModal() {\r\n        this.setState({addTransactionToggle: !this.state.addTransactionToggle});\r\n    }\r\n    toggleDeleteExpenseModal() {\r\n        this.setState({deleteExpenseToggle : !this.state.deleteExpenseToggle});\r\n    }\r\n    toggleEditExpenseModal() {\r\n        this.setState({editExpenseToggle: !this.state.editExpenseToggle});\r\n    }\r\n\r\n    renderTableData() {\r\n\r\n        return this.state.expenses.map((element) => {\r\n            \r\n           const amountSpent = parseFloat(this.state.spentValsForAllExpenses.get(element.id));\r\n           //console.log(amountSpent);\r\n           return (\r\n              <tr>\r\n                 <td>{element.expense}</td>\r\n                 <td>${(element.budget).toFixed(2)}</td>\r\n                 <td>${(amountSpent).toFixed(2)}</td>\r\n                 <td>${(element.budget-amountSpent).toFixed(2)}</td>\r\n                 <td><button name=\"deleteButton\" value={element.id} onClick={(e) => {this.submitHandlerDeleteExpense(e);this.toggleDeleteExpenseModal()}}>Delete</button></td>\r\n              </tr>\r\n           )\r\n        })\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(\"http://localhost:8080/expense/allExpenses\")  // gets all expenses from mysql\r\n        .then(res => {\r\n            const expenses = res.data;\r\n            console.log('axios expenses: ', expenses);\r\n            this.setState({expenses});\r\n\r\n            const today = new Date();\r\n            this.setState({selectedMonth: today.getMonth()+1, selectedYear: today.getFullYear()}, function () { //gets transactions for current month and year\r\n                axios.get(\"http://localhost:8080/transaction/selectedTransactions/\" + this.state.selectedMonth +\"/\"+ this.state.selectedYear)\r\n                .then(res => {\r\n\r\n                    let userTransactions = (res.data).filter((transaction) => {\r\n                        if (transaction.userName === this.props.username) {\r\n                            return transaction;\r\n                        }\r\n                    })\r\n                    this.setState({selectedTransactions: userTransactions}, function() {\r\n                        console.log(this.state.selectedTransactions)\r\n                    });\r\n\r\n                    \r\n                    let updatedSpentValsForAllExpenses = new Map(); // rename to better name\r\n                    this.state.expenses.map((expense) => {\r\n                        updatedSpentValsForAllExpenses.set(expense.id, 0.0);\r\n            \r\n                    });\r\n            \r\n                    this.setState({spentValsForAllExpenses: updatedSpentValsForAllExpenses});\r\n\r\n                    this.state.selectedTransactions.map((transaction) => {\r\n                        let tempMap = new Map(this.state.spentValsForAllExpenses);\r\n                        const expenseSpentVal = tempMap.get(transaction.expenseID)\r\n                        tempMap.set(transaction.expenseID, expenseSpentVal + transaction.spent);\r\n                        this.setState({spentValsForAllExpenses: tempMap})\r\n                    })\r\n\r\n                \r\n                    // let newMap = new Map(myHashMap);\r\n                    // console.log('newMap', newMap);\r\n\r\n                    // newMap.filter((expenseId){\r\n                    //     if (expenseId === transactions.expenseId)\r\n                    //     {\r\n                    //        newMap.set(expenseId, newMap.get(expenseId) + transaction.spentVal) \r\n                    //     }\r\n                    // });\r\n                })\r\n            });\r\n    \r\n            \r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1 className=\"mainTitle\">{this.props.username}</h1>\r\n            \r\n                    <div className=\"buttons-flex\">\r\n                        <button type=\"button\" class=\"btn btn-danger\" onClick={this.toggleAddExpenseModal}>Add Expense</button>\r\n                        <button onClick={ () => {this.toggleAddTransactionModal();this.initTransactionDropDown();}}>Add Transaction</button>\r\n                        <button onClick={ () => {this.toggleEditExpenseModal();this.initEditDropDown();}}>Edit Expense</button>\r\n                        <Link to=\"/transactionsTable\">\r\n                            <button className=\"buttons-flex\">Show Transactions</button>\r\n                        </Link>\r\n                    </div>\r\n                    <AddExpenseForm  handleClose={this.toggleAddExpenseModal} show={this.state.addExpenseToggle} submitHandler={this.submitHandlerAddExpense}/>\r\n                    {/*<DeleteExpenseForm show={this.state.deleteExpenseToggle} handleClose={this.toggleDeleteExpenseModal} deletConfirm={this.state.deleteConfirmVal} handleDeleteConfirm={this.handleConfirmDelete} /> */}\r\n                    <EditExpenseForm myList={this.state.expenses} handleClose={this.toggleEditExpenseModal} handleChange={this.handleEditDropDownChange} show={this.state.editExpenseToggle} submitHandler={this.submitHandlerEditExpense}/>\r\n                    <AddTransactionForm  myList={this.state.expenses} handleClose={this.toggleAddTransactionModal} show={this.state.addTransactionToggle} submitHandler={this.submitHandlerAddTransaction} handleChange={this.handleTransactionDropDownChange}/>\r\n                    \r\n                    <div className=\"dropdown-flex\" id=\"dateDropDown\">\r\n                        <select value={this.state.selectedMonth} onChange={this.handleSelectedMonthDropDownChange}>\r\n                            <option disabled value=\"-1\">--Month--</option>\r\n                            {\r\n                            this.state.listOfMonths.map((element) => (\r\n                                <option value={element.monthNum}>{element.month}</option>\r\n                            ))}\r\n                        </select>\r\n                        <select onChange={this.handleSelectedYearDropDownChange}>\r\n                            <option disabled value=\"-1\">--Year--</option>\r\n                            <option value={this.state.today.getFullYear()-4}>{this.state.today.getFullYear()-4}</option>\r\n                            <option value={this.state.today.getFullYear()-3}>{this.state.today.getFullYear()-3}</option>\r\n                            <option value={this.state.today.getFullYear()-2}>{this.state.today.getFullYear()-2}</option>\r\n                            <option value={this.state.today.getFullYear()-1}>{this.state.today.getFullYear()-1}</option>\r\n                            <option selected value={this.state.today.getFullYear()}>{this.state.today.getFullYear()}</option>\r\n                        </select>\r\n                    </div>\r\n                    \r\n                    <table className=\"expense-table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Expense</th>\r\n                                <th>Budget</th>\r\n                                <th>Spent</th>\r\n                                <th>Remaining</th>\r\n                                <th>Delete()</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.renderTableData()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}