{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar helperPluginUtils = require('@babel/helper-plugin-utils');\n\nvar transformReactJSX = require('@babel/plugin-transform-react-jsx');\n\nvar transformReactJSXDevelopment = require('@babel/plugin-transform-react-jsx-development');\n\nvar transformReactDisplayName = require('@babel/plugin-transform-react-display-name');\n\nvar transformReactPure = require('@babel/plugin-transform-react-pure-annotations');\n\nvar helperValidatorOption = require('@babel/helper-validator-option');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar transformReactJSX__default = /*#__PURE__*/_interopDefaultLegacy(transformReactJSX);\n\nvar transformReactJSXDevelopment__default = /*#__PURE__*/_interopDefaultLegacy(transformReactJSXDevelopment);\n\nvar transformReactDisplayName__default = /*#__PURE__*/_interopDefaultLegacy(transformReactDisplayName);\n\nvar transformReactPure__default = /*#__PURE__*/_interopDefaultLegacy(transformReactPure);\n\nnew helperValidatorOption.OptionValidator(\"@babel/preset-react\");\n\nfunction normalizeOptions(options = {}) {\n  {\n    let {\n      pragma,\n      pragmaFrag\n    } = options;\n    const {\n      pure,\n      throwIfNamespace = true,\n      runtime = \"classic\",\n      importSource,\n      useBuiltIns,\n      useSpread\n    } = options;\n\n    if (runtime === \"classic\") {\n      pragma = pragma || \"React.createElement\";\n      pragmaFrag = pragmaFrag || \"React.Fragment\";\n    }\n\n    const development = !!options.development;\n    return {\n      development,\n      importSource,\n      pragma,\n      pragmaFrag,\n      pure,\n      runtime,\n      throwIfNamespace,\n      useBuiltIns,\n      useSpread\n    };\n  }\n}\n\nvar index = helperPluginUtils.declare((api, opts) => {\n  api.assertVersion(7);\n  const {\n    development,\n    importSource,\n    pragma,\n    pragmaFrag,\n    pure,\n    runtime,\n    throwIfNamespace\n  } = normalizeOptions(opts);\n  return {\n    plugins: [[development ? transformReactJSXDevelopment__default['default'] : transformReactJSX__default['default'], {\n      importSource,\n      pragma,\n      pragmaFrag,\n      runtime,\n      throwIfNamespace,\n      pure,\n      useBuiltIns: !!opts.useBuiltIns,\n      useSpread: opts.useSpread\n    }], transformReactDisplayName__default['default'], pure !== false && transformReactPure__default['default']].filter(Boolean)\n  };\n});\nexports.default = index;","map":{"version":3,"sources":["../src/normalize-options.js","../src/index.js"],"names":["OptionValidator","options","pragmaFrag","throwIfNamespace","runtime","useSpread","pragma","development","declare","api","normalizeOptions","plugins","transformReactJSXDevelopment","transformReactJSX","useBuiltIns","opts","transformReactDisplayName","pure","transformReactPure"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIU,IAAIA,qBAAAA,CAAJ,eAAA,CAAA,qBAAA;;AAEK,SAAA,gBAAA,CAA0BC,OAAO,GAAjC,EAAA,EAAwC;AAkF9C;AACL,QAAI;AAAA,MAAA,MAAA;AAAUC,MAAAA;AAAV,QAAJ,OAAA;AAEA,UAAM;AAAA,MAAA,IAAA;AAEJC,MAAAA,gBAAgB,GAFZ,IAAA;AAGJC,MAAAA,OAAO,GAHH,SAAA;AAAA,MAAA,YAAA;AAAA,MAAA,WAAA;AAMJC,MAAAA;AANI,QAAN,OAAA;;AASA,QAAID,OAAO,KAAX,SAAA,EAA2B;AACzBE,MAAAA,MAAM,GAAGA,MAAM,IAAfA,qBAAAA;AACAJ,MAAAA,UAAU,GAAGA,UAAU,IAAvBA,gBAAAA;AACD;;AAED,UAAMK,WAAW,GAAG,CAAC,CAACN,OAAO,CAA7B,WAAA;AAEA,WAAO;AAAA,MAAA,WAAA;AAAA,MAAA,YAAA;AAAA,MAAA,MAAA;AAAA,MAAA,UAAA;AAAA,MAAA,IAAA;AAAA,MAAA,OAAA;AAAA,MAAA,gBAAA;AAAA,MAAA,WAAA;AASLI,MAAAA;AATK,KAAP;AAWD;AACF;;AChHD,IAAA,KAAA,GAAeG,iBAAAA,CAAAA,OAAAA,CAAQ,CAAA,GAAA,EAAA,IAAA,KAAe;AACpCC,EAAAA,GAAG,CAAHA,aAAAA,CAAAA,CAAAA;AAEA,QAAM;AAAA,IAAA,WAAA;AAAA,IAAA,YAAA;AAAA,IAAA,MAAA;AAAA,IAAA,UAAA;AAAA,IAAA,IAAA;AAAA,IAAA,OAAA;AAOJN,IAAAA;AAPI,MAQFO,gBAAgB,CARpB,IAQoB,CARpB;AAUA,SAAO;AACLC,IAAAA,OAAO,EAAE,CACP,CACEJ,WAAW,GAAGK,qCAAAA,CAAH,SAAGA,CAAH,GAAkCC,0BAAAA,CAD/C,SAC+CA,CAD/C,EAWM;AAAA,MAAA,YAAA;AAAA,MAAA,MAAA;AAAA,MAAA,UAAA;AAAA,MAAA,OAAA;AAAA,MAAA,gBAAA;AAAA,MAAA,IAAA;AAOEC,MAAAA,WAAW,EAAE,CAAC,CAACC,IAAI,CAPrB,WAAA;AAQEV,MAAAA,SAAS,EAAEU,IAAI,CAACV;AARlB,KAXN,CADO,EAuBPW,kCAAAA,CAvBO,SAuBPA,CAvBO,EAwBPC,IAAI,KAAJA,KAAAA,IAAkBC,2BAAAA,CAxBX,SAwBWA,CAxBX,EAAA,MAAA,CAAA,OAAA;AADJ,GAAP;AAbF,CAAeV,CAAf","sourcesContent":["import {\n  OptionValidator,\n  findSuggestion,\n} from \"@babel/helper-validator-option\";\nconst v = new OptionValidator(\"@babel/preset-react\");\n\nexport default function normalizeOptions(options = {}) {\n  if (process.env.BABEL_8_BREAKING) {\n    if (\"useSpread\" in options) {\n      throw new Error(\n        '@babel/preset-react: Since Babel 8, an inline object with spread elements is always used, and the \"useSpread\" option is no longer available. Please remove it from your config.',\n      );\n    }\n\n    if (\"useBuiltIns\" in options) {\n      const useBuiltInsFormatted = JSON.stringify(options.useBuiltIns);\n      throw new Error(\n        `@babel/preset-react: Since \"useBuiltIns\" is removed in Babel 8, you can remove it from the config.\n- Babel 8 now transforms JSX spread to object spread. If you need to transpile object spread with\n\\`useBuiltIns: ${useBuiltInsFormatted}\\`, you can use the following config\n{\n  \"plugins\": [\n    [\"@babel/plugin-proposal-object-rest-spread\", { \"loose\": true, \"useBuiltIns\": ${useBuiltInsFormatted} }]\n  ],\n  \"presets\": [\"@babel/preset-react\"]\n}`,\n      );\n    }\n\n    const TopLevelOptions = {\n      development: \"development\",\n      importSource: \"importSource\",\n      pragma: \"pragma\",\n      pragmaFrag: \"pragmaFrag\",\n      pure: \"pure\",\n      runtime: \"runtime\",\n      throwIfNamespace: \"throwIfNamespace\",\n    };\n    v.validateTopLevelOptions(options, TopLevelOptions);\n    const development = v.validateBooleanOption(\n      TopLevelOptions.development,\n      options.development,\n      false,\n    );\n    let importSource = v.validateStringOption(\n      TopLevelOptions.importSource,\n      options.importSource,\n    );\n    let pragma = v.validateStringOption(TopLevelOptions.pragma, options.pragma);\n    let pragmaFrag = v.validateStringOption(\n      TopLevelOptions.pragmaFrag,\n      options.pragmaFrag,\n    );\n    const pure = v.validateBooleanOption(TopLevelOptions.pure, options.pure);\n    const runtime = v.validateStringOption(\n      TopLevelOptions.runtime,\n      options.runtime,\n      \"automatic\",\n    );\n    const throwIfNamespace = v.validateBooleanOption(\n      TopLevelOptions.throwIfNamespace,\n      options.throwIfNamespace,\n      true,\n    );\n\n    const validRuntime = [\"classic\", \"automatic\"];\n\n    if (runtime === \"classic\") {\n      pragma = pragma || \"React.createElement\";\n      pragmaFrag = pragmaFrag || \"React.Fragment\";\n    } else if (runtime === \"automatic\") {\n      importSource = importSource || \"react\";\n    } else {\n      throw new Error(\n        `@babel/preset-react: 'runtime' must be one of ['automatic', 'classic'] but we have '${runtime}'\\n` +\n          `- Did you mean '${findSuggestion(runtime, validRuntime)}'?`,\n      );\n    }\n\n    return {\n      development,\n      importSource,\n      pragma,\n      pragmaFrag,\n      pure,\n      runtime,\n      throwIfNamespace,\n    };\n  } else {\n    let { pragma, pragmaFrag } = options;\n\n    const {\n      pure,\n      throwIfNamespace = true,\n      runtime = \"classic\",\n      importSource,\n      useBuiltIns,\n      useSpread,\n    } = options;\n\n    if (runtime === \"classic\") {\n      pragma = pragma || \"React.createElement\";\n      pragmaFrag = pragmaFrag || \"React.Fragment\";\n    }\n\n    const development = !!options.development;\n\n    return {\n      development,\n      importSource,\n      pragma,\n      pragmaFrag,\n      pure,\n      runtime,\n      throwIfNamespace,\n      useBuiltIns,\n      useSpread,\n    };\n  }\n}\n","import { declare } from \"@babel/helper-plugin-utils\";\nimport transformReactJSX from \"@babel/plugin-transform-react-jsx\";\nimport transformReactJSXDevelopment from \"@babel/plugin-transform-react-jsx-development\";\nimport transformReactDisplayName from \"@babel/plugin-transform-react-display-name\";\nimport transformReactPure from \"@babel/plugin-transform-react-pure-annotations\";\nimport normalizeOptions from \"./normalize-options\";\n\nexport default declare((api, opts) => {\n  api.assertVersion(7);\n\n  const {\n    development,\n    importSource,\n    pragma,\n    pragmaFrag,\n    pure,\n    runtime,\n    throwIfNamespace,\n  } = normalizeOptions(opts);\n\n  return {\n    plugins: [\n      [\n        development ? transformReactJSXDevelopment : transformReactJSX,\n        process.env.BABEL_8_BREAKING\n          ? {\n              importSource,\n              pragma,\n              pragmaFrag,\n              runtime,\n              throwIfNamespace,\n              pure,\n            }\n          : {\n              importSource,\n              pragma,\n              pragmaFrag,\n              runtime,\n              throwIfNamespace,\n              pure,\n              useBuiltIns: !!opts.useBuiltIns,\n              useSpread: opts.useSpread,\n            },\n      ],\n      transformReactDisplayName,\n      pure !== false && transformReactPure,\n    ].filter(Boolean),\n  };\n});\n"]},"metadata":{},"sourceType":"script"}