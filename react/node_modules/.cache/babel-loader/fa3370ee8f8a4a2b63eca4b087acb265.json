{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.program = exports.expression = exports.statement = exports.statements = exports.smart = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  assertExpressionStatement\n} = _t;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({\n    program\n  }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;","map":{"version":3,"sources":["C:/Users/jason/OneDrive/desktop/BudgetTracker/react/node_modules/@babel/template/lib/formatters.js"],"names":["Object","defineProperty","exports","value","program","expression","statement","statements","smart","_t","require","assertExpressionStatement","makeStatementFormatter","fn","code","str","validate","unwrap","ast","body","slice","length","Error","start","stmt"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,UAAR,GAAqBH,OAAO,CAACI,SAAR,GAAoBJ,OAAO,CAACK,UAAR,GAAqBL,OAAO,CAACM,KAAR,GAAgB,KAAK,CAArG;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,cAAD,CAAhB;;AAEA,MAAM;AACJC,EAAAA;AADI,IAEFF,EAFJ;;AAIA,SAASG,sBAAT,CAAgCC,EAAhC,EAAoC;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEC,GAAG,IAAK,2BAA0BA,GAAI,EADvC;AAELC,IAAAA,QAAQ,EAAE,MAAM,CAAE,CAFb;AAGLC,IAAAA,MAAM,EAAEC,GAAG,IAAI;AACb,aAAOL,EAAE,CAACK,GAAG,CAACd,OAAJ,CAAYe,IAAZ,CAAiBC,KAAjB,CAAuB,CAAvB,CAAD,CAAT;AACD;AALI,GAAP;AAOD;;AAED,MAAMZ,KAAK,GAAGI,sBAAsB,CAACO,IAAI,IAAI;AAC3C,MAAIA,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,WAAOF,IAAP;AACD,GAFD,MAEO;AACL,WAAOA,IAAI,CAAC,CAAD,CAAX;AACD;AACF,CANmC,CAApC;AAOAjB,OAAO,CAACM,KAAR,GAAgBA,KAAhB;AACA,MAAMD,UAAU,GAAGK,sBAAsB,CAACO,IAAI,IAAIA,IAAT,CAAzC;AACAjB,OAAO,CAACK,UAAR,GAAqBA,UAArB;AACA,MAAMD,SAAS,GAAGM,sBAAsB,CAACO,IAAI,IAAI;AAC/C,MAAIA,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,MAAIH,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,SAAOH,IAAI,CAAC,CAAD,CAAX;AACD,CAVuC,CAAxC;AAWAjB,OAAO,CAACI,SAAR,GAAoBA,SAApB;AACA,MAAMD,UAAU,GAAG;AACjBS,EAAAA,IAAI,EAAEC,GAAG,IAAK,MAAKA,GAAI,KADN;AAEjBC,EAAAA,QAAQ,EAAEE,GAAG,IAAI;AACf,QAAIA,GAAG,CAACd,OAAJ,CAAYe,IAAZ,CAAiBE,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,YAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,QAAIjB,UAAU,CAACY,MAAX,CAAkBC,GAAlB,EAAuBK,KAAvB,KAAiC,CAArC,EAAwC;AACtC,YAAM,IAAID,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF,GAVgB;AAWjBL,EAAAA,MAAM,EAAE,CAAC;AACPb,IAAAA;AADO,GAAD,KAEF;AACJ,UAAM,CAACoB,IAAD,IAASpB,OAAO,CAACe,IAAvB;AACAR,IAAAA,yBAAyB,CAACa,IAAD,CAAzB;AACA,WAAOA,IAAI,CAACnB,UAAZ;AACD;AAjBgB,CAAnB;AAmBAH,OAAO,CAACG,UAAR,GAAqBA,UAArB;AACA,MAAMD,OAAO,GAAG;AACdU,EAAAA,IAAI,EAAEC,GAAG,IAAIA,GADC;AAEdC,EAAAA,QAAQ,EAAE,MAAM,CAAE,CAFJ;AAGdC,EAAAA,MAAM,EAAEC,GAAG,IAAIA,GAAG,CAACd;AAHL,CAAhB;AAKAF,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.program = exports.expression = exports.statement = exports.statements = exports.smart = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  assertExpressionStatement\n} = _t;\n\nfunction makeStatementFormatter(fn) {\n  return {\n    code: str => `/* @babel/template */;\\n${str}`,\n    validate: () => {},\n    unwrap: ast => {\n      return fn(ast.program.body.slice(1));\n    }\n  };\n}\n\nconst smart = makeStatementFormatter(body => {\n  if (body.length > 1) {\n    return body;\n  } else {\n    return body[0];\n  }\n});\nexports.smart = smart;\nconst statements = makeStatementFormatter(body => body);\nexports.statements = statements;\nconst statement = makeStatementFormatter(body => {\n  if (body.length === 0) {\n    throw new Error(\"Found nothing to return.\");\n  }\n\n  if (body.length > 1) {\n    throw new Error(\"Found multiple statements but wanted one\");\n  }\n\n  return body[0];\n});\nexports.statement = statement;\nconst expression = {\n  code: str => `(\\n${str}\\n)`,\n  validate: ast => {\n    if (ast.program.body.length > 1) {\n      throw new Error(\"Found multiple statements but wanted one\");\n    }\n\n    if (expression.unwrap(ast).start === 0) {\n      throw new Error(\"Parse result included parens.\");\n    }\n  },\n  unwrap: ({\n    program\n  }) => {\n    const [stmt] = program.body;\n    assertExpressionStatement(stmt);\n    return stmt.expression;\n  }\n};\nexports.expression = expression;\nconst program = {\n  code: str => str,\n  validate: () => {},\n  unwrap: ast => ast.program\n};\nexports.program = program;"]},"metadata":{},"sourceType":"script"}